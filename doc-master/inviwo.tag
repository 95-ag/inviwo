<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="class">
    <name>inviwo::AbortException</name>
    <filename>classinviwo_1_1AbortException.html</filename>
    <base>inviwo::Exception</base>
  </compound>
  <compound kind="class">
    <name>AbstactButton</name>
    <filename>classAbstactButton.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::glui::AbstractButton</name>
    <filename>classinviwo_1_1glui_1_1AbstractButton.html</filename>
    <base>inviwo::glui::Element</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ABufferGeometryGLProcessor</name>
    <filename>classinviwo_1_1ABufferGeometryGLProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1ABufferGeometryGLProcessor.html</anchorfile>
      <anchor>a196e7ea855dd30511d5b2d656041c718</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1ABufferGeometryGLProcessor.html</anchorfile>
      <anchor>afc8ad69cb1481c2c40619c024cf57d3e</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ABufferGLCompositeProperty</name>
    <filename>classinviwo_1_1ABufferGLCompositeProperty.html</filename>
    <base>inviwo::CompositeProperty</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1ABufferGLCompositeProperty.html</anchorfile>
      <anchor>ae5c0fdd0ac28a65f2624fba24c2266f6</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::Inviwo_ABufferGL4::ABufferGLInteractionHandler</name>
    <filename>classinviwo_1_1Inviwo__ABufferGL4_1_1ABufferGLInteractionHandler.html</filename>
    <base>inviwo::InteractionHandler</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ABufferGLModule</name>
    <filename>classinviwo_1_1ABufferGLModule.html</filename>
    <base>inviwo::InviwoModule</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getVersion</name>
      <anchorfile>classinviwo_1_1ABufferGLModule.html</anchorfile>
      <anchor>a6a5070a9b587a2e5f4f73e1d05035e01</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; VersionConverter &gt;</type>
      <name>getConverter</name>
      <anchorfile>classinviwo_1_1ABufferGLModule.html</anchorfile>
      <anchor>adad0e1c91847dccfce110e73b55076d8</anchor>
      <arglist>(int version) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ActivityIndicator</name>
    <filename>classinviwo_1_1ActivityIndicator.html</filename>
    <base>Observable&lt; ActivityIndicatorObserver &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ActivityIndicatorObserver</name>
    <filename>classinviwo_1_1ActivityIndicatorObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ActivityIndicatorOwner</name>
    <filename>classinviwo_1_1ActivityIndicatorOwner.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::AdvancedMaterialProperty</name>
    <filename>classinviwo_1_1AdvancedMaterialProperty.html</filename>
    <base>inviwo::CompositeProperty</base>
    <member kind="function" protection="protected">
      <type>float</type>
      <name>getIndexOfRefractionTerm</name>
      <anchorfile>classinviwo_1_1AdvancedMaterialProperty.html</anchorfile>
      <anchor>af20a351be631d739ea021da48067494b</anchor>
      <arglist>(float n1, float n2) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::dispatching::filter::All</name>
    <filename>structinviwo_1_1dispatching_1_1filter_1_1All.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::AnglePropertyWidgetQt</name>
    <filename>classinviwo_1_1AnglePropertyWidgetQt.html</filename>
    <templarg></templarg>
    <base>inviwo::PropertyWidgetQt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1AnglePropertyWidgetQt.html</anchorfile>
      <anchor>a011cb3d7d921ca8c3442c29d2be9e840</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::AngleRadiusWidget</name>
    <filename>classinviwo_1_1AngleRadiusWidget.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::animation::AniamtionTimeState</name>
    <filename>structinviwo_1_1animation_1_1AniamtionTimeState.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::Animation</name>
    <filename>classinviwo_1_1animation_1_1Animation.html</filename>
    <base>inviwo::animation::AnimationObservable</base>
    <base>inviwo::Serializable</base>
    <base>inviwo::animation::TrackObserver</base>
    <member kind="function">
      <type>void</type>
      <name>removeTrack</name>
      <anchorfile>classinviwo_1_1animation_1_1Animation.html</anchorfile>
      <anchor>ac1df4d5e45e10ff056f7f21b645d643a</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTrack</name>
      <anchorfile>classinviwo_1_1animation_1_1Animation.html</anchorfile>
      <anchor>acb22655f2af5164442e9415dfb78d38d</anchor>
      <arglist>(const std::string &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeKeyframe</name>
      <anchorfile>classinviwo_1_1animation_1_1Animation.html</anchorfile>
      <anchor>a8b875568eb012f0763c1dfb35da55391</anchor>
      <arglist>(Keyframe *key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classinviwo_1_1animation_1_1Animation.html</anchorfile>
      <anchor>a6fae95a3f84994f271e9894722574cc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Seconds &gt;</type>
      <name>getAllTimes</name>
      <anchorfile>classinviwo_1_1animation_1_1Animation.html</anchorfile>
      <anchor>a3579170b6c6683256576cb5911c136cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Seconds</type>
      <name>firstTime</name>
      <anchorfile>classinviwo_1_1animation_1_1Animation.html</anchorfile>
      <anchor>a78c10ab8e2d1f336d07da374fe0f9d93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Seconds</type>
      <name>lastTime</name>
      <anchorfile>classinviwo_1_1animation_1_1Animation.html</anchorfile>
      <anchor>a47260e329f6ecd2be5b3aaac2a02a82b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::AnimationController</name>
    <filename>classinviwo_1_1animation_1_1AnimationController.html</filename>
    <base>inviwo::animation::AnimationControllerObservable</base>
    <member kind="function">
      <type>void</type>
      <name>tick</name>
      <anchorfile>classinviwo_1_1animation_1_1AnimationController.html</anchorfile>
      <anchor>a2656a9e8ebd05f9873be9f9b7a89420d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Animation *</type>
      <name>animation_</name>
      <anchorfile>classinviwo_1_1animation_1_1AnimationController.html</anchorfile>
      <anchor>a9b80952d7015e0f3a227c9d03fd88b9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::AnimationControllerObservable</name>
    <filename>classinviwo_1_1animation_1_1AnimationControllerObservable.html</filename>
    <base>Observable&lt; AnimationControllerObserver &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::AnimationControllerObserver</name>
    <filename>classinviwo_1_1animation_1_1AnimationControllerObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::AnimationEditorDockWidgetQt</name>
    <filename>classinviwo_1_1animation_1_1AnimationEditorDockWidgetQt.html</filename>
    <base>inviwo::InviwoDockWidget</base>
    <base>inviwo::animation::AnimationControllerObserver</base>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::AnimationEditorQt</name>
    <filename>classinviwo_1_1animation_1_1AnimationEditorQt.html</filename>
    <base>inviwo::animation::AnimationObserver</base>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::AnimationLabelViewQt</name>
    <filename>classinviwo_1_1animation_1_1AnimationLabelViewQt.html</filename>
    <base>inviwo::animation::AnimationObserver</base>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::AnimationManager</name>
    <filename>classinviwo_1_1animation_1_1AnimationManager.html</filename>
    <base>inviwo::animation::AnimationObserver</base>
    <base>inviwo::PropertyOwnerObserver</base>
    <base>inviwo::ProcessorNetworkObserver</base>
    <member kind="function">
      <type>void</type>
      <name>registerPropertyTrackConnection</name>
      <anchorfile>classinviwo_1_1animation_1_1AnimationManager.html</anchorfile>
      <anchor>a6ca2ca6a83d4f2c630f50a78fa76c2a6</anchor>
      <arglist>(const std::string &amp;propertyClassID, const std::string &amp;trackClassID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerPropertyInterpolationConnection</name>
      <anchorfile>classinviwo_1_1animation_1_1AnimationManager.html</anchorfile>
      <anchor>aa5188cbde73fac8e1bbb6f7e2794a0d2</anchor>
      <arglist>(const std::string &amp;propertyClassID, const std::string &amp;interpolationClassID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addKeyframeCallback</name>
      <anchorfile>classinviwo_1_1animation_1_1AnimationManager.html</anchorfile>
      <anchor>ae3060814ee79ab36359bc14a25915ad3</anchor>
      <arglist>(Property *property)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSequenceCallback</name>
      <anchorfile>classinviwo_1_1animation_1_1AnimationManager.html</anchorfile>
      <anchor>af69524931d80b6b0aaf584667c01a66e</anchor>
      <arglist>(Property *property)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::AnimationModule</name>
    <filename>classinviwo_1_1AnimationModule.html</filename>
    <base>inviwo::InviwoModule</base>
    <base>inviwo::animation::AnimationSupplier</base>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::AnimationObservable</name>
    <filename>classinviwo_1_1animation_1_1AnimationObservable.html</filename>
    <base>Observable&lt; AnimationObserver &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::AnimationObserver</name>
    <filename>classinviwo_1_1animation_1_1AnimationObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>inviwo::AnimationQtModule</name>
    <filename>classinviwo_1_1AnimationQtModule.html</filename>
    <base>inviwo::InviwoModule</base>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::AnimationSupplier</name>
    <filename>classinviwo_1_1animation_1_1AnimationSupplier.html</filename>
    <member kind="function">
      <type>void</type>
      <name>registerTrack</name>
      <anchorfile>classinviwo_1_1animation_1_1AnimationSupplier.html</anchorfile>
      <anchor>a9c878433103c41eb4dc0b704e953ddd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerInterpolation</name>
      <anchorfile>classinviwo_1_1animation_1_1AnimationSupplier.html</anchorfile>
      <anchor>a2bfc1a33c13448c08f4eadff51160a4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerPropertyTrackConnection</name>
      <anchorfile>classinviwo_1_1animation_1_1AnimationSupplier.html</anchorfile>
      <anchor>ae64a75bfea845310e9aff29b6b4ce584</anchor>
      <arglist>(const std::string &amp;propertyClassID, const std::string &amp;trackClassID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerPropertyInterpolationConnection</name>
      <anchorfile>classinviwo_1_1animation_1_1AnimationSupplier.html</anchorfile>
      <anchor>a476fd998ac7bec5b256f9b0989a519c6</anchor>
      <arglist>(const std::string &amp;propertyClassID, const std::string &amp;interpolationClassID)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::AnimationViewQt</name>
    <filename>classinviwo_1_1animation_1_1AnimationViewQt.html</filename>
    <base>inviwo::animation::AnimationControllerObserver</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::detail::app_constructor</name>
    <filename>structinviwo_1_1detail_1_1app__constructor.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utildoc::TableBuilder::ArrributeWrapper</name>
    <filename>structinviwo_1_1utildoc_1_1TableBuilder_1_1ArrributeWrapper.html</filename>
    <base>inviwo::utildoc::TableBuilder::Wrapper</base>
  </compound>
  <compound kind="class">
    <name>inviwo::AssimpModule</name>
    <filename>classinviwo_1_1AssimpModule.html</filename>
    <base>inviwo::InviwoModule</base>
  </compound>
  <compound kind="class">
    <name>inviwo::AssimpReader</name>
    <filename>classinviwo_1_1AssimpReader.html</filename>
    <base>DataReaderType&lt; Mesh &gt;</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::xml::ElementMatcher::Attribute</name>
    <filename>structinviwo_1_1xml_1_1ElementMatcher_1_1Attribute.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::AutoLinker</name>
    <filename>classinviwo_1_1AutoLinker.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::AxisAlignedCutPlane</name>
    <filename>classinviwo_1_1AxisAlignedCutPlane.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1AxisAlignedCutPlane.html</anchorfile>
      <anchor>a878b4f67d6c5f0eeb965fcbc90de38a3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1AxisAlignedCutPlane.html</anchorfile>
      <anchor>ab728370b6884e0eba565571a14662e4b</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::plot::ParallelCoordinates::AxisBase</name>
    <filename>structinviwo_1_1plot_1_1ParallelCoordinates_1_1AxisBase.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::AxisProperty</name>
    <filename>classinviwo_1_1plot_1_1AxisProperty.html</filename>
    <base>inviwo::CompositeProperty</base>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::AxisRenderer</name>
    <filename>classinviwo_1_1plot_1_1AxisRenderer.html</filename>
    <base>inviwo::plot::AxisRendererBase</base>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::AxisRenderer3D</name>
    <filename>classinviwo_1_1plot_1_1AxisRenderer3D.html</filename>
    <base>inviwo::plot::AxisRendererBase</base>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::AxisRendererBase</name>
    <filename>classinviwo_1_1plot_1_1AxisRendererBase.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::AxisRenderProcessor</name>
    <filename>classinviwo_1_1plot_1_1AxisRenderProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1plot_1_1AxisRenderProcessor.html</anchorfile>
      <anchor>a1894b6c8bdb1cd06f6da30bb5f752043</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::Background</name>
    <filename>classinviwo_1_1Background.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1Background.html</anchorfile>
      <anchor>a63d366b9c7fe01c3c5c26643b29280ae</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1Background.html</anchorfile>
      <anchor>a5319c72efb3df5054c7b51a977b3cb98</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::kind::Base</name>
    <filename>structinviwo_1_1kind_1_1Base.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::BaseCLModule</name>
    <filename>classinviwo_1_1BaseCLModule.html</filename>
    <base>inviwo::InviwoModule</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getVersion</name>
      <anchorfile>classinviwo_1_1BaseCLModule.html</anchorfile>
      <anchor>ab53742efeaf8b67f197764ed3345d764</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; VersionConverter &gt;</type>
      <name>getConverter</name>
      <anchorfile>classinviwo_1_1BaseCLModule.html</anchorfile>
      <anchor>a006e369792716a8320b703804a069042</anchor>
      <arglist>(int version) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::BaseGLModule</name>
    <filename>classinviwo_1_1BaseGLModule.html</filename>
    <base>inviwo::InviwoModule</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getVersion</name>
      <anchorfile>classinviwo_1_1BaseGLModule.html</anchorfile>
      <anchor>af55f3c7b064a62d81c8c464934f55b26</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; VersionConverter &gt;</type>
      <name>getConverter</name>
      <anchorfile>classinviwo_1_1BaseGLModule.html</anchorfile>
      <anchor>a0e1a5fbcb849bac2ec51101c8dd2b2f1</anchor>
      <arglist>(int version) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::BaseImageInport</name>
    <filename>classinviwo_1_1BaseImageInport.html</filename>
    <templarg>N</templarg>
    <base>DataInport&lt; Image, N &gt;</base>
    <base>inviwo::ImagePortBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectTo</name>
      <anchorfile>classinviwo_1_1BaseImageInport.html</anchorfile>
      <anchor>a685b5f78608fe77c58d1f0aeac1ae111</anchor>
      <arglist>(Outport *outport) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>propagateEvent</name>
      <anchorfile>classinviwo_1_1BaseImageInport.html</anchorfile>
      <anchor>a0f03a8c6f44abba89f299d976f45b977</anchor>
      <arglist>(Event *event, Outport *target=nullptr) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseImageInport&lt; 0 &gt;</name>
    <filename>classinviwo_1_1BaseImageInport.html</filename>
    <base>DataInport&lt; Image, N &gt;</base>
    <base>inviwo::ImagePortBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectTo</name>
      <anchorfile>classinviwo_1_1BaseImageInport.html</anchorfile>
      <anchor>a685b5f78608fe77c58d1f0aeac1ae111</anchor>
      <arglist>(Outport *outport) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>propagateEvent</name>
      <anchorfile>classinviwo_1_1BaseImageInport.html</anchorfile>
      <anchor>a0f03a8c6f44abba89f299d976f45b977</anchor>
      <arglist>(Event *event, Outport *target=nullptr) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseImageInport&lt; 1 &gt;</name>
    <filename>classinviwo_1_1BaseImageInport.html</filename>
    <base>DataInport&lt; Image, N &gt;</base>
    <base>inviwo::ImagePortBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectTo</name>
      <anchorfile>classinviwo_1_1BaseImageInport.html</anchorfile>
      <anchor>a685b5f78608fe77c58d1f0aeac1ae111</anchor>
      <arglist>(Outport *outport) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>propagateEvent</name>
      <anchorfile>classinviwo_1_1BaseImageInport.html</anchorfile>
      <anchor>a0f03a8c6f44abba89f299d976f45b977</anchor>
      <arglist>(Event *event, Outport *target=nullptr) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::BaseModule</name>
    <filename>classinviwo_1_1BaseModule.html</filename>
    <base>inviwo::InviwoModule</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getVersion</name>
      <anchorfile>classinviwo_1_1BaseModule.html</anchorfile>
      <anchor>aadd69f1b95f43db76e0403942f33715e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; VersionConverter &gt;</type>
      <name>getConverter</name>
      <anchorfile>classinviwo_1_1BaseModule.html</anchorfile>
      <anchor>a7acc8d8af8de34575931bbd0dcc8841a</anchor>
      <arglist>(int version) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::BaseModuleCallback</name>
    <filename>classinviwo_1_1BaseModuleCallback.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>inviwo::CallbackWithSingleArgument</base>
  </compound>
  <compound kind="class">
    <name>inviwo::BaseOptionProperty</name>
    <filename>classinviwo_1_1BaseOptionProperty.html</filename>
    <base>inviwo::Property</base>
  </compound>
  <compound kind="class">
    <name>inviwo::BaseOrdinalAnimationProperty</name>
    <filename>classinviwo_1_1BaseOrdinalAnimationProperty.html</filename>
    <base>inviwo::CompositeProperty</base>
  </compound>
  <compound kind="class">
    <name>inviwo::BaseOrdinalEditorWidget</name>
    <filename>classinviwo_1_1BaseOrdinalEditorWidget.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::BasePropertyTrack</name>
    <filename>classinviwo_1_1animation_1_1BasePropertyTrack.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::BaseRepresentationConverter</name>
    <filename>classinviwo_1_1BaseRepresentationConverter.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::BaseRepresentationConverterFactory</name>
    <filename>classinviwo_1_1BaseRepresentationConverterFactory.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::BaseSliderWidgetQt</name>
    <filename>classinviwo_1_1BaseSliderWidgetQt.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::BasicMesh</name>
    <filename>classinviwo_1_1BasicMesh.html</filename>
    <base>inviwo::Mesh</base>
    <class kind="struct">inviwo::BasicMesh::Vertex</class>
    <member kind="function">
      <type>uint32_t</type>
      <name>addVertex</name>
      <anchorfile>classinviwo_1_1BasicMesh.html</anchorfile>
      <anchor>ac93e7366edcca5be087dae3486610f98</anchor>
      <arglist>(vec3 pos, vec3 normal, vec3 texCoord, vec4 color)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::BasisProperty</name>
    <filename>classinviwo_1_1BasisProperty.html</filename>
    <base>inviwo::CompositeProperty</base>
  </compound>
  <compound kind="class">
    <name>inviwo::BasisTransform</name>
    <filename>classinviwo_1_1BasisTransform.html</filename>
    <templarg></templarg>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1BasisTransform.html</anchorfile>
      <anchor>a50eb3f1bff122be981f3416ae315d20b</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::BinarySTLWriter</name>
    <filename>classinviwo_1_1BinarySTLWriter.html</filename>
    <base>DataWriterType&lt; Mesh &gt;</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::BlendModeEquationState</name>
    <filename>structinviwo_1_1utilgl_1_1BlendModeEquationState.html</filename>
    <base>inviwo::utilgl::BlendModeState</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::BlendModeState</name>
    <filename>structinviwo_1_1utilgl_1_1BlendModeState.html</filename>
    <base>inviwo::utilgl::GlBoolState</base>
  </compound>
  <compound kind="class">
    <name>inviwo::BoolCompositeProperty</name>
    <filename>classinviwo_1_1BoolCompositeProperty.html</filename>
    <base>inviwo::CompositeProperty</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1BoolCompositeProperty.html</anchorfile>
      <anchor>a97d2568c3666975676da9daafa6821d5</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::BoolCompositePropertyWidgetQt</name>
    <filename>classinviwo_1_1BoolCompositePropertyWidgetQt.html</filename>
    <base>inviwo::CollapsibleGroupBoxWidgetQt</base>
    <base>inviwo::CompositePropertyObserver</base>
  </compound>
  <compound kind="class">
    <name>inviwo::BoolProperty</name>
    <filename>classinviwo_1_1BoolProperty.html</filename>
    <base>TemplateProperty&lt; bool &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::glui::BoolPropertyWidget</name>
    <filename>classinviwo_1_1glui_1_1BoolPropertyWidget.html</filename>
    <base>inviwo::glui::CheckBox</base>
    <base>inviwo::PropertyWidget</base>
    <base>inviwo::PropertyObserver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1glui_1_1BoolPropertyWidget.html</anchorfile>
      <anchor>a17ae2fe0015d9ca11c6ff79c2adb47db</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::BoolPropertyWidgetQt</name>
    <filename>classinviwo_1_1BoolPropertyWidgetQt.html</filename>
    <base>inviwo::PropertyWidgetQt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1BoolPropertyWidgetQt.html</anchorfile>
      <anchor>a3171bb2cd3d03b604f00e7cbd45aba31</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::glui::BoxLayout</name>
    <filename>classinviwo_1_1glui_1_1BoxLayout.html</filename>
    <base>inviwo::glui::Layout</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setScalingFactor</name>
      <anchorfile>classinviwo_1_1glui_1_1BoxLayout.html</anchorfile>
      <anchor>a8c8a86870aabe72d104bd9c3cb0c327f</anchor>
      <arglist>(double factor) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classinviwo_1_1glui_1_1BoxLayout.html</anchorfile>
      <anchor>a0f006cebf66c8b22f3a25150b13c7755</anchor>
      <arglist>(const ivec2 &amp;topLeft, const size2_t &amp;canvasDim) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addElement</name>
      <anchorfile>classinviwo_1_1glui_1_1BoxLayout.html</anchorfile>
      <anchor>a1f5113b3056cbb601e036a69fdd92b97</anchor>
      <arglist>(Element &amp;element) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertElement</name>
      <anchorfile>classinviwo_1_1glui_1_1BoxLayout.html</anchorfile>
      <anchor>af9bcfbcd948201e8bdeadd027cdd1a81</anchor>
      <arglist>(int index, Element &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeElement</name>
      <anchorfile>classinviwo_1_1glui_1_1BoxLayout.html</anchorfile>
      <anchor>a9efb31a0c4cebcb041d780a9f0144f95</anchor>
      <arglist>(Element &amp;element) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>glui::BoxLayout</name>
    <filename>classglui_1_1BoxLayout.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::BrushingAndLinkingEvent</name>
    <filename>classinviwo_1_1BrushingAndLinkingEvent.html</filename>
    <base>inviwo::Event</base>
  </compound>
  <compound kind="class">
    <name>inviwo::BrushingAndLinkingInport</name>
    <filename>classinviwo_1_1BrushingAndLinkingInport.html</filename>
    <base>DataInport&lt; BrushingAndLinkingManager &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::BrushingAndLinkingManager</name>
    <filename>classinviwo_1_1BrushingAndLinkingManager.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::BrushingAndLinkingModule</name>
    <filename>classinviwo_1_1BrushingAndLinkingModule.html</filename>
    <base>inviwo::InviwoModule</base>
  </compound>
  <compound kind="class">
    <name>inviwo::BrushingAndLinkingOutport</name>
    <filename>classinviwo_1_1BrushingAndLinkingOutport.html</filename>
    <base>DataOutport&lt; BrushingAndLinkingManager &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::BrushingAndLinkingProcessor</name>
    <filename>classinviwo_1_1BrushingAndLinkingProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1BrushingAndLinkingProcessor.html</anchorfile>
      <anchor>aeab448094b2424b9478831eb08043a48</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::Buffer</name>
    <filename>classinviwo_1_1Buffer.html</filename>
    <templarg>T</templarg>
    <templarg>Target</templarg>
    <base>inviwo::BufferBase</base>
  </compound>
  <compound kind="class">
    <name>Buffer&lt; glm::u8 &gt;</name>
    <filename>classinviwo_1_1Buffer.html</filename>
    <base>inviwo::BufferBase</base>
  </compound>
  <compound kind="class">
    <name>Buffer&lt; unsigned char &gt;</name>
    <filename>classinviwo_1_1Buffer.html</filename>
    <base>inviwo::BufferBase</base>
  </compound>
  <compound kind="class">
    <name>inviwo::BufferBase</name>
    <filename>classinviwo_1_1BufferBase.html</filename>
    <base>Data&lt; BufferBase, BufferRepresentation &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classinviwo_1_1BufferBase.html</anchorfile>
      <anchor>ae1d173385994c6d1f6b87cafdbc7c06e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::BufferCL</name>
    <filename>classinviwo_1_1BufferCL.html</filename>
    <base>inviwo::BufferCLBase</base>
    <base>inviwo::BufferRepresentation</base>
    <member kind="function">
      <type></type>
      <name>BufferCL</name>
      <anchorfile>classinviwo_1_1BufferCL.html</anchorfile>
      <anchor>a27fbec159ccb6252870635eae506afbc</anchor>
      <arglist>(size_t size, const DataFormatBase *format, BufferUsage usage=BufferUsage::Static, const void *data=nullptr, cl_mem_flags readWriteFlag=CL_MEM_READ_WRITE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getSize</name>
      <anchorfile>classinviwo_1_1BufferCL.html</anchorfile>
      <anchor>ae39b1f014d347e430e0fead4ab437b94</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>upload</name>
      <anchorfile>classinviwo_1_1BufferCL.html</anchorfile>
      <anchor>a29fa38bb31a93c78cd2451785962e5b9</anchor>
      <arglist>(const void *data, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>download</name>
      <anchorfile>classinviwo_1_1BufferCL.html</anchorfile>
      <anchor>a8cbaeab58bed7c953a5fc26c6d5c57a1</anchor>
      <arglist>(void *data) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::BufferCL2RAMConverter</name>
    <filename>classinviwo_1_1BufferCL2RAMConverter.html</filename>
    <base>RepresentationConverterType&lt; BufferRepresentation, BufferCL, BufferRAM &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::BufferCLBase</name>
    <filename>classinviwo_1_1BufferCLBase.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::BufferCLGL</name>
    <filename>classinviwo_1_1BufferCLGL.html</filename>
    <base>inviwo::BufferCLBase</base>
    <base>inviwo::BufferRepresentation</base>
    <base>inviwo::BufferObjectObserver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getSize</name>
      <anchorfile>classinviwo_1_1BufferCLGL.html</anchorfile>
      <anchor>ae2e2aa90c00d056a920766ad1da15027</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>upload</name>
      <anchorfile>classinviwo_1_1BufferCLGL.html</anchorfile>
      <anchor>aab87f3b27a9e45e534a91e351de7f5a9</anchor>
      <arglist>(const void *data, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>download</name>
      <anchorfile>classinviwo_1_1BufferCLGL.html</anchorfile>
      <anchor>a45d1f19b73db1f00b1b81bebf0ff5789</anchor>
      <arglist>(void *data) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onBeforeBufferInitialization</name>
      <anchorfile>classinviwo_1_1BufferCLGL.html</anchorfile>
      <anchor>a29f3138b51a9d4d7bd05a68e003fe6e1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onAfterBufferInitialization</name>
      <anchorfile>classinviwo_1_1BufferCLGL.html</anchorfile>
      <anchor>af528478beb8a0335eeb069c413c7555d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; cl::BufferGL &gt;</type>
      <name>clBuffer_</name>
      <anchorfile>classinviwo_1_1BufferCLGL.html</anchorfile>
      <anchor>af4598dc0bcfaa3b5ee68d210e59326d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::BufferCLGL2CLConverter</name>
    <filename>classinviwo_1_1BufferCLGL2CLConverter.html</filename>
    <base>RepresentationConverterType&lt; BufferRepresentation, BufferCLGL, BufferCL &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::BufferCLGL2GLConverter</name>
    <filename>classinviwo_1_1BufferCLGL2GLConverter.html</filename>
    <base>RepresentationConverterType&lt; BufferRepresentation, BufferCLGL, BufferGL &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::BufferCLGL2RAMConverter</name>
    <filename>classinviwo_1_1BufferCLGL2RAMConverter.html</filename>
    <base>RepresentationConverterType&lt; BufferRepresentation, BufferCLGL, BufferRAM &gt;</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::BufferDispatcher</name>
    <filename>structinviwo_1_1util_1_1BufferDispatcher.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::BufferGL</name>
    <filename>classinviwo_1_1BufferGL.html</filename>
    <base>inviwo::BufferRepresentation</base>
    <member kind="function">
      <type></type>
      <name>BufferGL</name>
      <anchorfile>classinviwo_1_1BufferGL.html</anchorfile>
      <anchor>ab49161288e5d034a87359d9441e39c87</anchor>
      <arglist>(size_t size, const DataFormatBase *format, BufferUsage usage, BufferTarget target, std::shared_ptr&lt; BufferObject &gt; data=std::shared_ptr&lt; BufferObject &gt;(nullptr))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getSize</name>
      <anchorfile>classinviwo_1_1BufferGL.html</anchorfile>
      <anchor>a7ed936a5d09f41ee28a0853e0630013c</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::BufferGL2CLGLConverter</name>
    <filename>classinviwo_1_1BufferGL2CLGLConverter.html</filename>
    <base>RepresentationConverterType&lt; BufferRepresentation, BufferGL, BufferCLGL &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::BufferGL2RAMConverter</name>
    <filename>classinviwo_1_1BufferGL2RAMConverter.html</filename>
    <base>RepresentationConverterType&lt; BufferRepresentation, BufferGL, BufferRAM &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::BufferGLObjectId</name>
    <filename>classinviwo_1_1BufferGLObjectId.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::Mesh::BufferInfo</name>
    <filename>structinviwo_1_1Mesh_1_1BufferInfo.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::BufferObject</name>
    <filename>classinviwo_1_1BufferObject.html</filename>
    <base>Observable&lt; BufferObjectObserver &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classinviwo_1_1BufferObject.html</anchorfile>
      <anchor>aae78f750788ef2086aaf959fdc4b40c9</anchor>
      <arglist>(GLsizeiptr sizeInBytes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::BufferObjectArray</name>
    <filename>classinviwo_1_1BufferObjectArray.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::BufferObjectObserver</name>
    <filename>classinviwo_1_1BufferObjectObserver.html</filename>
    <base>inviwo::Observer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onBeforeBufferInitialization</name>
      <anchorfile>classinviwo_1_1BufferObjectObserver.html</anchorfile>
      <anchor>ae290ee3ea743c199d87dc5e0810570f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onAfterBufferInitialization</name>
      <anchorfile>classinviwo_1_1BufferObjectObserver.html</anchorfile>
      <anchor>af6095f5dff767b383c0b1245335f0358</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::BufferRAM</name>
    <filename>classinviwo_1_1BufferRAM.html</filename>
    <base>inviwo::BufferRepresentation</base>
    <member kind="function">
      <type>auto</type>
      <name>dispatch</name>
      <anchorfile>classinviwo_1_1BufferRAM.html</anchorfile>
      <anchor>a83fddc2cb2da78a6863689529598ea17</anchor>
      <arglist>(Callable &amp;&amp;callable, Args &amp;&amp;...args) -&gt; Result</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>dispatch</name>
      <anchorfile>classinviwo_1_1BufferRAM.html</anchorfile>
      <anchor>ab80745641a3a318fa7e3ad97ec5a4bf3</anchor>
      <arglist>(Callable &amp;&amp;callable, Args &amp;&amp;...args) const -&gt; Result</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::BufferRAM2CLConverter</name>
    <filename>classinviwo_1_1BufferRAM2CLConverter.html</filename>
    <base>RepresentationConverterType&lt; BufferRepresentation, BufferRAM, BufferCL &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::BufferRAM2GLConverter</name>
    <filename>classinviwo_1_1BufferRAM2GLConverter.html</filename>
    <base>RepresentationConverterType&lt; BufferRepresentation, BufferRAM, BufferGL &gt;</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::detail::BufferRamConstDispatcher</name>
    <filename>structinviwo_1_1detail_1_1BufferRamConstDispatcher.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::detail::BufferRamDispatcher</name>
    <filename>structinviwo_1_1detail_1_1BufferRamDispatcher.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::BufferRAMPrecision</name>
    <filename>classinviwo_1_1BufferRAMPrecision.html</filename>
    <templarg></templarg>
    <templarg>Target</templarg>
    <base>inviwo::BufferRAM</base>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getSize</name>
      <anchorfile>classinviwo_1_1BufferRAMPrecision.html</anchorfile>
      <anchor>a73a77328614ee93a6814c8e71edfcf94</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::BufferRepresentation</name>
    <filename>classinviwo_1_1BufferRepresentation.html</filename>
    <base>DataRepresentation&lt; BufferBase &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>getSize</name>
      <anchorfile>classinviwo_1_1BufferRepresentation.html</anchorfile>
      <anchor>aa59b7de3cf6afccba3c4fa6b4a12ff57</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getSizeOfElement</name>
      <anchorfile>classinviwo_1_1BufferRepresentation.html</anchorfile>
      <anchor>ac740a2a586df470e1074fd663a669ab3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::BufferToMeshProcessor</name>
    <filename>classinviwo_1_1BufferToMeshProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1BufferToMeshProcessor.html</anchorfile>
      <anchor>a2bdd21e14fa348ec58b4b143e31b21a2</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::BuildInfo</name>
    <filename>structinviwo_1_1util_1_1BuildInfo.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::glui::Button</name>
    <filename>classinviwo_1_1glui_1_1Button.html</filename>
    <base>inviwo::glui::AbstractButton</base>
  </compound>
  <compound kind="class">
    <name>ButtonProperty</name>
    <filename>classButtonProperty.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ButtonProperty</name>
    <filename>classinviwo_1_1ButtonProperty.html</filename>
    <base>inviwo::Property</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>classinviwo_1_1ButtonProperty.html</anchorfile>
      <anchor>af6b1ca9ca42fce8afae0d76e0c8bdcba</anchor>
      <arglist>(const Property *src) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pressButton</name>
      <anchorfile>classinviwo_1_1ButtonProperty.html</anchorfile>
      <anchor>a1610fc5c192f8ec2fd6212fe39b3d9c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1ButtonProperty.html</anchorfile>
      <anchor>ac54d709a9ce7c2da05b14971cc0644dd</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::glui::ButtonPropertyWidget</name>
    <filename>classinviwo_1_1glui_1_1ButtonPropertyWidget.html</filename>
    <base>inviwo::glui::Button</base>
    <base>inviwo::PropertyWidget</base>
    <base>inviwo::PropertyObserver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1glui_1_1ButtonPropertyWidget.html</anchorfile>
      <anchor>aa40825003f320fc9d48f2f701217d323</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ButtonPropertyWidgetQt</name>
    <filename>classinviwo_1_1ButtonPropertyWidgetQt.html</filename>
    <base>inviwo::PropertyWidgetQt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1ButtonPropertyWidgetQt.html</anchorfile>
      <anchor>afadaa8d4634671b11b6e4bd6bea1c0fa</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::shuntingyard::Calculator</name>
    <filename>classinviwo_1_1shuntingyard_1_1Calculator.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::CallBackList</name>
    <filename>classinviwo_1_1CallBackList.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classinviwo_1_1CallBackList.html</anchorfile>
      <anchor>ad7080eb0425fcb3d77a1a11c1dea5357</anchor>
      <arglist>(const BaseCallBack *callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classinviwo_1_1CallBackList.html</anchorfile>
      <anchor>adce6176bad54b7dcd834beac54146852</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeMemberFunction</name>
      <anchorfile>classinviwo_1_1CallBackList.html</anchorfile>
      <anchor>a3e1968faceb5d1a4f947b14898821641</anchor>
      <arglist>(T *o)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::CallbackWithSingleArgument</name>
    <filename>classinviwo_1_1CallbackWithSingleArgument.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::Camera</name>
    <filename>classinviwo_1_1Camera.html</filename>
    <base>inviwo::Serializable</base>
    <member kind="function">
      <type></type>
      <name>Camera</name>
      <anchorfile>classinviwo_1_1Camera.html</anchorfile>
      <anchor>ac1e015da17c20eb515f696fb83ecc32a</anchor>
      <arglist>(vec3 lookFrom=vec3(0.0f, 0.0f, 2.0f), vec3 lookTo=vec3(0.0f), vec3 lookUp=vec3(0.0f, 1.0f, 0.0f), float nearPlane=0.01f, float farPlane=10000.0f)</arglist>
    </member>
    <member kind="function">
      <type>vec3</type>
      <name>getDirection</name>
      <anchorfile>classinviwo_1_1Camera.html</anchorfile>
      <anchor>a0d0bc447c01500f86920ee3e9055f6f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearPlaneDist</name>
      <anchorfile>classinviwo_1_1Camera.html</anchorfile>
      <anchor>a80d21d6bc9e1ca3ac7c5f99941740611</anchor>
      <arglist>(float distance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFarPlaneDist</name>
      <anchorfile>classinviwo_1_1Camera.html</anchorfile>
      <anchor>aafc2760336952568a5625f144c1533e8</anchor>
      <arglist>(float distance)</arglist>
    </member>
    <member kind="function">
      <type>vec3</type>
      <name>getWorldPosFromNormalizedDeviceCoords</name>
      <anchorfile>classinviwo_1_1Camera.html</anchorfile>
      <anchor>af16dbab17e63aeed15521a3dc2a74345</anchor>
      <arglist>(const vec3 &amp;ndcCoords) const </arglist>
    </member>
    <member kind="function">
      <type>vec4</type>
      <name>getClipPosFromNormalizedDeviceCoords</name>
      <anchorfile>classinviwo_1_1Camera.html</anchorfile>
      <anchor>ac48d92841c4b2b42e3cbe7fce9b080cf</anchor>
      <arglist>(const vec3 &amp;ndcCoords) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual mat4</type>
      <name>calculateProjectionMatrix</name>
      <anchorfile>classinviwo_1_1Camera.html</anchorfile>
      <anchor>a60375053c59df21395765217dd0880c4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>nearPlaneDist_</name>
      <anchorfile>classinviwo_1_1Camera.html</anchorfile>
      <anchor>a08c6dcd7d5cf3941c9c1c3dde828c683</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>farPlaneDist_</name>
      <anchorfile>classinviwo_1_1Camera.html</anchorfile>
      <anchor>a4823d919759dcfcbd2b6566dd295675e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::util::Camera2D</name>
    <filename>classinviwo_1_1util_1_1Camera2D.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::CameraFactory</name>
    <filename>classinviwo_1_1CameraFactory.html</filename>
    <base>StandardFactory&lt; Camera, CameraFactoryObject &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::CameraFactoryObject</name>
    <filename>classinviwo_1_1CameraFactoryObject.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::CameraFactoryObjectTemplate</name>
    <filename>classinviwo_1_1CameraFactoryObjectTemplate.html</filename>
    <templarg></templarg>
    <base>inviwo::CameraFactoryObject</base>
  </compound>
  <compound kind="class">
    <name>inviwo::CameraFrustum</name>
    <filename>classinviwo_1_1CameraFrustum.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1CameraFrustum.html</anchorfile>
      <anchor>ad2c3b8769386acf4c0f0b353089f1b0e</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::CameraProperty</name>
    <filename>classinviwo_1_1CameraProperty.html</filename>
    <base>inviwo::CompositeProperty</base>
    <base>inviwo::TrackballObject</base>
    <member kind="function">
      <type>void</type>
      <name>resetCamera</name>
      <anchorfile>classinviwo_1_1CameraProperty.html</anchorfile>
      <anchor>ace351502ccb2e7ec81ea3b1c3b6e360f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual vec3</type>
      <name>getWorldPosFromNormalizedDeviceCoords</name>
      <anchorfile>classinviwo_1_1CameraProperty.html</anchorfile>
      <anchor>a48696d1460eed92d983402a2e78fa682</anchor>
      <arglist>(const vec3 &amp;ndcCoords) const override</arglist>
    </member>
    <member kind="function">
      <type>vec4</type>
      <name>getClipPosFromNormalizedDeviceCoords</name>
      <anchorfile>classinviwo_1_1CameraProperty.html</anchorfile>
      <anchor>a6a5dd9be327853e98ff6cbe059200c39</anchor>
      <arglist>(const vec3 &amp;ndcCoords) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjustCameraToData</name>
      <anchorfile>classinviwo_1_1CameraProperty.html</anchorfile>
      <anchor>a83cbbd9d8e67413cc341ceac61be9aa9</anchor>
      <arglist>(const mat4 &amp;newDataToWorldMatrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetAdjustCameraToData</name>
      <anchorfile>classinviwo_1_1CameraProperty.html</anchorfile>
      <anchor>a5dba7f4e315985279f62f7fde2d8a257</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::CameraTrackball</name>
    <filename>classinviwo_1_1CameraTrackball.html</filename>
    <base>inviwo::Trackball</base>
    <member kind="function">
      <type></type>
      <name>CameraTrackball</name>
      <anchorfile>classinviwo_1_1CameraTrackball.html</anchorfile>
      <anchor>ac0794cde6ca4f86ce2e78a3a138642cd</anchor>
      <arglist>(CameraProperty *cameraProp)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::cameratype</name>
    <filename>structinviwo_1_1util_1_1cameratype.html</filename>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::cameratype&lt; 2 &gt;</name>
    <filename>structinviwo_1_1util_1_1cameratype_3_012_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::cameratype&lt; 3 &gt;</name>
    <filename>structinviwo_1_1util_1_1cameratype_3_013_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::CameraWidget</name>
    <filename>classinviwo_1_1CameraWidget.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1CameraWidget.html</anchorfile>
      <anchor>a03bf64a2d25c21a62bc30808e361ffa6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1CameraWidget.html</anchorfile>
      <anchor>a4eaccf606a1948b2a177787688bce119</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::detail::CanConnectTo</name>
    <filename>structinviwo_1_1detail_1_1CanConnectTo.html</filename>
    <templarg></templarg>
    <templarg>Flat</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::detail::CanConnectTo&lt; T, false &gt;</name>
    <filename>structinviwo_1_1detail_1_1CanConnectTo_3_01T_00_01false_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::detail::CanConnectTo&lt; T, true &gt;</name>
    <filename>structinviwo_1_1detail_1_1CanConnectTo_3_01T_00_01true_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::Canvas</name>
    <filename>classinviwo_1_1Canvas.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::CanvasGL</name>
    <filename>classinviwo_1_1CanvasGL.html</filename>
    <base>inviwo::Canvas</base>
    <member kind="function">
      <type>double</type>
      <name>getDepthValueAtCoord</name>
      <anchorfile>classinviwo_1_1CanvasGL.html</anchorfile>
      <anchor>a619837b65fb2452c785ff2b6a299d8f4</anchor>
      <arglist>(ivec2 canvasCoordinate) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ready</name>
      <anchorfile>classinviwo_1_1CanvasGL.html</anchorfile>
      <anchor>a8b5502ae2c6e8677d492f7348ae2acc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const MeshGL *</type>
      <name>squareGL_</name>
      <anchorfile>classinviwo_1_1CanvasGL.html</anchorfile>
      <anchor>a437a2f4ff36685129ccfcaac704fb277</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Shader *</type>
      <name>textureShader_</name>
      <anchorfile>classinviwo_1_1CanvasGL.html</anchorfile>
      <anchor>afa2e8cd6118d9aa1841ee289d1f68c2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Shader *</type>
      <name>noiseShader_</name>
      <anchorfile>classinviwo_1_1CanvasGL.html</anchorfile>
      <anchor>a43b258bd6442a6d35fa83b4475bcd1e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::CanvasGLFW</name>
    <filename>classinviwo_1_1CanvasGLFW.html</filename>
    <base>inviwo::CanvasGL</base>
  </compound>
  <compound kind="class">
    <name>inviwo::CanvasProcessor</name>
    <filename>classinviwo_1_1CanvasProcessor.html</filename>
    <base>inviwo::Processor</base>
    <base>inviwo::ProcessorWidgetMetaDataObserver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1CanvasProcessor.html</anchorfile>
      <anchor>af460787825c2e7d1c4c0f26253233a4c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doIfNotReady</name>
      <anchorfile>classinviwo_1_1CanvasProcessor.html</anchorfile>
      <anchor>ab8f37550ef66f9d731a157aaf09b448b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEvaluateWhenHidden</name>
      <anchorfile>classinviwo_1_1CanvasProcessor.html</anchorfile>
      <anchor>a1000f7096733319cff7cdcc2e8fd17c6</anchor>
      <arglist>(bool option)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::CanvasProcessorGL</name>
    <filename>classinviwo_1_1CanvasProcessorGL.html</filename>
    <base>inviwo::CanvasProcessor</base>
  </compound>
  <compound kind="class">
    <name>inviwo::CanvasProcessorWidget</name>
    <filename>classinviwo_1_1CanvasProcessorWidget.html</filename>
    <base>inviwo::ProcessorWidget</base>
  </compound>
  <compound kind="class">
    <name>inviwo::CanvasProcessorWidgetGLFW</name>
    <filename>classinviwo_1_1CanvasProcessorWidgetGLFW.html</filename>
    <base>inviwo::CanvasProcessorWidget</base>
  </compound>
  <compound kind="class">
    <name>inviwo::CanvasProcessorWidgetQt</name>
    <filename>classinviwo_1_1CanvasProcessorWidgetQt.html</filename>
    <base>inviwo::CanvasProcessorWidget</base>
    <base>inviwo::ProcessorObserver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onProcessorDisplayNameChanged</name>
      <anchorfile>classinviwo_1_1CanvasProcessorWidgetQt.html</anchorfile>
      <anchor>ab1447f2bfc6436678cb41f369ea28693</anchor>
      <arglist>(Processor *, const std::string &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::CanvasQGLWidget</name>
    <filename>classinviwo_1_1CanvasQGLWidget.html</filename>
    <base>inviwo::CanvasGL</base>
  </compound>
  <compound kind="class">
    <name>inviwo::CanvasQOpenGLWidget</name>
    <filename>classinviwo_1_1CanvasQOpenGLWidget.html</filename>
    <base>inviwo::CanvasGL</base>
  </compound>
  <compound kind="class">
    <name>inviwo::CanvasQtBase</name>
    <filename>classinviwo_1_1CanvasQtBase.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::CanvasQWindow</name>
    <filename>classinviwo_1_1CanvasQWindow.html</filename>
    <base>inviwo::CanvasGL</base>
  </compound>
  <compound kind="class">
    <name>inviwo::Capabilities</name>
    <filename>classinviwo_1_1Capabilities.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::CaseInsensitiveCompare</name>
    <filename>structinviwo_1_1CaseInsensitiveCompare.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::CategoricalColumn</name>
    <filename>classinviwo_1_1plot_1_1CategoricalColumn.html</filename>
    <base>TemplateColumn&lt; std::uint32_t &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; DataPointBase &gt;</type>
      <name>get</name>
      <anchorfile>classinviwo_1_1plot_1_1CategoricalColumn.html</anchorfile>
      <anchor>a6c98041d5ca0478f29e5a7246922403f</anchor>
      <arglist>(size_t idx, bool getStringsAsStrings) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classinviwo_1_1plot_1_1CategoricalColumn.html</anchorfile>
      <anchor>ac0ba4c65ed6a29f8b0c8b32d06b0a84f</anchor>
      <arglist>(const std::string &amp;value) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::CheckableQComboBox</name>
    <filename>classinviwo_1_1CheckableQComboBox.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::glui::CheckBox</name>
    <filename>classinviwo_1_1glui_1_1CheckBox.html</filename>
    <base>inviwo::glui::Element</base>
  </compound>
  <compound kind="class">
    <name>Checkbox</name>
    <filename>classCheckbox.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::CImgLayerRAMLoader</name>
    <filename>classinviwo_1_1CImgLayerRAMLoader.html</filename>
    <base>DiskRepresentationLoader&lt; LayerRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::CImgLayerReader</name>
    <filename>classinviwo_1_1CImgLayerReader.html</filename>
    <base>DataReaderType&lt; Layer &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::CImgLayerWriter</name>
    <filename>classinviwo_1_1CImgLayerWriter.html</filename>
    <base>DataWriterType&lt; Layer &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::CImgModule</name>
    <filename>classinviwo_1_1CImgModule.html</filename>
    <base>inviwo::InviwoModule</base>
  </compound>
  <compound kind="class">
    <name>inviwo::CImgVolumeRAMLoader</name>
    <filename>classinviwo_1_1CImgVolumeRAMLoader.html</filename>
    <base>DiskRepresentationLoader&lt; VolumeRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::CImgVolumeReader</name>
    <filename>classinviwo_1_1CImgVolumeReader.html</filename>
    <base>DataReaderType&lt; Volume &gt;</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::ClearColor</name>
    <filename>structinviwo_1_1utilgl_1_1ClearColor.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::CLFormats::CLFormat</name>
    <filename>structinviwo_1_1CLFormats_1_1CLFormat.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::CLFormats</name>
    <filename>classinviwo_1_1CLFormats.html</filename>
    <class kind="struct">inviwo::CLFormats::CLFormat</class>
  </compound>
  <compound kind="class">
    <name>inviwo::Clock</name>
    <filename>classinviwo_1_1Clock.html</filename>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classinviwo_1_1Clock.html</anchorfile>
      <anchor>ae0dacab46a1da76b47a92ea8e74bd086</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tick</name>
      <anchorfile>classinviwo_1_1Clock.html</anchorfile>
      <anchor>a935d60f345e1acfc1a26a58f57c1dc14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getElapsedMiliseconds</name>
      <anchorfile>classinviwo_1_1Clock.html</anchorfile>
      <anchor>a3828905d693766b0da8e8f58ed174050</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getElapsedSeconds</name>
      <anchorfile>classinviwo_1_1Clock.html</anchorfile>
      <anchor>a6939b095e7e491b383d6ddbca731ae4c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ClockGL</name>
    <filename>classinviwo_1_1ClockGL.html</filename>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classinviwo_1_1ClockGL.html</anchorfile>
      <anchor>a6cdefc39125cc1c4819c3d29ef03ce86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classinviwo_1_1ClockGL.html</anchorfile>
      <anchor>aa91b9322b4e04b8b6a2c9531feec969a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getElapsedTime</name>
      <anchorfile>classinviwo_1_1ClockGL.html</anchorfile>
      <anchor>ad4b62cea7b1a0b358f3cb795d9ca35fb</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::util::cloneable_ptr</name>
    <filename>classinviwo_1_1util_1_1cloneable__ptr.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>cloneable_ptr&lt; inviwo::DiskRepresentationLoader&lt; LayerRepresentation &gt; &gt;</name>
    <filename>classinviwo_1_1util_1_1cloneable__ptr.html</filename>
  </compound>
  <compound kind="class">
    <name>cloneable_ptr&lt; inviwo::DiskRepresentationLoader&lt; Repr &gt; &gt;</name>
    <filename>classinviwo_1_1util_1_1cloneable__ptr.html</filename>
  </compound>
  <compound kind="class">
    <name>cloneable_ptr&lt; inviwo::DiskRepresentationLoader&lt; VolumeRepresentation &gt; &gt;</name>
    <filename>classinviwo_1_1util_1_1cloneable__ptr.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::CloningFactory</name>
    <filename>classinviwo_1_1CloningFactory.html</filename>
    <templarg>T</templarg>
    <templarg>K</templarg>
    <base>Factory&lt; T, K &gt;</base>
  </compound>
  <compound kind="class">
    <name>CloningFactory&lt; MetaData &gt;</name>
    <filename>classinviwo_1_1CloningFactory.html</filename>
    <base>Factory&lt; MetaData, const std::string &amp; &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::CollapsibleGroupBoxWidgetQt</name>
    <filename>classinviwo_1_1CollapsibleGroupBoxWidgetQt.html</filename>
    <base>inviwo::PropertyWidgetQt</base>
    <base>inviwo::PropertyOwnerObserver</base>
    <base>inviwo::ProcessorObserver</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1CollapsibleGroupBoxWidgetQt.html</anchorfile>
      <anchor>ae1f4dd10cc3ceb341bfad6ae9a56af8c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>onProcessorDisplayNameChanged</name>
      <anchorfile>classinviwo_1_1CollapsibleGroupBoxWidgetQt.html</anchorfile>
      <anchor>af3726311b904b13ff69c1891e7453a87</anchor>
      <arglist>(Processor *processor, const std::string &amp;oldIdentifier) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::colorbrewer::ColorBrewerException</name>
    <filename>classinviwo_1_1colorbrewer_1_1ColorBrewerException.html</filename>
    <base>inviwo::Exception</base>
  </compound>
  <compound kind="class">
    <name>inviwo::colorbrewer::ColorBrewerTooFewException</name>
    <filename>classinviwo_1_1colorbrewer_1_1ColorBrewerTooFewException.html</filename>
    <base>inviwo::Exception</base>
  </compound>
  <compound kind="class">
    <name>inviwo::colorbrewer::ColorBrewerTooManyException</name>
    <filename>classinviwo_1_1colorbrewer_1_1ColorBrewerTooManyException.html</filename>
    <base>inviwo::Exception</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::detail::ColorConverter</name>
    <filename>structinviwo_1_1detail_1_1ColorConverter.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::detail::ColorConverter&lt; dvec3 &gt;</name>
    <filename>structinviwo_1_1detail_1_1ColorConverter_3_01dvec3_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::detail::ColorConverter&lt; dvec4 &gt;</name>
    <filename>structinviwo_1_1detail_1_1ColorConverter_3_01dvec4_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::detail::ColorConverter&lt; ivec3 &gt;</name>
    <filename>structinviwo_1_1detail_1_1ColorConverter_3_01ivec3_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::detail::ColorConverter&lt; ivec4 &gt;</name>
    <filename>structinviwo_1_1detail_1_1ColorConverter_3_01ivec4_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::detail::ColorConverter&lt; vec3 &gt;</name>
    <filename>structinviwo_1_1detail_1_1ColorConverter_3_01vec3_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::detail::ColorConverter&lt; vec4 &gt;</name>
    <filename>structinviwo_1_1detail_1_1ColorConverter_3_01vec4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ColorPropertyWidgetQt</name>
    <filename>classinviwo_1_1ColorPropertyWidgetQt.html</filename>
    <templarg></templarg>
    <base>inviwo::PropertyWidgetQt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1ColorPropertyWidgetQt.html</anchorfile>
      <anchor>addae7de13bbc9647f19201dd7cab9aeb</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ColorWheel</name>
    <filename>classinviwo_1_1ColorWheel.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::Column</name>
    <filename>classinviwo_1_1plot_1_1Column.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::CommandLineParser</name>
    <filename>classinviwo_1_1CommandLineParser.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ComparePointers</name>
    <filename>classinviwo_1_1ComparePointers.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::comparePtr</name>
    <filename>structinviwo_1_1comparePtr.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::CompositeProcessor</name>
    <filename>classinviwo_1_1CompositeProcessor.html</filename>
    <base>inviwo::Processor</base>
    <base>inviwo::ProcessorNetworkObserver</base>
    <base>inviwo::PropertyOwnerObserver</base>
    <base>inviwo::PropertyObserver</base>
    <member kind="function">
      <type></type>
      <name>CompositeProcessor</name>
      <anchorfile>classinviwo_1_1CompositeProcessor.html</anchorfile>
      <anchor>a0846a1231db5edb28fe64a9b8c83dca8</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, InviwoApplication *app, const std::string &amp;filename=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1CompositeProcessor.html</anchorfile>
      <anchor>ae59187be450963844810fd6ede04863c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>propagateEvent</name>
      <anchorfile>classinviwo_1_1CompositeProcessor.html</anchorfile>
      <anchor>a7aba3ffc6ecb4e43b6b60a2c2b331780</anchor>
      <arglist>(Event *event, Outport *source) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveSubNetwork</name>
      <anchorfile>classinviwo_1_1CompositeProcessor.html</anchorfile>
      <anchor>a5ad273227d5f26af9eda2a2a80ec852c</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>ProcessorNetwork &amp;</type>
      <name>getSubNetwork</name>
      <anchorfile>classinviwo_1_1CompositeProcessor.html</anchorfile>
      <anchor>abffdb68d85e15baeac0aa92ad256840f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Property *</type>
      <name>addSuperProperty</name>
      <anchorfile>classinviwo_1_1CompositeProcessor.html</anchorfile>
      <anchor>aaf42b42b1ae7a72253612e5dcb833aa2</anchor>
      <arglist>(Property *subProperty)</arglist>
    </member>
    <member kind="function">
      <type>Property *</type>
      <name>getSuperProperty</name>
      <anchorfile>classinviwo_1_1CompositeProcessor.html</anchorfile>
      <anchor>a9ce463a1564276c83993560058dbb35f</anchor>
      <arglist>(Property *subProperty)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSuperProperty</name>
      <anchorfile>classinviwo_1_1CompositeProcessor.html</anchorfile>
      <anchor>a33cd58f044deae5b89780d7f4eb86fc1</anchor>
      <arglist>(Property *subProperty)</arglist>
    </member>
    <member kind="function">
      <type>Property *</type>
      <name>getSubProperty</name>
      <anchorfile>classinviwo_1_1CompositeProcessor.html</anchorfile>
      <anchor>a1c0f1d5a4b2f5da23ec6fd47df139a43</anchor>
      <arglist>(Property *superProperty)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::CompositeProcessorFactoryObject</name>
    <filename>classinviwo_1_1CompositeProcessorFactoryObject.html</filename>
    <base>inviwo::ProcessorFactoryObject</base>
  </compound>
  <compound kind="class">
    <name>inviwo::CompositeProperty</name>
    <filename>classinviwo_1_1CompositeProperty.html</filename>
    <base>inviwo::Property</base>
    <base>inviwo::PropertyOwner</base>
    <base>inviwo::CompositePropertyObservable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1CompositeProperty.html</anchorfile>
      <anchor>a15906621ef158a3e4872408b6c583be2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1CompositeProperty.html</anchorfile>
      <anchor>a2c07b40993993bc9e61661c09e8142de</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1CompositeProperty.html</anchorfile>
      <anchor>a6c935268c63f5f0c2dc3a33b9689606d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReadOnly</name>
      <anchorfile>classinviwo_1_1CompositeProperty.html</anchorfile>
      <anchor>aefa477b49a8fc42903d7ff3f78e3371a</anchor>
      <arglist>(bool value) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::CompositePropertyObservable</name>
    <filename>classinviwo_1_1CompositePropertyObservable.html</filename>
    <base>Observable&lt; CompositePropertyObserver &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::CompositePropertyObserver</name>
    <filename>classinviwo_1_1CompositePropertyObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>inviwo::CompositePropertyWidgetQt</name>
    <filename>classinviwo_1_1CompositePropertyWidgetQt.html</filename>
    <base>inviwo::CollapsibleGroupBoxWidgetQt</base>
    <base>inviwo::CompositePropertyObserver</base>
  </compound>
  <compound kind="class">
    <name>inviwo::CompositeSink</name>
    <filename>classinviwo_1_1CompositeSink.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>inviwo::CompositeSinkBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1CompositeSink.html</anchorfile>
      <anchor>a176877b9eac8bf2d13ed3605a97886d8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Outport &amp;</type>
      <name>getSuperOutport</name>
      <anchorfile>classinviwo_1_1CompositeSink.html</anchorfile>
      <anchor>a62f4bb3b70a74f4f313c0edeb026e9fc</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::CompositeSinkBase</name>
    <filename>classinviwo_1_1CompositeSinkBase.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="pure">
      <type>virtual Outport &amp;</type>
      <name>getSuperOutport</name>
      <anchorfile>classinviwo_1_1CompositeSinkBase.html</anchorfile>
      <anchor>aa53c6e28f8969e8d44f349b46cee7414</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::CompositeSource</name>
    <filename>classinviwo_1_1CompositeSource.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>inviwo::CompositeSourceBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1CompositeSource.html</anchorfile>
      <anchor>a4689fff165324e2dafb765d8bfb1514f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Inport &amp;</type>
      <name>getSuperInport</name>
      <anchorfile>classinviwo_1_1CompositeSource.html</anchorfile>
      <anchor>a7b7dc749b59531cdefa32c871bfbec28</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::CompositeSourceBase</name>
    <filename>classinviwo_1_1CompositeSourceBase.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="pure">
      <type>virtual Inport &amp;</type>
      <name>getSuperInport</name>
      <anchorfile>classinviwo_1_1CompositeSourceBase.html</anchorfile>
      <anchor>ac443191a6f6b4268f53c8e02944980d1</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::marching::Config</name>
    <filename>structinviwo_1_1marching_1_1Config.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ConnectionDragGraphicsItem</name>
    <filename>classinviwo_1_1ConnectionDragGraphicsItem.html</filename>
    <base>inviwo::CurveGraphicsItem</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ConnectionGraphicsItem</name>
    <filename>classinviwo_1_1ConnectionGraphicsItem.html</filename>
    <base>inviwo::ConnectionDragGraphicsItem</base>
    <member kind="function">
      <type></type>
      <name>ConnectionGraphicsItem</name>
      <anchorfile>classinviwo_1_1ConnectionGraphicsItem.html</anchorfile>
      <anchor>a64f9666873c2b526aeace634cab2c640</anchor>
      <arglist>(ProcessorOutportGraphicsItem *outport, ProcessorInportGraphicsItem *inport, const PortConnection &amp;connection)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::dispatching::detail::Cons</name>
    <filename>structinviwo_1_1dispatching_1_1detail_1_1Cons.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::dispatching::detail::Cons&lt; T, std::tuple&lt; Args... &gt; &gt;</name>
    <filename>structinviwo_1_1dispatching_1_1detail_1_1Cons_3_01T_00_01std_1_1tuple_3_01Args_8_8_8_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Args</templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::ConsoleLogger</name>
    <filename>classinviwo_1_1ConsoleLogger.html</filename>
    <base>inviwo::Logger</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ConsoleWidget</name>
    <filename>classinviwo_1_1ConsoleWidget.html</filename>
    <base>inviwo::InviwoDockWidget</base>
    <base>inviwo::Logger</base>
  </compound>
  <compound kind="class">
    <name>inviwo::InportIterable&lt; T, false &gt;::const_iterator</name>
    <filename>classinviwo_1_1InportIterable_3_01T_00_01false_01_4_1_1const__iterator.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::InportIterable::const_iterator</name>
    <filename>classinviwo_1_1InportIterable_1_1const__iterator.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::OutportIterable::const_iterator</name>
    <filename>classinviwo_1_1OutportIterable_1_1const__iterator.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::ConstantInterpolation</name>
    <filename>classinviwo_1_1animation_1_1ConstantInterpolation.html</filename>
    <templarg></templarg>
    <base>inviwo::animation::InterpolationTyped</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::detail::constructor_picker</name>
    <filename>structinviwo_1_1detail_1_1constructor__picker.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::ContainerWrapper</name>
    <filename>classinviwo_1_1ContainerWrapper.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">inviwo::ContainerWrapper::Item</class>
  </compound>
  <compound kind="class">
    <name>inviwo::ConverterException</name>
    <filename>classinviwo_1_1ConverterException.html</filename>
    <base>inviwo::Exception</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ConvexHull2DProcessor</name>
    <filename>classinviwo_1_1ConvexHull2DProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1ConvexHull2DProcessor.html</anchorfile>
      <anchor>accfa8828e00cb3b17f55078acba12933</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::SystemCapabilities::CPUInfo</name>
    <filename>structinviwo_1_1SystemCapabilities_1_1CPUInfo.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::CropWidget</name>
    <filename>classinviwo_1_1CropWidget.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1CropWidget.html</anchorfile>
      <anchor>aad307482dc405acb0f85c7efe01c69d9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1CropWidget.html</anchorfile>
      <anchor>a3dd832cd1a96c154f791cc9515275395</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::CSVDataReaderException</name>
    <filename>classinviwo_1_1CSVDataReaderException.html</filename>
    <base>inviwo::DataReaderException</base>
  </compound>
  <compound kind="class">
    <name>inviwo::CSVReader</name>
    <filename>classinviwo_1_1CSVReader.html</filename>
    <base>DataReaderType&lt; plot::DataFrame &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; plot::DataFrame &gt;</type>
      <name>readData</name>
      <anchorfile>classinviwo_1_1CSVReader.html</anchorfile>
      <anchor>aaa07ae9157a167977b021b3816af58ac</anchor>
      <arglist>(const std::string &amp;fileName) override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; plot::DataFrame &gt;</type>
      <name>readData</name>
      <anchorfile>classinviwo_1_1CSVReader.html</anchorfile>
      <anchor>ac678a8c99364fea705d6d9c190323a70</anchor>
      <arglist>(std::istream &amp;stream) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::CSVSource</name>
    <filename>classinviwo_1_1plot_1_1CSVSource.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1plot_1_1CSVSource.html</anchorfile>
      <anchor>aa43b3b8be615e70221d4c643ce294f9b</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::CubeProxyGeometry</name>
    <filename>classinviwo_1_1CubeProxyGeometry.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1CubeProxyGeometry.html</anchorfile>
      <anchor>aff8794710d883710df27dc7853213b51</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::CubeRenderer</name>
    <filename>classinviwo_1_1CubeRenderer.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1CubeRenderer.html</anchorfile>
      <anchor>a8f935d3bc37a83099d0c242841750374</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1CubeRenderer.html</anchorfile>
      <anchor>a3d7b644bd8c3b720de3ae9d41e7ceb04</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::CullFaceState</name>
    <filename>structinviwo_1_1utilgl_1_1CullFaceState.html</filename>
    <base>inviwo::utilgl::GlBoolState</base>
  </compound>
  <compound kind="class">
    <name>inviwo::CurveGraphicsItem</name>
    <filename>classinviwo_1_1CurveGraphicsItem.html</filename>
    <base>inviwo::EditorGraphicsItem</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>paint</name>
      <anchorfile>classinviwo_1_1CurveGraphicsItem.html</anchorfile>
      <anchor>ac3ec02d6e699b90224721dc422100b07</anchor>
      <arglist>(QPainter *p, const QStyleOptionGraphicsItem *options, QWidget *widget)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::CustomDoubleSpinBoxQt</name>
    <filename>classinviwo_1_1CustomDoubleSpinBoxQt.html</filename>
    <member kind="function">
      <type>QSize</type>
      <name>sizeHint</name>
      <anchorfile>classinviwo_1_1CustomDoubleSpinBoxQt.html</anchorfile>
      <anchor>a83fb55b8e7b23020f001d5e4bc8577b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDecimals</name>
      <anchorfile>classinviwo_1_1CustomDoubleSpinBoxQt.html</anchorfile>
      <anchor>a713e1c732b7d494d24869552109bcf78</anchor>
      <arglist>(int decimals)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>timerEvent</name>
      <anchorfile>classinviwo_1_1CustomDoubleSpinBoxQt.html</anchorfile>
      <anchor>abd0a843ab10ca7d911592479d4ee4004</anchor>
      <arglist>(QTimerEvent *event)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::Data</name>
    <filename>classinviwo_1_1Data.html</filename>
    <templarg>Self</templarg>
    <templarg>Repr</templarg>
    <member kind="function">
      <type>const T *</type>
      <name>getRepresentation</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a716a42cf844f48cb0c8c930d39915c5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getEditableRepresentation</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a5a0bc7c8cd54a98e41e600bda03e9936</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRepresentation</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a7a552a3a8b5a5f25e51c4fcba5ba93f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRepresentations</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a61c0286105ecdb2fdf11bba23bf7186f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRepresentation</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>ac51800a8529036a231cddf5628c80778</anchor>
      <arglist>(std::shared_ptr&lt; Repr &gt; representation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRepresentation</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>acf122b40c140a6de251287ea4a67d31e</anchor>
      <arglist>(const Repr *representation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeOtherRepresentations</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a797196dea1d291bd8fc203effbb083e2</anchor>
      <arglist>(const Repr *representation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearRepresentations</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>ae8f203803ac5a396782176ee4611875b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidateAllOther</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a420e57ba8390dca6ff60b369115f5c00</anchor>
      <arglist>(const Repr *repr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataFormat</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a4d1ff8127be83c25f23098aa64665ef8</anchor>
      <arglist>(const DataFormatBase *format)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Data&lt; BufferBase, BufferRepresentation &gt;</name>
    <filename>classinviwo_1_1Data.html</filename>
    <member kind="function">
      <type>const T *</type>
      <name>getRepresentation</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a716a42cf844f48cb0c8c930d39915c5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getEditableRepresentation</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a5a0bc7c8cd54a98e41e600bda03e9936</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRepresentation</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a7a552a3a8b5a5f25e51c4fcba5ba93f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRepresentations</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a61c0286105ecdb2fdf11bba23bf7186f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRepresentation</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>ac51800a8529036a231cddf5628c80778</anchor>
      <arglist>(std::shared_ptr&lt; BufferRepresentation &gt; representation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRepresentation</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>acf122b40c140a6de251287ea4a67d31e</anchor>
      <arglist>(const BufferRepresentation *representation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeOtherRepresentations</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a797196dea1d291bd8fc203effbb083e2</anchor>
      <arglist>(const BufferRepresentation *representation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearRepresentations</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>ae8f203803ac5a396782176ee4611875b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidateAllOther</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a420e57ba8390dca6ff60b369115f5c00</anchor>
      <arglist>(const BufferRepresentation *repr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataFormat</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a4d1ff8127be83c25f23098aa64665ef8</anchor>
      <arglist>(const DataFormatBase *format)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Data&lt; Layer, LayerRepresentation &gt;</name>
    <filename>classinviwo_1_1Data.html</filename>
    <member kind="function">
      <type>const T *</type>
      <name>getRepresentation</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a716a42cf844f48cb0c8c930d39915c5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getEditableRepresentation</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a5a0bc7c8cd54a98e41e600bda03e9936</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRepresentation</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a7a552a3a8b5a5f25e51c4fcba5ba93f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRepresentations</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a61c0286105ecdb2fdf11bba23bf7186f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRepresentation</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>ac51800a8529036a231cddf5628c80778</anchor>
      <arglist>(std::shared_ptr&lt; LayerRepresentation &gt; representation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRepresentation</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>acf122b40c140a6de251287ea4a67d31e</anchor>
      <arglist>(const LayerRepresentation *representation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeOtherRepresentations</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a797196dea1d291bd8fc203effbb083e2</anchor>
      <arglist>(const LayerRepresentation *representation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearRepresentations</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>ae8f203803ac5a396782176ee4611875b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidateAllOther</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a420e57ba8390dca6ff60b369115f5c00</anchor>
      <arglist>(const LayerRepresentation *repr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataFormat</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a4d1ff8127be83c25f23098aa64665ef8</anchor>
      <arglist>(const DataFormatBase *format)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Data&lt; Volume, VolumeRepresentation &gt;</name>
    <filename>classinviwo_1_1Data.html</filename>
    <member kind="function">
      <type>const T *</type>
      <name>getRepresentation</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a716a42cf844f48cb0c8c930d39915c5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getEditableRepresentation</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a5a0bc7c8cd54a98e41e600bda03e9936</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRepresentation</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a7a552a3a8b5a5f25e51c4fcba5ba93f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRepresentations</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a61c0286105ecdb2fdf11bba23bf7186f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRepresentation</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>ac51800a8529036a231cddf5628c80778</anchor>
      <arglist>(std::shared_ptr&lt; VolumeRepresentation &gt; representation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRepresentation</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>acf122b40c140a6de251287ea4a67d31e</anchor>
      <arglist>(const VolumeRepresentation *representation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeOtherRepresentations</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a797196dea1d291bd8fc203effbb083e2</anchor>
      <arglist>(const VolumeRepresentation *representation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearRepresentations</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>ae8f203803ac5a396782176ee4611875b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidateAllOther</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a420e57ba8390dca6ff60b369115f5c00</anchor>
      <arglist>(const VolumeRepresentation *repr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataFormat</name>
      <anchorfile>classinviwo_1_1Data.html</anchorfile>
      <anchor>a4d1ff8127be83c25f23098aa64665ef8</anchor>
      <arglist>(const DataFormatBase *format)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::DataExport</name>
    <filename>classinviwo_1_1DataExport.html</filename>
    <templarg>DataType</templarg>
    <templarg>PortType</templarg>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1DataExport.html</anchorfile>
      <anchor>aecc0f21ffb0c4d9a9dfbb1266b563cd5</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataExport&lt; Layer, ImageInport &gt;</name>
    <filename>classinviwo_1_1DataExport.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1DataExport.html</anchorfile>
      <anchor>aecc0f21ffb0c4d9a9dfbb1266b563cd5</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataExport&lt; Mesh, MeshInport &gt;</name>
    <filename>classinviwo_1_1DataExport.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1DataExport.html</anchorfile>
      <anchor>aecc0f21ffb0c4d9a9dfbb1266b563cd5</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataExport&lt; Volume, VolumeInport &gt;</name>
    <filename>classinviwo_1_1DataExport.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1DataExport.html</anchorfile>
      <anchor>aecc0f21ffb0c4d9a9dfbb1266b563cd5</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::DataFormat</name>
    <filename>classinviwo_1_1DataFormat.html</filename>
    <templarg></templarg>
    <base>inviwo::DataFormatBase</base>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>size</name>
      <anchorfile>classinviwo_1_1DataFormat.html</anchorfile>
      <anchor>a64c92a157af3a8eac794a9582eb0d6fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>components</name>
      <anchorfile>classinviwo_1_1DataFormat.html</anchorfile>
      <anchor>ae3822dbd35e78eb2523be06f35ff9bb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>precision</name>
      <anchorfile>classinviwo_1_1DataFormat.html</anchorfile>
      <anchor>a6d5fc0ecfe3e3a13d20ecfae770ad404</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::DataFormatBase</name>
    <filename>classinviwo_1_1DataFormatBase.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>getSize</name>
      <anchorfile>classinviwo_1_1DataFormatBase.html</anchorfile>
      <anchor>a364a702c0329498acc6653d2634133ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getComponents</name>
      <anchorfile>classinviwo_1_1DataFormatBase.html</anchorfile>
      <anchor>aa510fcdfbc8c2df09a2cee2cefb49690</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getPrecision</name>
      <anchorfile>classinviwo_1_1DataFormatBase.html</anchorfile>
      <anchor>a9c0592f3f73f08d74d8dca51df7df262</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::DataFormatException</name>
    <filename>classinviwo_1_1DataFormatException.html</filename>
    <base>inviwo::Exception</base>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::DataFrame</name>
    <filename>classinviwo_1_1plot_1_1DataFrame.html</filename>
    <member kind="function">
      <type>std::shared_ptr&lt; Column &gt;</type>
      <name>addColumnFromBuffer</name>
      <anchorfile>classinviwo_1_1plot_1_1DataFrame.html</anchorfile>
      <anchor>af72eb2ac319a9fe5d9adb82425525e15</anchor>
      <arglist>(const std::string &amp;identifier, std::shared_ptr&lt; const BufferBase &gt; buffer)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; TemplateColumn&lt; T &gt; &gt;</type>
      <name>addColumn</name>
      <anchorfile>classinviwo_1_1plot_1_1DataFrame.html</anchorfile>
      <anchor>a727b5cecb6b783e538e8899ecc3c18ac</anchor>
      <arglist>(const std::string &amp;header, size_t size=0)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; CategoricalColumn &gt;</type>
      <name>addCategoricalColumn</name>
      <anchorfile>classinviwo_1_1plot_1_1DataFrame.html</anchorfile>
      <anchor>aac061303bdf28aa58149e485d3178932</anchor>
      <arglist>(const std::string &amp;header, size_t size=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRow</name>
      <anchorfile>classinviwo_1_1plot_1_1DataFrame.html</anchorfile>
      <anchor>a2433b63776840041779145bd73508cdb</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Column &gt;</type>
      <name>getColumn</name>
      <anchorfile>classinviwo_1_1plot_1_1DataFrame.html</anchorfile>
      <anchor>aca24ab7262bf838a80489fde32d1c60f</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumberOfRows</name>
      <anchorfile>classinviwo_1_1plot_1_1DataFrame.html</anchorfile>
      <anchor>a5826b1c28360f21b00c70a875c3c8bc1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateIndexBuffer</name>
      <anchorfile>classinviwo_1_1plot_1_1DataFrame.html</anchorfile>
      <anchor>a874ed6d1ae29e44ede214cb0d0b5a4e7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::DataFrameColumnProperty</name>
    <filename>classinviwo_1_1plot_1_1DataFrameColumnProperty.html</filename>
    <base>TemplateOptionProperty&lt; int &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1plot_1_1DataFrameColumnProperty.html</anchorfile>
      <anchor>a95b20c12e76624b2aad10f5a61a2b9c3</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::DataFrameColumnToColorVector</name>
    <filename>classinviwo_1_1plot_1_1DataFrameColumnToColorVector.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1plot_1_1DataFrameColumnToColorVector.html</anchorfile>
      <anchor>a4ce109044705482893cf64798d7c014e</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::DataGroup</name>
    <filename>classinviwo_1_1DataGroup.html</filename>
    <templarg>Self</templarg>
    <templarg>Repr</templarg>
  </compound>
  <compound kind="class">
    <name>DataGroup&lt; Image, ImageRepresentation &gt;</name>
    <filename>classinviwo_1_1DataGroup.html</filename>
  </compound>
  <compound kind="class">
    <name>DataGroup&lt; Mesh, MeshRepresentation &gt;</name>
    <filename>classinviwo_1_1DataGroup.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::DataGroupRepresentation</name>
    <filename>classinviwo_1_1DataGroupRepresentation.html</filename>
    <templarg>Owner</templarg>
  </compound>
  <compound kind="class">
    <name>DataGroupRepresentation&lt; Image &gt;</name>
    <filename>classinviwo_1_1DataGroupRepresentation.html</filename>
  </compound>
  <compound kind="class">
    <name>DataGroupRepresentation&lt; Mesh &gt;</name>
    <filename>classinviwo_1_1DataGroupRepresentation.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::DataInport</name>
    <filename>classinviwo_1_1DataInport.html</filename>
    <templarg>T</templarg>
    <templarg>N</templarg>
    <templarg>Flat</templarg>
    <base>inviwo::Inport</base>
    <base>inviwo::InportIterable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataInport.html</anchorfile>
      <anchor>af4236498c4f1a8f70ebbd1df5e949e3b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataInport&lt; BrushingAndLinkingManager &gt;</name>
    <filename>classinviwo_1_1DataInport.html</filename>
    <base>inviwo::Inport</base>
    <base>InportIterable&lt; BrushingAndLinkingManager, false &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataInport.html</anchorfile>
      <anchor>af4236498c4f1a8f70ebbd1df5e949e3b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataInport&lt; BufferBase &gt;</name>
    <filename>classinviwo_1_1DataInport.html</filename>
    <base>inviwo::Inport</base>
    <base>InportIterable&lt; BufferBase, false &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataInport.html</anchorfile>
      <anchor>af4236498c4f1a8f70ebbd1df5e949e3b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataInport&lt; DataFrame &gt;</name>
    <filename>classinviwo_1_1DataInport.html</filename>
    <base>inviwo::Inport</base>
    <base>InportIterable&lt; DataFrame, false &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataInport.html</anchorfile>
      <anchor>af4236498c4f1a8f70ebbd1df5e949e3b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataInport&lt; Eigen::MatrixXf &gt;</name>
    <filename>classinviwo_1_1DataInport.html</filename>
    <base>inviwo::Inport</base>
    <base>InportIterable&lt; Eigen::MatrixXf, false &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataInport.html</anchorfile>
      <anchor>af4236498c4f1a8f70ebbd1df5e949e3b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataInport&lt; Handle &gt;</name>
    <filename>classinviwo_1_1DataInport.html</filename>
    <base>inviwo::Inport</base>
    <base>InportIterable&lt; Handle, false &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataInport.html</anchorfile>
      <anchor>af4236498c4f1a8f70ebbd1df5e949e3b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataInport&lt; Image, N &gt;</name>
    <filename>classinviwo_1_1DataInport.html</filename>
    <base>inviwo::Inport</base>
    <base>InportIterable&lt; Image, false &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataInport.html</anchorfile>
      <anchor>af4236498c4f1a8f70ebbd1df5e949e3b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataInport&lt; IntegralLineSet &gt;</name>
    <filename>classinviwo_1_1DataInport.html</filename>
    <base>inviwo::Inport</base>
    <base>InportIterable&lt; IntegralLineSet, false &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataInport.html</anchorfile>
      <anchor>af4236498c4f1a8f70ebbd1df5e949e3b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataInport&lt; inviwo::LightSource &gt;</name>
    <filename>classinviwo_1_1DataInport.html</filename>
    <base>inviwo::Inport</base>
    <base>InportIterable&lt; inviwo::LightSource, false &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataInport.html</anchorfile>
      <anchor>af4236498c4f1a8f70ebbd1df5e949e3b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataInport&lt; inviwo::plot::DataFrame &gt;</name>
    <filename>classinviwo_1_1DataInport.html</filename>
    <base>inviwo::Inport</base>
    <base>InportIterable&lt; inviwo::plot::DataFrame, false &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataInport.html</anchorfile>
      <anchor>af4236498c4f1a8f70ebbd1df5e949e3b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataInport&lt; inviwo::Spatial4DSampler&lt; 3, double &gt; &gt;</name>
    <filename>classinviwo_1_1DataInport.html</filename>
    <base>inviwo::Inport</base>
    <base>InportIterable&lt; inviwo::Spatial4DSampler&lt; 3, double &gt;, false &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataInport.html</anchorfile>
      <anchor>af4236498c4f1a8f70ebbd1df5e949e3b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataInport&lt; inviwo::SpatialSampler&lt; 3, 3, double &gt; &gt;</name>
    <filename>classinviwo_1_1DataInport.html</filename>
    <base>inviwo::Inport</base>
    <base>InportIterable&lt; inviwo::SpatialSampler&lt; 3, 3, double &gt;, false &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataInport.html</anchorfile>
      <anchor>af4236498c4f1a8f70ebbd1df5e949e3b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataInport&lt; inviwo::Volume, 0 &gt;</name>
    <filename>classinviwo_1_1DataInport.html</filename>
    <base>inviwo::Inport</base>
    <base>InportIterable&lt; inviwo::Volume, false &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataInport.html</anchorfile>
      <anchor>af4236498c4f1a8f70ebbd1df5e949e3b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataInport&lt; Mesh &gt;</name>
    <filename>classinviwo_1_1DataInport.html</filename>
    <base>inviwo::Inport</base>
    <base>InportIterable&lt; Mesh, false &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataInport.html</anchorfile>
      <anchor>af4236498c4f1a8f70ebbd1df5e949e3b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataInport&lt; Mesh, 0, true &gt;</name>
    <filename>classinviwo_1_1DataInport.html</filename>
    <base>inviwo::Inport</base>
    <base>InportIterable&lt; Mesh, Flat &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataInport.html</anchorfile>
      <anchor>af4236498c4f1a8f70ebbd1df5e949e3b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataInport&lt; SeedPoint3DVector, 0 &gt;</name>
    <filename>classinviwo_1_1DataInport.html</filename>
    <base>inviwo::Inport</base>
    <base>InportIterable&lt; SeedPoint3DVector, false &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataInport.html</anchorfile>
      <anchor>af4236498c4f1a8f70ebbd1df5e949e3b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataInport&lt; SeedPointVector, 0 &gt;</name>
    <filename>classinviwo_1_1DataInport.html</filename>
    <base>inviwo::Inport</base>
    <base>InportIterable&lt; SeedPointVector, false &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataInport.html</anchorfile>
      <anchor>af4236498c4f1a8f70ebbd1df5e949e3b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataInport&lt; std::vector&lt; std::shared_ptr&lt; Image &gt; &gt; &gt;</name>
    <filename>classinviwo_1_1DataInport.html</filename>
    <base>inviwo::Inport</base>
    <base>InportIterable&lt; std::vector&lt; std::shared_ptr&lt; Image &gt; &gt;, false &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataInport.html</anchorfile>
      <anchor>af4236498c4f1a8f70ebbd1df5e949e3b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataInport&lt; std::vector&lt; std::shared_ptr&lt; inviwo::Volume &gt; &gt; &gt;</name>
    <filename>classinviwo_1_1DataInport.html</filename>
    <base>inviwo::Inport</base>
    <base>InportIterable&lt; std::vector&lt; std::shared_ptr&lt; inviwo::Volume &gt; &gt;, false &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataInport.html</anchorfile>
      <anchor>af4236498c4f1a8f70ebbd1df5e949e3b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataInport&lt; std::vector&lt; std::shared_ptr&lt; Mesh &gt; &gt; &gt;</name>
    <filename>classinviwo_1_1DataInport.html</filename>
    <base>inviwo::Inport</base>
    <base>InportIterable&lt; std::vector&lt; std::shared_ptr&lt; Mesh &gt; &gt;, false &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataInport.html</anchorfile>
      <anchor>af4236498c4f1a8f70ebbd1df5e949e3b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataInport&lt; std::vector&lt; std::shared_ptr&lt; T &gt; &gt; &gt;</name>
    <filename>classinviwo_1_1DataInport.html</filename>
    <base>inviwo::Inport</base>
    <base>InportIterable&lt; std::vector&lt; std::shared_ptr&lt; T &gt; &gt;, false &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataInport.html</anchorfile>
      <anchor>af4236498c4f1a8f70ebbd1df5e949e3b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataInport&lt; std::vector&lt; std::shared_ptr&lt; Volume &gt; &gt; &gt;</name>
    <filename>classinviwo_1_1DataInport.html</filename>
    <base>inviwo::Inport</base>
    <base>InportIterable&lt; std::vector&lt; std::shared_ptr&lt; Volume &gt; &gt;, false &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataInport.html</anchorfile>
      <anchor>af4236498c4f1a8f70ebbd1df5e949e3b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataInport&lt; std::vector&lt; vec4 &gt; &gt;</name>
    <filename>classinviwo_1_1DataInport.html</filename>
    <base>inviwo::Inport</base>
    <base>InportIterable&lt; std::vector&lt; vec4 &gt;, false &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataInport.html</anchorfile>
      <anchor>af4236498c4f1a8f70ebbd1df5e949e3b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataInport&lt; T &gt;</name>
    <filename>classinviwo_1_1DataInport.html</filename>
    <base>inviwo::Inport</base>
    <base>inviwo::InportIterable&lt; T, false &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataInport.html</anchorfile>
      <anchor>af4236498c4f1a8f70ebbd1df5e949e3b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataInport&lt; Volume &gt;</name>
    <filename>classinviwo_1_1DataInport.html</filename>
    <base>inviwo::Inport</base>
    <base>InportIterable&lt; Volume, false &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataInport.html</anchorfile>
      <anchor>af4236498c4f1a8f70ebbd1df5e949e3b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataInport&lt; VolumeSequence &gt;</name>
    <filename>classinviwo_1_1DataInport.html</filename>
    <base>inviwo::Inport</base>
    <base>InportIterable&lt; VolumeSequence, false &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataInport.html</anchorfile>
      <anchor>af4236498c4f1a8f70ebbd1df5e949e3b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::DataMapper</name>
    <filename>classinviwo_1_1DataMapper.html</filename>
    <member kind="variable">
      <type>dvec2</type>
      <name>dataRange</name>
      <anchorfile>classinviwo_1_1DataMapper.html</anchorfile>
      <anchor>ace2bd755e9c66a1075c0215966cc4bd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dvec2</type>
      <name>valueRange</name>
      <anchorfile>classinviwo_1_1DataMapper.html</anchorfile>
      <anchor>a55b255ba9f000ef79caaab4445feae08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>valueUnit</name>
      <anchorfile>classinviwo_1_1DataMapper.html</anchorfile>
      <anchor>adbc7346c9c4219b0478f9b00902ce7b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::DataOutport</name>
    <filename>classinviwo_1_1DataOutport.html</filename>
    <templarg>T</templarg>
    <base>inviwo::Outport</base>
    <base>OutportIterableImpl&lt; T &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataOutport.html</anchorfile>
      <anchor>ae19dc61ce77a82a5e78ab76fe3cc5a5e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataOutport&lt; BrushingAndLinkingManager &gt;</name>
    <filename>classinviwo_1_1DataOutport.html</filename>
    <base>inviwo::Outport</base>
    <base>inviwo::OutportIterableImpl</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataOutport.html</anchorfile>
      <anchor>ae19dc61ce77a82a5e78ab76fe3cc5a5e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataOutport&lt; BufferBase &gt;</name>
    <filename>classinviwo_1_1DataOutport.html</filename>
    <base>inviwo::Outport</base>
    <base>inviwo::OutportIterableImpl</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataOutport.html</anchorfile>
      <anchor>ae19dc61ce77a82a5e78ab76fe3cc5a5e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataOutport&lt; container &gt;</name>
    <filename>classinviwo_1_1DataOutport.html</filename>
    <base>inviwo::Outport</base>
    <base>inviwo::OutportIterableImpl</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataOutport.html</anchorfile>
      <anchor>ae19dc61ce77a82a5e78ab76fe3cc5a5e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataOutport&lt; Eigen::MatrixXf &gt;</name>
    <filename>classinviwo_1_1DataOutport.html</filename>
    <base>inviwo::Outport</base>
    <base>inviwo::OutportIterableImpl</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataOutport.html</anchorfile>
      <anchor>ae19dc61ce77a82a5e78ab76fe3cc5a5e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataOutport&lt; Handle &gt;</name>
    <filename>classinviwo_1_1DataOutport.html</filename>
    <base>inviwo::Outport</base>
    <base>inviwo::OutportIterableImpl</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataOutport.html</anchorfile>
      <anchor>ae19dc61ce77a82a5e78ab76fe3cc5a5e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataOutport&lt; Image &gt;</name>
    <filename>classinviwo_1_1DataOutport.html</filename>
    <base>inviwo::Outport</base>
    <base>inviwo::OutportIterableImpl</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataOutport.html</anchorfile>
      <anchor>ae19dc61ce77a82a5e78ab76fe3cc5a5e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataOutport&lt; IntegralLineSet &gt;</name>
    <filename>classinviwo_1_1DataOutport.html</filename>
    <base>inviwo::Outport</base>
    <base>inviwo::OutportIterableImpl</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataOutport.html</anchorfile>
      <anchor>ae19dc61ce77a82a5e78ab76fe3cc5a5e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataOutport&lt; inviwo::LightSource &gt;</name>
    <filename>classinviwo_1_1DataOutport.html</filename>
    <base>inviwo::Outport</base>
    <base>inviwo::OutportIterableImpl</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataOutport.html</anchorfile>
      <anchor>ae19dc61ce77a82a5e78ab76fe3cc5a5e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataOutport&lt; inviwo::Plane &gt;</name>
    <filename>classinviwo_1_1DataOutport.html</filename>
    <base>inviwo::Outport</base>
    <base>inviwo::OutportIterableImpl</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataOutport.html</anchorfile>
      <anchor>ae19dc61ce77a82a5e78ab76fe3cc5a5e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataOutport&lt; inviwo::plot::DataFrame &gt;</name>
    <filename>classinviwo_1_1DataOutport.html</filename>
    <base>inviwo::Outport</base>
    <base>inviwo::OutportIterableImpl</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataOutport.html</anchorfile>
      <anchor>ae19dc61ce77a82a5e78ab76fe3cc5a5e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataOutport&lt; inviwo::Spatial4DSampler&lt; 3, double &gt; &gt;</name>
    <filename>classinviwo_1_1DataOutport.html</filename>
    <base>inviwo::Outport</base>
    <base>inviwo::OutportIterableImpl</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataOutport.html</anchorfile>
      <anchor>ae19dc61ce77a82a5e78ab76fe3cc5a5e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataOutport&lt; inviwo::SpatialSampler&lt; 2, 2, double &gt; &gt;</name>
    <filename>classinviwo_1_1DataOutport.html</filename>
    <base>inviwo::Outport</base>
    <base>inviwo::OutportIterableImpl</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataOutport.html</anchorfile>
      <anchor>ae19dc61ce77a82a5e78ab76fe3cc5a5e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataOutport&lt; inviwo::SpatialSampler&lt; 3, 3, double &gt; &gt;</name>
    <filename>classinviwo_1_1DataOutport.html</filename>
    <base>inviwo::Outport</base>
    <base>inviwo::OutportIterableImpl</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataOutport.html</anchorfile>
      <anchor>ae19dc61ce77a82a5e78ab76fe3cc5a5e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataOutport&lt; Mesh &gt;</name>
    <filename>classinviwo_1_1DataOutport.html</filename>
    <base>inviwo::Outport</base>
    <base>inviwo::OutportIterableImpl</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataOutport.html</anchorfile>
      <anchor>ae19dc61ce77a82a5e78ab76fe3cc5a5e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataOutport&lt; SeedPoint3DVector &gt;</name>
    <filename>classinviwo_1_1DataOutport.html</filename>
    <base>inviwo::Outport</base>
    <base>inviwo::OutportIterableImpl</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataOutport.html</anchorfile>
      <anchor>ae19dc61ce77a82a5e78ab76fe3cc5a5e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataOutport&lt; SeedPoint4DVector &gt;</name>
    <filename>classinviwo_1_1DataOutport.html</filename>
    <base>inviwo::Outport</base>
    <base>inviwo::OutportIterableImpl</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataOutport.html</anchorfile>
      <anchor>ae19dc61ce77a82a5e78ab76fe3cc5a5e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataOutport&lt; std::vector&lt; std::shared_ptr&lt; inviwo::Mesh &gt; &gt; &gt;</name>
    <filename>classinviwo_1_1DataOutport.html</filename>
    <base>inviwo::Outport</base>
    <base>inviwo::OutportIterableImpl</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataOutport.html</anchorfile>
      <anchor>ae19dc61ce77a82a5e78ab76fe3cc5a5e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataOutport&lt; std::vector&lt; vec4 &gt; &gt;</name>
    <filename>classinviwo_1_1DataOutport.html</filename>
    <base>inviwo::Outport</base>
    <base>inviwo::OutportIterableImpl</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataOutport.html</anchorfile>
      <anchor>ae19dc61ce77a82a5e78ab76fe3cc5a5e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataOutport&lt; Volume &gt;</name>
    <filename>classinviwo_1_1DataOutport.html</filename>
    <base>inviwo::Outport</base>
    <base>inviwo::OutportIterableImpl</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataOutport.html</anchorfile>
      <anchor>ae19dc61ce77a82a5e78ab76fe3cc5a5e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataOutport&lt; VolumeSequence &gt;</name>
    <filename>classinviwo_1_1DataOutport.html</filename>
    <base>inviwo::Outport</base>
    <base>inviwo::OutportIterableImpl</base>
    <member kind="function" virtualness="virtual">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1DataOutport.html</anchorfile>
      <anchor>ae19dc61ce77a82a5e78ab76fe3cc5a5e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::DataPoint</name>
    <filename>classinviwo_1_1plot_1_1DataPoint.html</filename>
    <templarg></templarg>
    <base>inviwo::plot::DataPointBase</base>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::DataPointBase</name>
    <filename>classinviwo_1_1plot_1_1DataPointBase.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::DataReader</name>
    <filename>classinviwo_1_1DataReader.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::DataReaderDialog</name>
    <filename>classinviwo_1_1DataReaderDialog.html</filename>
    <base>inviwo::Dialog</base>
  </compound>
  <compound kind="class">
    <name>inviwo::DataReaderException</name>
    <filename>classinviwo_1_1DataReaderException.html</filename>
    <base>inviwo::Exception</base>
  </compound>
  <compound kind="class">
    <name>inviwo::DataReaderFactory</name>
    <filename>classinviwo_1_1DataReaderFactory.html</filename>
    <base>Factory&lt; DataReader, const FileExtension &amp; &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::DataReaderType</name>
    <filename>classinviwo_1_1DataReaderType.html</filename>
    <templarg>T</templarg>
    <base>inviwo::DataReader</base>
  </compound>
  <compound kind="class">
    <name>DataReaderType&lt; Layer &gt;</name>
    <filename>classinviwo_1_1DataReaderType.html</filename>
    <base>inviwo::DataReader</base>
  </compound>
  <compound kind="class">
    <name>DataReaderType&lt; Mesh &gt;</name>
    <filename>classinviwo_1_1DataReaderType.html</filename>
    <base>inviwo::DataReader</base>
  </compound>
  <compound kind="class">
    <name>DataReaderType&lt; plot::DataFrame &gt;</name>
    <filename>classinviwo_1_1DataReaderType.html</filename>
    <base>inviwo::DataReader</base>
  </compound>
  <compound kind="class">
    <name>DataReaderType&lt; std::vector&lt; std::shared_ptr&lt; Volume &gt; &gt; &gt;</name>
    <filename>classinviwo_1_1DataReaderType.html</filename>
    <base>inviwo::DataReader</base>
  </compound>
  <compound kind="class">
    <name>DataReaderType&lt; Volume &gt;</name>
    <filename>classinviwo_1_1DataReaderType.html</filename>
    <base>inviwo::DataReader</base>
  </compound>
  <compound kind="class">
    <name>DataReaderType&lt; VolumeSequence &gt;</name>
    <filename>classinviwo_1_1DataReaderType.html</filename>
    <base>inviwo::DataReader</base>
  </compound>
  <compound kind="class">
    <name>inviwo::DataRepresentation</name>
    <filename>classinviwo_1_1DataRepresentation.html</filename>
    <templarg>Owner</templarg>
  </compound>
  <compound kind="class">
    <name>DataRepresentation&lt; BufferBase &gt;</name>
    <filename>classinviwo_1_1DataRepresentation.html</filename>
  </compound>
  <compound kind="class">
    <name>DataRepresentation&lt; Layer &gt;</name>
    <filename>classinviwo_1_1DataRepresentation.html</filename>
  </compound>
  <compound kind="class">
    <name>DataRepresentation&lt; Volume &gt;</name>
    <filename>classinviwo_1_1DataRepresentation.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::DataSource</name>
    <filename>classinviwo_1_1DataSource.html</filename>
    <templarg>DataType</templarg>
    <templarg>PortType</templarg>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1DataSource.html</anchorfile>
      <anchor>ae84c0bacf05bb456a551a8ed7a406329</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataSource&lt; Mesh, MeshOutport &gt;</name>
    <filename>classinviwo_1_1DataSource.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1DataSource.html</anchorfile>
      <anchor>ae84c0bacf05bb456a551a8ed7a406329</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::DataTraits</name>
    <filename>structinviwo_1_1DataTraits.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>classIdentifier</name>
      <anchorfile>structinviwo_1_1DataTraits.html</anchorfile>
      <anchor>a619872a8cb303560959884fab14dbd89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>dataName</name>
      <anchorfile>structinviwo_1_1DataTraits.html</anchorfile>
      <anchor>a58d104362154067836d0806b354197f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uvec3</type>
      <name>colorCode</name>
      <anchorfile>structinviwo_1_1DataTraits.html</anchorfile>
      <anchor>a6fb92285d07e80f0b487a62d5d71ed36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Document</type>
      <name>info</name>
      <anchorfile>structinviwo_1_1DataTraits.html</anchorfile>
      <anchor>a5415e728f4a6fdb0781445950b8fec23</anchor>
      <arglist>(const T &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::DataTraits&lt; BrushingAndLinkingManager &gt;</name>
    <filename>structinviwo_1_1DataTraits_3_01BrushingAndLinkingManager_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::DataTraits&lt; Eigen::MatrixXf &gt;</name>
    <filename>structinviwo_1_1DataTraits_3_01Eigen_1_1MatrixXf_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::DataTraits&lt; IntegralLineSet &gt;</name>
    <filename>structinviwo_1_1DataTraits_3_01IntegralLineSet_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::DataTraits&lt; plot::DataFrame &gt;</name>
    <filename>structinviwo_1_1DataTraits_3_01plot_1_1DataFrame_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::DataTraits&lt; Spatial4DSampler&lt; DataDims, T &gt; &gt;</name>
    <filename>structinviwo_1_1DataTraits_3_01Spatial4DSampler_3_01DataDims_00_01T_01_4_01_4.html</filename>
    <templarg>DataDims</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::DataTraits&lt; SpatialSampler&lt; SpatialDims, DataDims, T &gt; &gt;</name>
    <filename>structinviwo_1_1DataTraits_3_01SpatialSampler_3_01SpatialDims_00_01DataDims_00_01T_01_4_01_4.html</filename>
    <templarg>SpatialDims</templarg>
    <templarg>DataDims</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::DataTraits&lt; std::vector&lt; std::shared_ptr&lt; T &gt;, A &gt; &gt;</name>
    <filename>structinviwo_1_1DataTraits_3_01std_1_1vector_3_01std_1_1shared__ptr_3_01T_01_4_00_01A_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::DataTraits&lt; std::vector&lt; std::unique_ptr&lt; T, D &gt;, A &gt; &gt;</name>
    <filename>structinviwo_1_1DataTraits_3_01std_1_1vector_3_01std_1_1unique__ptr_3_01T_00_01D_01_4_00_01A_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::DataTraits&lt; std::vector&lt; T *, A &gt; &gt;</name>
    <filename>structinviwo_1_1DataTraits_3_01std_1_1vector_3_01T_01_5_00_01A_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::DataTraits&lt; std::vector&lt; T, A &gt; &gt;</name>
    <filename>structinviwo_1_1DataTraits_3_01std_1_1vector_3_01T_00_01A_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::DataTraits&lt; T, std::enable_if_t&lt; util::HasDataFormat&lt; T &gt;::value &gt; &gt;</name>
    <filename>structinviwo_1_1DataTraits_3_01T_00_01std_1_1enable__if__t_3_01util_1_1HasDataFormat_3_01T_01_4_1_1value_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::DataTypeMismatch</name>
    <filename>classinviwo_1_1plot_1_1DataTypeMismatch.html</filename>
    <base>inviwo::Exception</base>
  </compound>
  <compound kind="class">
    <name>inviwo::DataWriter</name>
    <filename>classinviwo_1_1DataWriter.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::DataWriterException</name>
    <filename>classinviwo_1_1DataWriterException.html</filename>
    <base>inviwo::Exception</base>
  </compound>
  <compound kind="class">
    <name>inviwo::DataWriterFactory</name>
    <filename>classinviwo_1_1DataWriterFactory.html</filename>
    <base>Factory&lt; DataWriter, const FileExtension &amp; &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::DataWriterType</name>
    <filename>classinviwo_1_1DataWriterType.html</filename>
    <templarg>T</templarg>
    <base>inviwo::DataWriter</base>
  </compound>
  <compound kind="class">
    <name>DataWriterType&lt; Layer &gt;</name>
    <filename>classinviwo_1_1DataWriterType.html</filename>
    <base>inviwo::DataWriter</base>
  </compound>
  <compound kind="class">
    <name>DataWriterType&lt; Mesh &gt;</name>
    <filename>classinviwo_1_1DataWriterType.html</filename>
    <base>inviwo::DataWriter</base>
  </compound>
  <compound kind="class">
    <name>DataWriterType&lt; Volume &gt;</name>
    <filename>classinviwo_1_1DataWriterType.html</filename>
    <base>inviwo::DataWriter</base>
  </compound>
  <compound kind="class">
    <name>inviwo::DatVolumeSequenceReader</name>
    <filename>classinviwo_1_1DatVolumeSequenceReader.html</filename>
    <base>DataReaderType&lt; std::vector&lt; std::shared_ptr&lt; Volume &gt; &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::DatVolumeWriter</name>
    <filename>classinviwo_1_1DatVolumeWriter.html</filename>
    <base>DataWriterType&lt; Volume &gt;</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::Defaultvalues</name>
    <filename>structinviwo_1_1Defaultvalues.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::Delay</name>
    <filename>classinviwo_1_1Delay.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::dependent_false</name>
    <filename>structinviwo_1_1utilgl_1_1dependent__false.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::DepthDarkening</name>
    <filename>classinviwo_1_1DepthDarkening.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1DepthDarkening.html</anchorfile>
      <anchor>af6ca2dc9924b72d1561d7d5f08a66301</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::DeserializationErrorHandle</name>
    <filename>classinviwo_1_1DeserializationErrorHandle.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::Deserializer</name>
    <filename>classinviwo_1_1Deserializer.html</filename>
    <base>inviwo::SerializeBase</base>
    <member kind="function">
      <type></type>
      <name>Deserializer</name>
      <anchorfile>classinviwo_1_1Deserializer.html</anchorfile>
      <anchor>a4982043878f2096e9087248c6ae7d233</anchor>
      <arglist>(std::string fileName, bool allowReference=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Deserializer</name>
      <anchorfile>classinviwo_1_1Deserializer.html</anchorfile>
      <anchor>aa6078a255ad55551d7d290079fbe9a15</anchor>
      <arglist>(std::istream &amp;stream, const std::string &amp;refPath, bool allowReference=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserialize</name>
      <anchorfile>classinviwo_1_1Deserializer.html</anchorfile>
      <anchor>ab39c6b820f896efecb508c89780ae134</anchor>
      <arglist>(const std::string &amp;key, std::vector&lt; T * &gt; &amp;sVector, const std::string &amp;itemKey=&quot;item&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserialize</name>
      <anchorfile>classinviwo_1_1Deserializer.html</anchorfile>
      <anchor>a408e7f21aae10ccd6dd8243a69086b94</anchor>
      <arglist>(const std::string &amp;key, std::map&lt; K, V, C, A &gt; &amp;sMap, const std::string &amp;itemKey=&quot;item&quot;, const std::string &amp;comparisionAttribute=SerializeConstants::KeyAttribute)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserialize</name>
      <anchorfile>classinviwo_1_1Deserializer.html</anchorfile>
      <anchor>a207bc621269abd5beb72db1ffaf09771</anchor>
      <arglist>(const std::string &amp;key, Serializable &amp;sObj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserialize</name>
      <anchorfile>classinviwo_1_1Deserializer.html</anchorfile>
      <anchor>a1b4a175a05e2fca40cce21bf61d1589d</anchor>
      <arglist>(const std::string &amp;key, T *&amp;data)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getRegisteredType</name>
      <anchorfile>classinviwo_1_1Deserializer.html</anchorfile>
      <anchor>a8a2221125708f1dcf729cc6305782f6b</anchor>
      <arglist>(const std::string &amp;className)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getNonRegisteredType</name>
      <anchorfile>classinviwo_1_1Deserializer.html</anchorfile>
      <anchor>ab91ea1b30c11cd38abd34e65bdcb774c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::Dialog</name>
    <filename>classinviwo_1_1Dialog.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::DialogConnectionGraphicsItem</name>
    <filename>classinviwo_1_1DialogConnectionGraphicsItem.html</filename>
    <base>inviwo::DialogCurveGraphicsItem</base>
  </compound>
  <compound kind="class">
    <name>inviwo::DialogCurveGraphicsItem</name>
    <filename>classinviwo_1_1DialogCurveGraphicsItem.html</filename>
    <base>inviwo::CurveGraphicsItem</base>
  </compound>
  <compound kind="class">
    <name>inviwo::DialogFactory</name>
    <filename>classinviwo_1_1DialogFactory.html</filename>
    <base>StandardFactory&lt; Dialog, DialogFactoryObject &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::DialogFactoryObject</name>
    <filename>classinviwo_1_1DialogFactoryObject.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::DialogFactoryObjectTemplate</name>
    <filename>classinviwo_1_1DialogFactoryObjectTemplate.html</filename>
    <templarg></templarg>
    <base>inviwo::DialogFactoryObject</base>
  </compound>
  <compound kind="class">
    <name>inviwo::DiffuseLight</name>
    <filename>classinviwo_1_1DiffuseLight.html</filename>
    <base>inviwo::LightSource</base>
    <member kind="function" virtualness="virtual">
      <type>virtual vec3</type>
      <name>getPower</name>
      <anchorfile>classinviwo_1_1DiffuseLight.html</anchorfile>
      <anchor>ace3fe186148a0e04df491a851d83e921</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const vec3 &amp;</type>
      <name>getNormal</name>
      <anchorfile>classinviwo_1_1DiffuseLight.html</anchorfile>
      <anchor>a048771a26cf6b116f832dfc2a6c38e1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNormal</name>
      <anchorfile>classinviwo_1_1DiffuseLight.html</anchorfile>
      <anchor>aa3b781683303758ad4084637ad27af90</anchor>
      <arglist>(const vec3 &amp;normal)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::DiffuseLightSourceProcessor</name>
    <filename>classinviwo_1_1DiffuseLightSourceProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1DiffuseLightSourceProcessor.html</anchorfile>
      <anchor>abac4d008686021ffaaf63c052513ccd5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateLightSource</name>
      <anchorfile>classinviwo_1_1DiffuseLightSourceProcessor.html</anchorfile>
      <anchor>a32a680b7862412016e57c77259d4ba66</anchor>
      <arglist>(DiffuseLight *lightSource)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::DirectionalLight</name>
    <filename>classinviwo_1_1DirectionalLight.html</filename>
    <base>inviwo::LightSource</base>
    <member kind="function" virtualness="virtual">
      <type>virtual vec3</type>
      <name>getPower</name>
      <anchorfile>classinviwo_1_1DirectionalLight.html</anchorfile>
      <anchor>aeb060df62c35919054b974db90483c9d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const vec3 &amp;</type>
      <name>getDirection</name>
      <anchorfile>classinviwo_1_1DirectionalLight.html</anchorfile>
      <anchor>a1f4d1c4b3602e3d3bec73dcfa80576b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirection</name>
      <anchorfile>classinviwo_1_1DirectionalLight.html</anchorfile>
      <anchor>a709767d53c212461f1cf781b7283eb0a</anchor>
      <arglist>(const vec3 &amp;direction)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::DirectionalLightSourceProcessor</name>
    <filename>classinviwo_1_1DirectionalLightSourceProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1DirectionalLightSourceProcessor.html</anchorfile>
      <anchor>a0a324b612015285b7d177a0948178d2b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDirectionalLightSource</name>
      <anchorfile>classinviwo_1_1DirectionalLightSourceProcessor.html</anchorfile>
      <anchor>a9905e2a74b30a6de7f14ae7d948d5b1e</anchor>
      <arglist>(DirectionalLight *lightSource)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::DirectoryProperty</name>
    <filename>classinviwo_1_1DirectoryProperty.html</filename>
    <base>inviwo::FileProperty</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1DirectoryProperty.html</anchorfile>
      <anchor>ac18694e914cf2a0691f183ec07f24999</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::DiscardShortLines</name>
    <filename>classinviwo_1_1DiscardShortLines.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1DiscardShortLines.html</anchorfile>
      <anchor>a7cef546816896f335cba087ed2e8fcb8</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::DisjointSets</name>
    <filename>classinviwo_1_1DisjointSets.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DisjointSets</name>
      <anchorfile>classinviwo_1_1DisjointSets.html</anchorfile>
      <anchor>a520928b8231cf4b99ace513236b6482a</anchor>
      <arglist>(T size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>join</name>
      <anchorfile>classinviwo_1_1DisjointSets.html</anchorfile>
      <anchor>a2b80da19f84d4c0f9268927ceb64b7b9</anchor>
      <arglist>(T r, T s)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>classinviwo_1_1DisjointSets.html</anchorfile>
      <anchor>a660b4e4957fa5f296d7604b164bc4472</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cardinality</name>
      <anchorfile>classinviwo_1_1DisjointSets.html</anchorfile>
      <anchor>a9ca63b077b322664d8cb8835ee4a4caa</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classinviwo_1_1DisjointSets.html</anchorfile>
      <anchor>ac468619de7b7763dd33e0c6b47d01428</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::kind::Disk</name>
    <filename>structinviwo_1_1kind_1_1Disk.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::SystemCapabilities::DiskInfo</name>
    <filename>structinviwo_1_1SystemCapabilities_1_1DiskInfo.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::DiskRepresentation</name>
    <filename>classinviwo_1_1DiskRepresentation.html</filename>
    <templarg>Repr</templarg>
  </compound>
  <compound kind="class">
    <name>DiskRepresentation&lt; LayerRepresentation &gt;</name>
    <filename>classinviwo_1_1DiskRepresentation.html</filename>
  </compound>
  <compound kind="class">
    <name>DiskRepresentation&lt; VolumeRepresentation &gt;</name>
    <filename>classinviwo_1_1DiskRepresentation.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::DiskRepresentationLoader</name>
    <filename>classinviwo_1_1DiskRepresentationLoader.html</filename>
    <templarg>Repr</templarg>
  </compound>
  <compound kind="class">
    <name>DiskRepresentationLoader&lt; LayerRepresentation &gt;</name>
    <filename>classinviwo_1_1DiskRepresentationLoader.html</filename>
  </compound>
  <compound kind="class">
    <name>DiskRepresentationLoader&lt; VolumeRepresentation &gt;</name>
    <filename>classinviwo_1_1DiskRepresentationLoader.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::Dispatcher</name>
    <filename>classinviwo_1_1Dispatcher.html</filename>
    <templarg>C</templarg>
  </compound>
  <compound kind="class">
    <name>Dispatcher&lt; void()&gt;</name>
    <filename>classinviwo_1_1Dispatcher.html</filename>
  </compound>
  <compound kind="class">
    <name>Dispatcher&lt; void(const inviwo::ShaderResource *)&gt;</name>
    <filename>classinviwo_1_1Dispatcher.html</filename>
  </compound>
  <compound kind="class">
    <name>Dispatcher&lt; void(Deserializer &amp;, const ExceptionHandler &amp;)&gt;</name>
    <filename>classinviwo_1_1Dispatcher.html</filename>
  </compound>
  <compound kind="class">
    <name>Dispatcher&lt; void(GLuint)&gt;</name>
    <filename>classinviwo_1_1Dispatcher.html</filename>
  </compound>
  <compound kind="class">
    <name>Dispatcher&lt; void(inviwo::ShaderObject *)&gt;</name>
    <filename>classinviwo_1_1Dispatcher.html</filename>
  </compound>
  <compound kind="class">
    <name>Dispatcher&lt; void(Serializer &amp;, const ExceptionHandler &amp;)&gt;</name>
    <filename>classinviwo_1_1Dispatcher.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::dispatching::DispatchException</name>
    <filename>classinviwo_1_1dispatching_1_1DispatchException.html</filename>
    <base>inviwo::Exception</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::dispatching::detail::DispatchHelper</name>
    <filename>structinviwo_1_1dispatching_1_1detail_1_1DispatchHelper.html</filename>
    <templarg></templarg>
    <templarg>B</templarg>
    <templarg>E</templarg>
    <templarg>Args</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::dispatching::detail::DispatchHelper&lt; Result, B, E, std::tuple&lt; Formats... &gt; &gt;</name>
    <filename>structinviwo_1_1dispatching_1_1detail_1_1DispatchHelper_3_01Result_00_01B_00_01E_00_01std_1_1tuple_3_01Formats_8_8_8_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>B</templarg>
    <templarg>E</templarg>
    <templarg>Formats</templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::DistanceTransformRAM</name>
    <filename>classinviwo_1_1DistanceTransformRAM.html</filename>
    <base>inviwo::Processor</base>
    <base>inviwo::ProgressBarOwner</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>classinviwo_1_1DistanceTransformRAM.html</anchorfile>
      <anchor>ab92aa89cbc3e5c432680caf57dc7a7e7</anchor>
      <arglist>(InvalidationLevel invalidationLevel, Property *source=nullptr) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1DistanceTransformRAM.html</anchorfile>
      <anchor>a5936322091d7a50c42ba6326d75ff2ab</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::Document</name>
    <filename>classinviwo_1_1Document.html</filename>
    <class kind="class">inviwo::Document::DocumentHandle</class>
    <class kind="class">inviwo::Document::Element</class>
    <class kind="class">inviwo::Document::PathComponent</class>
  </compound>
  <compound kind="class">
    <name>inviwo::Document::DocumentHandle</name>
    <filename>classinviwo_1_1Document_1_1DocumentHandle.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::DrawLines</name>
    <filename>classinviwo_1_1DrawLines.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1DrawLines.html</anchorfile>
      <anchor>abd423dc9d6adb07b0f8b47fb635d13d8</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::MeshDrawerGL::DrawObject</name>
    <filename>classinviwo_1_1MeshDrawerGL_1_1DrawObject.html</filename>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classinviwo_1_1MeshDrawerGL_1_1DrawObject.html</anchorfile>
      <anchor>af2ef01c49f739401fdec4984fa975465</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::DrawPoints</name>
    <filename>classinviwo_1_1DrawPoints.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1DrawPoints.html</anchorfile>
      <anchor>a15ceb28279128f481c56d69fe8c422e6</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::Easing</name>
    <filename>classinviwo_1_1animation_1_1Easing.html</filename>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>Ease</name>
      <anchorfile>classinviwo_1_1animation_1_1Easing.html</anchorfile>
      <anchor>a4352e49bf964dcb2ab813e296029e605</anchor>
      <arglist>(const double t, EEasingType HowToEase)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::Edge</name>
    <filename>classinviwo_1_1Edge.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::EdgeDataFormat</name>
    <filename>classinviwo_1_1EdgeDataFormat.html</filename>
    <templarg></templarg>
    <base>inviwo::Edge</base>
  </compound>
  <compound kind="class">
    <name>inviwo::EditableLabelQt</name>
    <filename>classinviwo_1_1EditableLabelQt.html</filename>
    <base>inviwo::PropertyObserver</base>
  </compound>
  <compound kind="class">
    <name>inviwo::EditorGraphicsItem</name>
    <filename>classinviwo_1_1EditorGraphicsItem.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::EigenMatrixToImage</name>
    <filename>classinviwo_1_1EigenMatrixToImage.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1EigenMatrixToImage.html</anchorfile>
      <anchor>a9360ee2fbeae7e5d62b6706f4827db15</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::EigenMix</name>
    <filename>classinviwo_1_1EigenMix.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1EigenMix.html</anchorfile>
      <anchor>a754cfd4dfc22741e6d0208b7a0912d83</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::EigenNormalize</name>
    <filename>classinviwo_1_1EigenNormalize.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1EigenNormalize.html</anchorfile>
      <anchor>ad914fc5bc26172b1c0ca519509064074</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::EigenUtilsModule</name>
    <filename>classinviwo_1_1EigenUtilsModule.html</filename>
    <base>inviwo::InviwoModule</base>
  </compound>
  <compound kind="class">
    <name>inviwo::Document::Element</name>
    <filename>classinviwo_1_1Document_1_1Element.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::glui::Element</name>
    <filename>classinviwo_1_1glui_1_1Element.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setWidgetExtent</name>
      <anchorfile>classinviwo_1_1glui_1_1Element.html</anchorfile>
      <anchor>ab7e02a321edd87c7ad7c50e787b9f5dd</anchor>
      <arglist>(const ivec2 &amp;extent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidgetExtentScaled</name>
      <anchorfile>classinviwo_1_1glui_1_1Element.html</anchorfile>
      <anchor>acb5ae46d152a68cb5a05b1817188d3ba</anchor>
      <arglist>(const ivec2 &amp;extent)</arglist>
    </member>
    <member kind="function">
      <type>ivec2</type>
      <name>getWidgetExtentScaled</name>
      <anchorfile>classinviwo_1_1glui_1_1Element.html</anchorfile>
      <anchor>af9d3dfaebfaed9d64f7e9ca57b24d5a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ivec2 &amp;</type>
      <name>getExtent</name>
      <anchorfile>classinviwo_1_1glui_1_1Element.html</anchorfile>
      <anchor>ab27770667f5d439b89e30a276006e225</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classinviwo_1_1glui_1_1Element.html</anchorfile>
      <anchor>ac2479215d9d643b574c2d60082b4165e</anchor>
      <arglist>(const ivec2 &amp;origin, const size2_t &amp;canvasDim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAction</name>
      <anchorfile>classinviwo_1_1glui_1_1Element.html</anchorfile>
      <anchor>ad19adebef9bf49f6c23e24de11f4f52b</anchor>
      <arglist>(const std::function&lt; void()&gt; &amp;action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>triggerAction</name>
      <anchorfile>classinviwo_1_1glui_1_1Element.html</anchorfile>
      <anchor>a8e02d83395898ee8f9c561463b1250ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseMoveAction</name>
      <anchorfile>classinviwo_1_1glui_1_1Element.html</anchorfile>
      <anchor>a688bec10c5bbf4313b99eb327c6b384b</anchor>
      <arglist>(const std::function&lt; bool(const dvec2 &amp;)&gt; &amp;action)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveAction</name>
      <anchorfile>classinviwo_1_1glui_1_1Element.html</anchorfile>
      <anchor>aba8a9e2319cffa85f97f4ba04a6fe5d2</anchor>
      <arglist>(const dvec2 &amp;delta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateState</name>
      <anchorfile>classinviwo_1_1glui_1_1Element.html</anchorfile>
      <anchor>a6d2fc67612baecf4593f98695b015fa6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>pushStateChanged</name>
      <anchorfile>classinviwo_1_1glui_1_1Element.html</anchorfile>
      <anchor>a56778e9ee37c361f593b86ad91ccf2a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TextRenderer &amp;</type>
      <name>getCurrentTextRenderer</name>
      <anchorfile>classinviwo_1_1glui_1_1Element.html</anchorfile>
      <anchor>a48668a109bcd3b8d63418dd3ce8ada76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::function&lt; bool(const dvec2 &amp;)&gt;</type>
      <name>moveAction_</name>
      <anchorfile>classinviwo_1_1glui_1_1Element.html</anchorfile>
      <anchor>a703bc66d1e86bdadb312f845a782fd26</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>glui::Element</name>
    <filename>classglui_1_1Element.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::ElementIdentifier</name>
    <filename>structinviwo_1_1ElementIdentifier.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::xml::ElementMatcher</name>
    <filename>structinviwo_1_1xml_1_1ElementMatcher.html</filename>
    <class kind="struct">inviwo::xml::ElementMatcher::Attribute</class>
  </compound>
  <compound kind="struct">
    <name>inviwo::detail::empty_constructor</name>
    <filename>structinviwo_1_1detail_1_1empty__constructor.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::Enable</name>
    <filename>structinviwo_1_1utilgl_1_1Enable.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>Enable&lt; inviwo::MeshGL &gt;</name>
    <filename>structinviwo_1_1utilgl_1_1Enable.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::EntryExitPoints</name>
    <filename>classinviwo_1_1EntryExitPoints.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1EntryExitPoints.html</anchorfile>
      <anchor>aab83df42c643e0bf19864154b8e93cc7</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::EntryExitPointsCLProcessor</name>
    <filename>classinviwo_1_1EntryExitPointsCLProcessor.html</filename>
    <base>inviwo::Processor</base>
    <base>inviwo::KernelObserver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1EntryExitPointsCLProcessor.html</anchorfile>
      <anchor>a5463f0f49f65580a98777a61bfbe035d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>onKernelCompiled</name>
      <anchorfile>classinviwo_1_1EntryExitPointsCLProcessor.html</anchorfile>
      <anchor>adade7f49ab134354ac5da66b801d88b4</anchor>
      <arglist>(const cl::Kernel *) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::algorithm::EntryExitPointsHelper</name>
    <filename>classinviwo_1_1algorithm_1_1EntryExitPointsHelper.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classinviwo_1_1algorithm_1_1EntryExitPointsHelper.html</anchorfile>
      <anchor>a58cc7bfb2fdbca1b1a5744dfee70a58b</anchor>
      <arglist>(Image &amp;entryPoints, Image &amp;exitPoints, const Camera &amp;camera, const Mesh &amp;mesh, bool capNearClip)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::equalPtr</name>
    <filename>structinviwo_1_1equalPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::Event</name>
    <filename>classinviwo_1_1Event.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>shouldPropagateTo</name>
      <anchorfile>classinviwo_1_1Event.html</anchorfile>
      <anchor>a5a61c547023007e1068008907096a6e9</anchor>
      <arglist>(Inport *inport, Processor *processor, Outport *source)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::EventHandler</name>
    <filename>classinviwo_1_1EventHandler.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::EventListener</name>
    <filename>classinviwo_1_1EventListener.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::EventMatcher</name>
    <filename>classinviwo_1_1EventMatcher.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>inviwo::EventPropagator</name>
    <filename>classinviwo_1_1EventPropagator.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::EventProperty</name>
    <filename>classinviwo_1_1EventProperty.html</filename>
    <base>inviwo::Property</base>
    <member kind="function">
      <type></type>
      <name>EventProperty</name>
      <anchorfile>classinviwo_1_1EventProperty.html</anchorfile>
      <anchor>aa74bd4ef1494c0b5d6609eaea4e3bdec</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, Action action, std::unique_ptr&lt; EventMatcher &gt; matcher, InvalidationLevel invalidationLevel=InvalidationLevel::InvalidOutput, PropertySemantics semantics=PropertySemantics::Default)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1EventProperty.html</anchorfile>
      <anchor>a7315c00d92094e5550398d4165da21da</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1EventProperty.html</anchorfile>
      <anchor>ae641b9058bb58fbd86eb334c3244b440</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::EventPropertyWidgetQt</name>
    <filename>classinviwo_1_1EventPropertyWidgetQt.html</filename>
    <base>inviwo::PropertyWidgetQt</base>
    <member kind="function">
      <type>void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1EventPropertyWidgetQt.html</anchorfile>
      <anchor>a344c2d307dba37e1226f5ea5af608ffc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::Exception</name>
    <filename>classinviwo_1_1Exception.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::hdf5::Exception</name>
    <filename>classinviwo_1_1hdf5_1_1Exception.html</filename>
    <base>inviwo::Exception</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::ExceptionContext</name>
    <filename>structinviwo_1_1ExceptionContext.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::extent</name>
    <filename>structinviwo_1_1util_1_1extent.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::extent&lt; const T, N &gt;</name>
    <filename>structinviwo_1_1util_1_1extent_3_01const_01T_00_01N_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <base>inviwo::util::extent</base>
  </compound>
  <compound kind="class">
    <name>inviwo::Factory</name>
    <filename>classinviwo_1_1Factory.html</filename>
    <templarg>T</templarg>
    <templarg>K</templarg>
    <templarg>Args</templarg>
    <base virtualness="virtual">inviwo::FactoryBase</base>
  </compound>
  <compound kind="class">
    <name>Factory&lt; Camera, const std::string &amp;, Args... &gt;</name>
    <filename>classinviwo_1_1Factory.html</filename>
    <base virtualness="virtual">inviwo::FactoryBase</base>
  </compound>
  <compound kind="class">
    <name>Factory&lt; DataReader, const FileExtension &amp; &gt;</name>
    <filename>classinviwo_1_1Factory.html</filename>
    <base virtualness="virtual">inviwo::FactoryBase</base>
  </compound>
  <compound kind="class">
    <name>Factory&lt; DataWriter, const FileExtension &amp; &gt;</name>
    <filename>classinviwo_1_1Factory.html</filename>
    <base virtualness="virtual">inviwo::FactoryBase</base>
  </compound>
  <compound kind="class">
    <name>Factory&lt; Dialog, const std::string &amp;, Args... &gt;</name>
    <filename>classinviwo_1_1Factory.html</filename>
    <base virtualness="virtual">inviwo::FactoryBase</base>
  </compound>
  <compound kind="class">
    <name>Factory&lt; Inport, const std::string &amp;, Args... &gt;</name>
    <filename>classinviwo_1_1Factory.html</filename>
    <base virtualness="virtual">inviwo::FactoryBase</base>
  </compound>
  <compound kind="class">
    <name>Factory&lt; Inport, const std::string &amp;, const std::string &amp; &gt;</name>
    <filename>classinviwo_1_1Factory.html</filename>
    <base virtualness="virtual">inviwo::FactoryBase</base>
  </compound>
  <compound kind="class">
    <name>Factory&lt; Interpolation, const std::string &amp;, Args... &gt;</name>
    <filename>classinviwo_1_1Factory.html</filename>
    <base virtualness="virtual">inviwo::FactoryBase</base>
  </compound>
  <compound kind="class">
    <name>Factory&lt; MeshDrawer, const Mesh * &gt;</name>
    <filename>classinviwo_1_1Factory.html</filename>
    <base virtualness="virtual">inviwo::FactoryBase</base>
  </compound>
  <compound kind="class">
    <name>Factory&lt; MetaData, const std::string &amp; &gt;</name>
    <filename>classinviwo_1_1Factory.html</filename>
    <base virtualness="virtual">inviwo::FactoryBase</base>
  </compound>
  <compound kind="class">
    <name>Factory&lt; Outport, const std::string &amp;, Args... &gt;</name>
    <filename>classinviwo_1_1Factory.html</filename>
    <base virtualness="virtual">inviwo::FactoryBase</base>
  </compound>
  <compound kind="class">
    <name>Factory&lt; Outport, const std::string &amp;, const std::string &amp; &gt;</name>
    <filename>classinviwo_1_1Factory.html</filename>
    <base virtualness="virtual">inviwo::FactoryBase</base>
  </compound>
  <compound kind="class">
    <name>Factory&lt; PortInspector, const std::string &amp;, Args... &gt;</name>
    <filename>classinviwo_1_1Factory.html</filename>
    <base virtualness="virtual">inviwo::FactoryBase</base>
  </compound>
  <compound kind="class">
    <name>Factory&lt; Processor &gt;</name>
    <filename>classinviwo_1_1Factory.html</filename>
    <base virtualness="virtual">inviwo::FactoryBase</base>
  </compound>
  <compound kind="class">
    <name>Factory&lt; Processor, const std::string &amp;, Args... &gt;</name>
    <filename>classinviwo_1_1Factory.html</filename>
    <base virtualness="virtual">inviwo::FactoryBase</base>
  </compound>
  <compound kind="class">
    <name>Factory&lt; ProcessorWidget, const std::string &amp;, Processor * &gt;</name>
    <filename>classinviwo_1_1Factory.html</filename>
    <base virtualness="virtual">inviwo::FactoryBase</base>
  </compound>
  <compound kind="class">
    <name>Factory&lt; Property, const std::string &amp; &gt;</name>
    <filename>classinviwo_1_1Factory.html</filename>
    <base virtualness="virtual">inviwo::FactoryBase</base>
  </compound>
  <compound kind="class">
    <name>Factory&lt; Property, const std::string &amp;, Args... &gt;</name>
    <filename>classinviwo_1_1Factory.html</filename>
    <base virtualness="virtual">inviwo::FactoryBase</base>
  </compound>
  <compound kind="class">
    <name>Factory&lt; PropertyWidget, Property * &gt;</name>
    <filename>classinviwo_1_1Factory.html</filename>
    <base virtualness="virtual">inviwo::FactoryBase</base>
  </compound>
  <compound kind="class">
    <name>Factory&lt; T, K &gt;</name>
    <filename>classinviwo_1_1Factory.html</filename>
    <base virtualness="virtual">inviwo::FactoryBase</base>
  </compound>
  <compound kind="class">
    <name>Factory&lt; T, K, Args... &gt;</name>
    <filename>classinviwo_1_1Factory.html</filename>
    <base virtualness="virtual">inviwo::FactoryBase</base>
  </compound>
  <compound kind="class">
    <name>Factory&lt; Track, const std::string &amp;, Args... &gt;</name>
    <filename>classinviwo_1_1Factory.html</filename>
    <base virtualness="virtual">inviwo::FactoryBase</base>
  </compound>
  <compound kind="class">
    <name>inviwo::FactoryBase</name>
    <filename>classinviwo_1_1FactoryBase.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::FactoryObservable</name>
    <filename>classinviwo_1_1FactoryObservable.html</filename>
    <templarg>T</templarg>
    <base>Observable&lt; FactoryObserver&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>FactoryObservable&lt; CameraFactoryObject &gt;</name>
    <filename>classinviwo_1_1FactoryObservable.html</filename>
    <base>Observable&lt; FactoryObserver&lt; CameraFactoryObject &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>FactoryObservable&lt; DialogFactoryObject &gt;</name>
    <filename>classinviwo_1_1FactoryObservable.html</filename>
    <base>Observable&lt; FactoryObserver&lt; DialogFactoryObject &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>FactoryObservable&lt; InportFactoryObject &gt;</name>
    <filename>classinviwo_1_1FactoryObservable.html</filename>
    <base>Observable&lt; FactoryObserver&lt; InportFactoryObject &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>FactoryObservable&lt; InterpolationFactoryObject &gt;</name>
    <filename>classinviwo_1_1FactoryObservable.html</filename>
    <base>Observable&lt; FactoryObserver&lt; InterpolationFactoryObject &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>FactoryObservable&lt; M &gt;</name>
    <filename>classinviwo_1_1FactoryObservable.html</filename>
    <base>Observable&lt; FactoryObserver&lt; M &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>FactoryObservable&lt; OutportFactoryObject &gt;</name>
    <filename>classinviwo_1_1FactoryObservable.html</filename>
    <base>Observable&lt; FactoryObserver&lt; OutportFactoryObject &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>FactoryObservable&lt; PortInspectorFactoryObject &gt;</name>
    <filename>classinviwo_1_1FactoryObservable.html</filename>
    <base>Observable&lt; FactoryObserver&lt; PortInspectorFactoryObject &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>FactoryObservable&lt; ProcessorFactoryObject &gt;</name>
    <filename>classinviwo_1_1FactoryObservable.html</filename>
    <base>Observable&lt; FactoryObserver&lt; ProcessorFactoryObject &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>FactoryObservable&lt; PropertyFactoryObject &gt;</name>
    <filename>classinviwo_1_1FactoryObservable.html</filename>
    <base>Observable&lt; FactoryObserver&lt; PropertyFactoryObject &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>FactoryObservable&lt; TrackFactoryObject &gt;</name>
    <filename>classinviwo_1_1FactoryObservable.html</filename>
    <base>Observable&lt; FactoryObserver&lt; TrackFactoryObject &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::FactoryObserver</name>
    <filename>classinviwo_1_1FactoryObserver.html</filename>
    <templarg>T</templarg>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>FactoryObserver&lt; CameraFactoryObject &gt;</name>
    <filename>classinviwo_1_1FactoryObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>FactoryObserver&lt; DialogFactoryObject &gt;</name>
    <filename>classinviwo_1_1FactoryObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>FactoryObserver&lt; InportFactoryObject &gt;</name>
    <filename>classinviwo_1_1FactoryObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>FactoryObserver&lt; InterpolationFactoryObject &gt;</name>
    <filename>classinviwo_1_1FactoryObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>FactoryObserver&lt; M &gt;</name>
    <filename>classinviwo_1_1FactoryObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>FactoryObserver&lt; OutportFactoryObject &gt;</name>
    <filename>classinviwo_1_1FactoryObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>FactoryObserver&lt; PortInspectorFactoryObject &gt;</name>
    <filename>classinviwo_1_1FactoryObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>FactoryObserver&lt; ProcessorFactoryObject &gt;</name>
    <filename>classinviwo_1_1FactoryObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>FactoryObserver&lt; PropertyFactoryObject &gt;</name>
    <filename>classinviwo_1_1FactoryObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>FactoryObserver&lt; TrackFactoryObject &gt;</name>
    <filename>classinviwo_1_1FactoryObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>inviwo::FileDialog</name>
    <filename>classinviwo_1_1FileDialog.html</filename>
    <base>inviwo::Dialog</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCurrentFile</name>
      <anchorfile>classinviwo_1_1FileDialog.html</anchorfile>
      <anchor>a7272326a8f6f813057b64d7863be9fd9</anchor>
      <arglist>(const std::string &amp;filename)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCurrentDirectory</name>
      <anchorfile>classinviwo_1_1FileDialog.html</anchorfile>
      <anchor>a3c9ca67135c3437eaac3e3f9403870fc</anchor>
      <arglist>(const std::string &amp;path)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::FileException</name>
    <filename>classinviwo_1_1FileException.html</filename>
    <base>inviwo::Exception</base>
  </compound>
  <compound kind="class">
    <name>inviwo::FileExtension</name>
    <filename>classinviwo_1_1FileExtension.html</filename>
    <base>inviwo::Serializable</base>
    <member kind="function" static="yes">
      <type>static FileExtension</type>
      <name>createFileExtensionFromString</name>
      <anchorfile>classinviwo_1_1FileExtension.html</anchorfile>
      <anchor>a22d53034e0efca1c29a9a950a4272e62</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>extension_</name>
      <anchorfile>classinviwo_1_1FileExtension.html</anchorfile>
      <anchor>a3efef694f9b7e49d003f0f1e86bcd5db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::FileLogger</name>
    <filename>classinviwo_1_1FileLogger.html</filename>
    <base>inviwo::Logger</base>
  </compound>
  <compound kind="class">
    <name>inviwo::FileObserver</name>
    <filename>classinviwo_1_1FileObserver.html</filename>
    <member kind="function">
      <type></type>
      <name>FileObserver</name>
      <anchorfile>classinviwo_1_1FileObserver.html</anchorfile>
      <anchor>aaf72a9b3a417c62aecc3fd67322dac17</anchor>
      <arglist>(InviwoApplication *app)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileObserver</name>
      <anchorfile>classinviwo_1_1FileObserver.html</anchorfile>
      <anchor>a9c59824b1a32f69da10da736743beebc</anchor>
      <arglist>(const std::string &amp;filePath=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileObserver</name>
      <anchorfile>classinviwo_1_1FileObserver.html</anchorfile>
      <anchor>a9e300cede2e4250ba921c16eb0732666</anchor>
      <arglist>(FileObserver &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FileObserver</name>
      <anchorfile>classinviwo_1_1FileObserver.html</anchorfile>
      <anchor>a578f8003733e31eadc05a8bd975be7b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>startFileObservation</name>
      <anchorfile>classinviwo_1_1FileObserver.html</anchorfile>
      <anchor>a124f37084779d9e0d3b5440177f9b4e8</anchor>
      <arglist>(const std::string &amp;filePath)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stopFileObservation</name>
      <anchorfile>classinviwo_1_1FileObserver.html</anchorfile>
      <anchor>ac5248df809b34700de1b6582be566c73</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopAllObservation</name>
      <anchorfile>classinviwo_1_1FileObserver.html</anchorfile>
      <anchor>a3137e1309e9aef2ae5049ed73660b6f3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::FilePathLineEditQt</name>
    <filename>classinviwo_1_1FilePathLineEditQt.html</filename>
    <base>inviwo::LineEditQt</base>
  </compound>
  <compound kind="class">
    <name>inviwo::FilePatternProperty</name>
    <filename>classinviwo_1_1FilePatternProperty.html</filename>
    <base>inviwo::CompositeProperty</base>
  </compound>
  <compound kind="class">
    <name>inviwo::FileProperty</name>
    <filename>classinviwo_1_1FileProperty.html</filename>
    <base>TemplateProperty&lt; std::string &gt;</base>
    <member kind="function">
      <type></type>
      <name>FileProperty</name>
      <anchorfile>classinviwo_1_1FileProperty.html</anchorfile>
      <anchor>a95162c4935812e65ad96b68dd769b11b</anchor>
      <arglist>(std::string identifier, std::string displayName, std::string value=&quot;&quot;, std::string contentType=&quot;default&quot;, InvalidationLevel invalidationLevel=InvalidationLevel::InvalidOutput, PropertySemantics semantics=PropertySemantics::Default)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>requestFile</name>
      <anchorfile>classinviwo_1_1FileProperty.html</anchorfile>
      <anchor>ac3be1dcd258532c7a6d14cb2a1292bb9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::FilePropertyWidgetQt</name>
    <filename>classinviwo_1_1FilePropertyWidgetQt.html</filename>
    <base>inviwo::PropertyWidgetQt</base>
    <base>inviwo::FileRequestable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1FilePropertyWidgetQt.html</anchorfile>
      <anchor>aea67c11d590efd4d7c4abd0a84bb43fd</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>requestFile</name>
      <anchorfile>classinviwo_1_1FilePropertyWidgetQt.html</anchorfile>
      <anchor>adfff50cb1ae8bd31e1932b1faf7f7218</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::FileRequestable</name>
    <filename>classinviwo_1_1FileRequestable.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>requestFile</name>
      <anchorfile>classinviwo_1_1FileRequestable.html</anchorfile>
      <anchor>af062ba327584cbeb8c22abfcddde8141</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::FileShaderResource</name>
    <filename>classinviwo_1_1FileShaderResource.html</filename>
    <base>inviwo::ShaderResource</base>
    <base>inviwo::FileObserver</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::dispatching::detail::Filter</name>
    <filename>structinviwo_1_1dispatching_1_1detail_1_1Filter.html</filename>
    <templarg>Predicate</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::dispatching::detail::Filter&lt; Predicate &gt;</name>
    <filename>structinviwo_1_1dispatching_1_1detail_1_1Filter_3_01Predicate_01_4.html</filename>
    <templarg>Predicate</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::dispatching::detail::Filter&lt; Predicate, Head, Tail... &gt;</name>
    <filename>structinviwo_1_1dispatching_1_1detail_1_1Filter_3_01Predicate_00_01Head_00_01Tail_8_8_8_01_4.html</filename>
    <templarg>Predicate</templarg>
    <templarg></templarg>
    <templarg>Tail</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::dispatching::detail::Filter&lt; Predicate, std::tuple&lt; Args... &gt; &gt;</name>
    <filename>structinviwo_1_1dispatching_1_1detail_1_1Filter_3_01Predicate_00_01std_1_1tuple_3_01Args_8_8_8_01_4_01_4.html</filename>
    <templarg>Predicate</templarg>
    <templarg>Args</templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::FilteringEvent</name>
    <filename>classinviwo_1_1FilteringEvent.html</filename>
    <base>inviwo::BrushingAndLinkingEvent</base>
  </compound>
  <compound kind="class">
    <name>inviwo::FindEdges</name>
    <filename>classinviwo_1_1FindEdges.html</filename>
    <base>inviwo::ImageGLProcessor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classinviwo_1_1FindEdges.html</anchorfile>
      <anchor>a45104fa2e27a4b4f6258a2e1e11140bb</anchor>
      <arglist>(TextureUnitContainer &amp;cont) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::FirstIvwProcessor</name>
    <filename>classinviwo_1_1FirstIvwProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1FirstIvwProcessor.html</anchorfile>
      <anchor>ab51ef111fcf565c75a33ed8f3ad3c3d6</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::flat_extent</name>
    <filename>structinviwo_1_1util_1_1flat__extent.html</filename>
    <templarg></templarg>
    <base>flat_extent_impl&lt; T, util::rank&lt; T &gt;::value &gt;</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::flat_extent_impl</name>
    <filename>structinviwo_1_1util_1_1flat__extent__impl.html</filename>
    <templarg>T</templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::flat_extent_impl&lt; T, 0 &gt;</name>
    <filename>structinviwo_1_1util_1_1flat__extent__impl_3_01T_00_010_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>flat_extent_impl&lt; T, util::rank&lt; T &gt;::value &gt;</name>
    <filename>structinviwo_1_1util_1_1flat__extent__impl.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::dispatching::filter::Float1s</name>
    <filename>structinviwo_1_1dispatching_1_1filter_1_1Float1s.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::dispatching::filter::Float2s</name>
    <filename>structinviwo_1_1dispatching_1_1filter_1_1Float2s.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::dispatching::filter::Float3s</name>
    <filename>structinviwo_1_1dispatching_1_1filter_1_1Float3s.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::dispatching::filter::Float4s</name>
    <filename>structinviwo_1_1dispatching_1_1filter_1_1Float4s.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::glui::FloatMinMaxPropertyWidget</name>
    <filename>classinviwo_1_1glui_1_1FloatMinMaxPropertyWidget.html</filename>
    <base>inviwo::glui::RangeSlider</base>
    <base>inviwo::PropertyWidget</base>
    <base>inviwo::PropertyObserver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1glui_1_1FloatMinMaxPropertyWidget.html</anchorfile>
      <anchor>a3726046c08f3674f8bb41f8789178372</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::glui::FloatPropertyWidget</name>
    <filename>classinviwo_1_1glui_1_1FloatPropertyWidget.html</filename>
    <base>inviwo::glui::Slider</base>
    <base>inviwo::PropertyWidget</base>
    <base>inviwo::PropertyObserver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1glui_1_1FloatPropertyWidget.html</anchorfile>
      <anchor>a436bd3a4454fd824911bfc095c86c8b6</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::dispatching::filter::Floats</name>
    <filename>structinviwo_1_1dispatching_1_1filter_1_1Floats.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::Fog</name>
    <filename>classinviwo_1_1Fog.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1Fog.html</anchorfile>
      <anchor>ad45431ccc90973731e7981b59f3408db</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::TextRenderer::FontCache</name>
    <filename>structinviwo_1_1TextRenderer_1_1FontCache.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::FontProperty</name>
    <filename>classinviwo_1_1FontProperty.html</filename>
    <base>inviwo::CompositeProperty</base>
  </compound>
  <compound kind="class">
    <name>inviwo::FontRenderingModule</name>
    <filename>classinviwo_1_1FontRenderingModule.html</filename>
    <base>inviwo::InviwoModule</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getVersion</name>
      <anchorfile>classinviwo_1_1FontRenderingModule.html</anchorfile>
      <anchor>a4cc99267e4fabadbe57d168e683accac</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; VersionConverter &gt;</type>
      <name>getConverter</name>
      <anchorfile>classinviwo_1_1FontRenderingModule.html</anchorfile>
      <anchor>a5db16e04d7c55e0c3ce401e9d8a1f3d8</anchor>
      <arglist>(int version) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::FontSizePropertyWidgetQt</name>
    <filename>classinviwo_1_1FontSizePropertyWidgetQt.html</filename>
    <base>inviwo::PropertyWidgetQt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1FontSizePropertyWidgetQt.html</anchorfile>
      <anchor>abde24d113b352d3f1fb05d26d820a133</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::for_each_type</name>
    <filename>structinviwo_1_1util_1_1for__each__type.html</filename>
    <templarg>Types</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::for_each_type&lt; std::tuple&lt; T &gt; &gt;</name>
    <filename>structinviwo_1_1util_1_1for__each__type_3_01std_1_1tuple_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::for_each_type&lt; std::tuple&lt; T, Types... &gt; &gt;</name>
    <filename>structinviwo_1_1util_1_1for__each__type_3_01std_1_1tuple_3_01T_00_01Types_8_8_8_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Types</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::for_each_type_pair</name>
    <filename>structinviwo_1_1util_1_1for__each__type__pair.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::for_each_type_pair&lt; std::tuple&lt; ATypes... &gt;, std::tuple&lt; BTypes... &gt; &gt;</name>
    <filename>structinviwo_1_1util_1_1for__each__type__pair_3_01std_1_1tuple_3_01ATypes_8_8_8_01_4_00_01std_1_980543efefbc8ab89773d2539d3c1f94.html</filename>
    <templarg>ATypes</templarg>
    <templarg>BTypes</templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::FrameBufferObject</name>
    <filename>classinviwo_1_1FrameBufferObject.html</filename>
    <member kind="function">
      <type>void</type>
      <name>activate</name>
      <anchorfile>classinviwo_1_1FrameBufferObject.html</anchorfile>
      <anchor>a95d7fc65f44b5e5b79de49d7915a6ad8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deactivate</name>
      <anchorfile>classinviwo_1_1FrameBufferObject.html</anchorfile>
      <anchor>a2115434086e16507a13f538b80f5b03f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachTexture</name>
      <anchorfile>classinviwo_1_1FrameBufferObject.html</anchorfile>
      <anchor>a53d32c2ddac1c2dde9dd8baf9e8047f2</anchor>
      <arglist>(Texture2D *texture, GLenum attachmentID)</arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>attachColorTexture</name>
      <anchorfile>classinviwo_1_1FrameBufferObject.html</anchorfile>
      <anchor>a41614495ecaeba6cf02f7849f63a0db4</anchor>
      <arglist>(Texture2D *texture, int attachmentNumber, bool attachFromRear=false, int forcedLocation=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachTexture</name>
      <anchorfile>classinviwo_1_1FrameBufferObject.html</anchorfile>
      <anchor>ae7e064d7e69fe632c781deb2e0af07ac</anchor>
      <arglist>(Texture2DArray *texture, GLenum attachmentID)</arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>attachColorTexture</name>
      <anchorfile>classinviwo_1_1FrameBufferObject.html</anchorfile>
      <anchor>a73a1d95a988f96f0e061ff80a8810bff</anchor>
      <arglist>(Texture2DArray *texture, int attachmentNumber, bool attachFromRear=false, int forcedLocation=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachTextureLayer</name>
      <anchorfile>classinviwo_1_1FrameBufferObject.html</anchorfile>
      <anchor>a801d39952d1d4b099caba3baf09c02d0</anchor>
      <arglist>(Texture2DArray *texture, GLenum attachmentID, int layer, int level=0)</arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>attachColorTextureLayer</name>
      <anchorfile>classinviwo_1_1FrameBufferObject.html</anchorfile>
      <anchor>a55d494983bd480d97d7c4c90c59f2fad</anchor>
      <arglist>(Texture2DArray *texture, int attachmentNumber, int layer, bool attachFromRear=false, int forcedLocation=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachTexture</name>
      <anchorfile>classinviwo_1_1FrameBufferObject.html</anchorfile>
      <anchor>af10bf6ceae8892d69ad95c98aa2eb8e3</anchor>
      <arglist>(Texture3D *texture, GLenum attachmentID)</arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>attachColorTexture</name>
      <anchorfile>classinviwo_1_1FrameBufferObject.html</anchorfile>
      <anchor>a55ebb5d2473652e95741784187144d17</anchor>
      <arglist>(Texture3D *texture, int attachmentNumber, bool attachFromRear=false, int forcedLocation=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachTextureLayer</name>
      <anchorfile>classinviwo_1_1FrameBufferObject.html</anchorfile>
      <anchor>a23a9e8d832886f19b7f71fe1f832847a</anchor>
      <arglist>(Texture3D *texture, GLenum attachmentID, int layer)</arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>attachColorTextureLayer</name>
      <anchorfile>classinviwo_1_1FrameBufferObject.html</anchorfile>
      <anchor>aae0de34eadb13609c29589239c9a7c28</anchor>
      <arglist>(Texture3D *texture, int attachmentNumber, int layer, bool attachFromRear=false, int forcedLocation=-1)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; GLenum &gt; &amp;</type>
      <name>getDrawBuffers</name>
      <anchorfile>classinviwo_1_1FrameBufferObject.html</anchorfile>
      <anchor>a07d05c390995cc909ef845d5903f6b60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; bool &gt; &amp;</type>
      <name>getDrawBuffersInUse</name>
      <anchorfile>classinviwo_1_1FrameBufferObject.html</anchorfile>
      <anchor>a5de960434d14c8ca4db11b9d734bd457</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAttachmentLocation</name>
      <anchorfile>classinviwo_1_1FrameBufferObject.html</anchorfile>
      <anchor>ab22d0b59150ce4b633a86a75546dd4e9</anchor>
      <arglist>(GLenum attachmentID) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deactivateFBO</name>
      <anchorfile>classinviwo_1_1FrameBufferObject.html</anchorfile>
      <anchor>a5b2ade9452569be9381a5832886e7fae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>performAttachColorTexture</name>
      <anchorfile>classinviwo_1_1FrameBufferObject.html</anchorfile>
      <anchor>ab92c35b9c11cf09d9dc141667a6809d7</anchor>
      <arglist>(GLenum &amp;outAttachNumber, int attachmentNumber, bool attachFromRear=false, int forcedLocation=-1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::FXAA</name>
    <filename>classinviwo_1_1FXAA.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1FXAA.html</anchorfile>
      <anchor>a90c2b708b8b60474b809aa2e7114b99d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1FXAA.html</anchorfile>
      <anchor>a2b708d4162e8dd6e4b71e6ca2df4f113</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::Gaussian1DProperty</name>
    <filename>classinviwo_1_1Gaussian1DProperty.html</filename>
    <base>GaussianProperty&lt; double &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::Gaussian2DProperty</name>
    <filename>classinviwo_1_1Gaussian2DProperty.html</filename>
    <base>GaussianProperty&lt; dvec2 &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::GaussianProperty</name>
    <filename>classinviwo_1_1GaussianProperty.html</filename>
    <templarg>T</templarg>
    <base>inviwo::CompositeProperty</base>
  </compound>
  <compound kind="class">
    <name>GaussianProperty&lt; double &gt;</name>
    <filename>classinviwo_1_1GaussianProperty.html</filename>
    <base>inviwo::CompositeProperty</base>
  </compound>
  <compound kind="class">
    <name>GaussianProperty&lt; dvec2 &gt;</name>
    <filename>classinviwo_1_1GaussianProperty.html</filename>
    <base>inviwo::CompositeProperty</base>
  </compound>
  <compound kind="class">
    <name>inviwo::GeneralEventMatcher</name>
    <filename>classinviwo_1_1GeneralEventMatcher.html</filename>
    <base>inviwo::EventMatcher</base>
  </compound>
  <compound kind="class">
    <name>inviwo::GestureEvent</name>
    <filename>classinviwo_1_1GestureEvent.html</filename>
    <base>inviwo::InteractionEvent</base>
    <member kind="function">
      <type>double</type>
      <name>depth</name>
      <anchorfile>classinviwo_1_1GestureEvent.html</anchorfile>
      <anchor>a286d358e34aa445a0a50b0669d76163f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>dvec3</type>
      <name>ndc</name>
      <anchorfile>classinviwo_1_1GestureEvent.html</anchorfile>
      <anchor>a64191db01def465f667a7ad42d7dc405</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::GestureEventMatcher</name>
    <filename>classinviwo_1_1GestureEventMatcher.html</filename>
    <base>inviwo::EventMatcher</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detailzip::get_iterator</name>
    <filename>structinviwo_1_1util_1_1detailzip_1_1get__iterator.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::kind::GL</name>
    <filename>structinviwo_1_1kind_1_1GL.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::GlBoolState</name>
    <filename>structinviwo_1_1utilgl_1_1GlBoolState.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::GLFormats::GLFormat</name>
    <filename>structinviwo_1_1GLFormats_1_1GLFormat.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::GLFormats</name>
    <filename>classinviwo_1_1GLFormats.html</filename>
    <class kind="struct">inviwo::GLFormats::GLFormat</class>
  </compound>
  <compound kind="class">
    <name>inviwo::GLFWException</name>
    <filename>classinviwo_1_1GLFWException.html</filename>
    <base>inviwo::Exception</base>
  </compound>
  <compound kind="class">
    <name>inviwo::GLFWInitException</name>
    <filename>classinviwo_1_1GLFWInitException.html</filename>
    <base>inviwo::ModuleInitException</base>
  </compound>
  <compound kind="class">
    <name>inviwo::GLFWModule</name>
    <filename>classinviwo_1_1GLFWModule.html</filename>
    <base>inviwo::InviwoModule</base>
    <base>inviwo::ProcessorNetworkEvaluationObserver</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::glmtype</name>
    <filename>structinviwo_1_1util_1_1glmtype.html</filename>
    <templarg></templarg>
    <templarg>dimX</templarg>
    <templarg>dimY</templarg>
    <templarg>P</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::glmtype&lt; T, 1, 1, P &gt;</name>
    <filename>structinviwo_1_1util_1_1glmtype_3_01T_00_011_00_011_00_01P_01_4.html</filename>
    <templarg></templarg>
    <templarg>P</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::glmtype&lt; T, 2, 1, P &gt;</name>
    <filename>structinviwo_1_1util_1_1glmtype_3_01T_00_012_00_011_00_01P_01_4.html</filename>
    <templarg></templarg>
    <templarg>P</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::glmtype&lt; T, 2, 2, P &gt;</name>
    <filename>structinviwo_1_1util_1_1glmtype_3_01T_00_012_00_012_00_01P_01_4.html</filename>
    <templarg></templarg>
    <templarg>P</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::glmtype&lt; T, 2, 3, P &gt;</name>
    <filename>structinviwo_1_1util_1_1glmtype_3_01T_00_012_00_013_00_01P_01_4.html</filename>
    <templarg></templarg>
    <templarg>P</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::glmtype&lt; T, 2, 4, P &gt;</name>
    <filename>structinviwo_1_1util_1_1glmtype_3_01T_00_012_00_014_00_01P_01_4.html</filename>
    <templarg></templarg>
    <templarg>P</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::glmtype&lt; T, 3, 1, P &gt;</name>
    <filename>structinviwo_1_1util_1_1glmtype_3_01T_00_013_00_011_00_01P_01_4.html</filename>
    <templarg></templarg>
    <templarg>P</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::glmtype&lt; T, 3, 2, P &gt;</name>
    <filename>structinviwo_1_1util_1_1glmtype_3_01T_00_013_00_012_00_01P_01_4.html</filename>
    <templarg></templarg>
    <templarg>P</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::glmtype&lt; T, 3, 3, P &gt;</name>
    <filename>structinviwo_1_1util_1_1glmtype_3_01T_00_013_00_013_00_01P_01_4.html</filename>
    <templarg></templarg>
    <templarg>P</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::glmtype&lt; T, 3, 4, P &gt;</name>
    <filename>structinviwo_1_1util_1_1glmtype_3_01T_00_013_00_014_00_01P_01_4.html</filename>
    <templarg></templarg>
    <templarg>P</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::glmtype&lt; T, 4, 1, P &gt;</name>
    <filename>structinviwo_1_1util_1_1glmtype_3_01T_00_014_00_011_00_01P_01_4.html</filename>
    <templarg></templarg>
    <templarg>P</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::glmtype&lt; T, 4, 2, P &gt;</name>
    <filename>structinviwo_1_1util_1_1glmtype_3_01T_00_014_00_012_00_01P_01_4.html</filename>
    <templarg></templarg>
    <templarg>P</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::glmtype&lt; T, 4, 3, P &gt;</name>
    <filename>structinviwo_1_1util_1_1glmtype_3_01T_00_014_00_013_00_01P_01_4.html</filename>
    <templarg></templarg>
    <templarg>P</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::glmtype&lt; T, 4, 4, P &gt;</name>
    <filename>structinviwo_1_1util_1_1glmtype_3_01T_00_014_00_014_00_01P_01_4.html</filename>
    <templarg></templarg>
    <templarg>P</templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::OpenGLCapabilities::GLSLShaderVersion</name>
    <filename>classinviwo_1_1OpenGLCapabilities_1_1GLSLShaderVersion.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::GLUITestProcessor</name>
    <filename>classinviwo_1_1GLUITestProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1GLUITestProcessor.html</anchorfile>
      <anchor>ae8a304b5e8f467982cbd2d714e668ce6</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::TextRenderer::GlyphEntry</name>
    <filename>structinviwo_1_1TextRenderer_1_1GlyphEntry.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::GraphicsItemData</name>
    <filename>classinviwo_1_1GraphicsItemData.html</filename>
    <templarg>T</templarg>
    <base>inviwo::LinkDialogTreeItem</base>
  </compound>
  <compound kind="class">
    <name>GraphicsItemData&lt; Processor &gt;</name>
    <filename>classinviwo_1_1GraphicsItemData.html</filename>
    <base>inviwo::LinkDialogTreeItem</base>
  </compound>
  <compound kind="class">
    <name>GraphicsItemData&lt; Property &gt;</name>
    <filename>classinviwo_1_1GraphicsItemData.html</filename>
    <base>inviwo::LinkDialogTreeItem</base>
  </compound>
  <compound kind="class">
    <name>inviwo::GrayscaleCLProcessor</name>
    <filename>classinviwo_1_1GrayscaleCLProcessor.html</filename>
    <base>inviwo::Processor</base>
    <base>inviwo::ProcessorKernelOwner</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1GrayscaleCLProcessor.html</anchorfile>
      <anchor>a5f6d1ea02675f63a7c65e229b758d1a0</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::grow</name>
    <filename>structinviwo_1_1util_1_1detail_1_1grow.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::growImpl</name>
    <filename>structinviwo_1_1util_1_1detail_1_1growImpl.html</filename>
    <templarg></templarg>
    <templarg>Signed</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::growImpl&lt; T, true &gt;</name>
    <filename>structinviwo_1_1util_1_1detail_1_1growImpl_3_01T_00_01true_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::growImpl&lt; unsigned char, false &gt;</name>
    <filename>structinviwo_1_1util_1_1detail_1_1growImpl_3_01unsigned_01char_00_01false_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::growImpl&lt; unsigned int, false &gt;</name>
    <filename>structinviwo_1_1util_1_1detail_1_1growImpl_3_01unsigned_01int_00_01false_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::growImpl&lt; unsigned short, false &gt;</name>
    <filename>structinviwo_1_1util_1_1detail_1_1growImpl_3_01unsigned_01short_00_01false_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::hdf5::Handle</name>
    <filename>classinviwo_1_1hdf5_1_1Handle.html</filename>
    <class kind="struct">inviwo::hdf5::Handle::Selection</class>
  </compound>
  <compound kind="class">
    <name>inviwo::util::HasClassIdentifier</name>
    <filename>classinviwo_1_1util_1_1HasClassIdentifier.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::util::HasClassIdentifierLower</name>
    <filename>classinviwo_1_1util_1_1HasClassIdentifierLower.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::util::HasClassIdentifierUpper</name>
    <filename>classinviwo_1_1util_1_1HasClassIdentifierUpper.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::util::HasColorCode</name>
    <filename>classinviwo_1_1util_1_1HasColorCode.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::util::HasColorCodeLower</name>
    <filename>classinviwo_1_1util_1_1HasColorCodeLower.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::util::HasColorCodeUpper</name>
    <filename>classinviwo_1_1util_1_1HasColorCodeUpper.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::detail::HasData</name>
    <filename>structinviwo_1_1detail_1_1HasData.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::detail::HasData&lt; T, 0 &gt;</name>
    <filename>structinviwo_1_1detail_1_1HasData_3_01T_00_010_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::HasDataFormat</name>
    <filename>structinviwo_1_1util_1_1HasDataFormat.html</filename>
    <templarg></templarg>
    <base>HasDataFormatImpl&lt; T, DefaultDataFormats &gt;</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::HasDataFormatImpl</name>
    <filename>structinviwo_1_1util_1_1detail_1_1HasDataFormatImpl.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>HasDataFormatImpl&lt; T, DefaultDataFormats &gt;</name>
    <filename>structinviwo_1_1util_1_1detail_1_1HasDataFormatImpl.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::HasDataFormatImpl&lt; T, std::tuple&lt; Head, Rest... &gt; &gt;</name>
    <filename>structinviwo_1_1util_1_1detail_1_1HasDataFormatImpl_3_01T_00_01std_1_1tuple_3_01Head_00_01Rest_8_8_8_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Rest</templarg>
    <base>HasDataFormatImpl&lt; T, std::tuple&lt; Rest... &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>HasDataFormatImpl&lt; T, std::tuple&lt; Rest... &gt; &gt;</name>
    <filename>structinviwo_1_1util_1_1detail_1_1HasDataFormatImpl.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::HasDataFormatImpl&lt; T, std::tuple&lt;&gt; &gt;</name>
    <filename>structinviwo_1_1util_1_1detail_1_1HasDataFormatImpl_3_01T_00_01std_1_1tuple_3_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::HasDataFormatImpl&lt; typename Head::type, std::tuple&lt; Head, Rest... &gt; &gt;</name>
    <filename>structinviwo_1_1util_1_1detail_1_1HasDataFormatImpl_3_01typename_01Head_1_1type_00_01std_1_1tupl136554b29f2f183306eafc43c9c3a94a.html</filename>
    <templarg></templarg>
    <templarg>Rest</templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::util::HasDataInfo</name>
    <filename>classinviwo_1_1util_1_1HasDataInfo.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::util::HasDataName</name>
    <filename>classinviwo_1_1util_1_1HasDataName.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; inviwo::FileExtension &gt;</name>
    <filename>structstd_1_1hash_3_01inviwo_1_1FileExtension_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; inviwo::PortConnection &gt;</name>
    <filename>structstd_1_1hash_3_01inviwo_1_1PortConnection_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; inviwo::ProcessorPair &gt;</name>
    <filename>structstd_1_1hash_3_01inviwo_1_1ProcessorPair_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; inviwo::PropertyLink &gt;</name>
    <filename>structstd_1_1hash_3_01inviwo_1_1PropertyLink_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; inviwo::ShaderType &gt;</name>
    <filename>structstd_1_1hash_3_01inviwo_1_1ShaderType_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; std::pair&lt; T, U &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01std_1_1pair_3_01T_00_01U_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; std::tuple&lt; TT... &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01std_1_1tuple_3_01TT_8_8_8_01_4_01_4.html</filename>
    <templarg>TT</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::hashtuple::HashValueImpl</name>
    <filename>structinviwo_1_1util_1_1hashtuple_1_1HashValueImpl.html</filename>
    <templarg></templarg>
    <templarg>Index</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::hashtuple::HashValueImpl&lt; Tuple, 0 &gt;</name>
    <filename>structinviwo_1_1util_1_1hashtuple_1_1HashValueImpl_3_01Tuple_00_010_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::util::HasInfo</name>
    <filename>classinviwo_1_1util_1_1HasInfo.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::HasOwnerDeleter</name>
    <filename>structinviwo_1_1HasOwnerDeleter.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::detail::hasProcessorInfo</name>
    <filename>classinviwo_1_1detail_1_1hasProcessorInfo.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::glui::HBoxLayout</name>
    <filename>classinviwo_1_1glui_1_1HBoxLayout.html</filename>
    <base>inviwo::glui::BoxLayout</base>
  </compound>
  <compound kind="class">
    <name>glui::HBoxLayout</name>
    <filename>classglui_1_1HBoxLayout.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::HDF5Module</name>
    <filename>classinviwo_1_1HDF5Module.html</filename>
    <base>inviwo::InviwoModule</base>
  </compound>
  <compound kind="class">
    <name>inviwo::hdf5::HDF5ToVolume</name>
    <filename>classinviwo_1_1hdf5_1_1HDF5ToVolume.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1hdf5_1_1HDF5ToVolume.html</anchorfile>
      <anchor>a99449a8e508a64cc37dd0d59375a3b87</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::HdrBloom</name>
    <filename>classinviwo_1_1HdrBloom.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1HdrBloom.html</anchorfile>
      <anchor>a5e88246d57a49e22afa945b4f0d35144</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::utildoc::TableBuilder::Header</name>
    <filename>structinviwo_1_1utildoc_1_1TableBuilder_1_1Header.html</filename>
    <base>inviwo::utildoc::TableBuilder::Wrapper</base>
  </compound>
  <compound kind="class">
    <name>inviwo::HedgeHog2D</name>
    <filename>classinviwo_1_1HedgeHog2D.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1HedgeHog2D.html</anchorfile>
      <anchor>a61a8b000e4773836c765ecfa77b86525</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::HeightFieldMapper</name>
    <filename>classinviwo_1_1HeightFieldMapper.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1HeightFieldMapper.html</anchorfile>
      <anchor>a4ffc5005dd0eb3c622218e69e27fade6</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::HeightFieldProcessor</name>
    <filename>classinviwo_1_1HeightFieldProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1HeightFieldProcessor.html</anchorfile>
      <anchor>a62ee4f503ddfc4eb7a6fd1444cf9cbbc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1HeightFieldProcessor.html</anchorfile>
      <anchor>a49d4f2665a4f556d0b96dbb1be6ffe0c</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::HelpWidget</name>
    <filename>classinviwo_1_1HelpWidget.html</filename>
    <base>inviwo::InviwoDockWidget</base>
  </compound>
  <compound kind="class">
    <name>inviwo::HiddenCanvasQt</name>
    <filename>classinviwo_1_1HiddenCanvasQt.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::Hideer</name>
    <filename>structinviwo_1_1util_1_1detail_1_1Hideer.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::HistogramContainer</name>
    <filename>classinviwo_1_1HistogramContainer.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::detail::id_name_app_constructor</name>
    <filename>structinviwo_1_1detail_1_1id__name__app__constructor.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::detail::id_name_constructor</name>
    <filename>structinviwo_1_1detail_1_1id__name__constructor.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::util::IdentifiedDeserializer</name>
    <filename>classinviwo_1_1util_1_1IdentifiedDeserializer.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::xml::IdentifierReplacement</name>
    <filename>structinviwo_1_1xml_1_1IdentifierReplacement.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::IdentityPropertyTransformer</name>
    <filename>classinviwo_1_1IdentityPropertyTransformer.html</filename>
    <templarg></templarg>
    <base>inviwo::PropertyTransformer</base>
  </compound>
  <compound kind="class">
    <name>inviwo::IgnoreException</name>
    <filename>classinviwo_1_1IgnoreException.html</filename>
    <base>inviwo::Exception</base>
  </compound>
  <compound kind="class">
    <name>inviwo::Image</name>
    <filename>classinviwo_1_1Image.html</filename>
    <base>DataGroup&lt; Image, ImageRepresentation &gt;</base>
    <base>inviwo::MetaDataOwner</base>
    <member kind="function">
      <type>void</type>
      <name>setDimensions</name>
      <anchorfile>classinviwo_1_1Image.html</anchorfile>
      <anchor>a0f7cf6a811b72212ea8e8376c211de7a</anchor>
      <arglist>(size2_t dimensions)</arglist>
    </member>
    <member kind="function">
      <type>DataBuffer</type>
      <name>getLayerAsCodedBuffer</name>
      <anchorfile>classinviwo_1_1Image.html</anchorfile>
      <anchor>ad3469fc0e2078db23f76d19affabeadb</anchor>
      <arglist>(LayerType layerType, const std::string &amp;fileExtension, size_t idx=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyRepresentationsTo</name>
      <anchorfile>classinviwo_1_1Image.html</anchorfile>
      <anchor>a04f5f9ea073435ebd9a94625f3f0cd28</anchor>
      <arglist>(Image *target) const </arglist>
    </member>
    <member kind="function">
      <type>dvec4</type>
      <name>readPixel</name>
      <anchorfile>classinviwo_1_1Image.html</anchorfile>
      <anchor>a487fd42237d83e8792a41fbdd14dabcf</anchor>
      <arglist>(size2_t pos, LayerType layer, size_t index=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageBinary</name>
    <filename>classinviwo_1_1ImageBinary.html</filename>
    <base>inviwo::ImageGLProcessor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classinviwo_1_1ImageBinary.html</anchorfile>
      <anchor>a0374890f5a9f8b0a63d85fbca7a07815</anchor>
      <arglist>(TextureUnitContainer &amp;cont) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageBrightnessContrast</name>
    <filename>classinviwo_1_1ImageBrightnessContrast.html</filename>
    <base>inviwo::ImageGLProcessor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classinviwo_1_1ImageBrightnessContrast.html</anchorfile>
      <anchor>af0eeb38e50e63dd2cb685da01cc264a8</anchor>
      <arglist>(TextureUnitContainer &amp;cont) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageCache</name>
    <filename>classinviwo_1_1ImageCache.html</filename>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classinviwo_1_1ImageCache.html</anchorfile>
      <anchor>a7802dc262c994c168e32ffee5fee8dbf</anchor>
      <arglist>(const std::vector&lt; size2_t &gt; &amp;dimensions) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classinviwo_1_1ImageCache.html</anchorfile>
      <anchor>ab8e121c7b549cb9ba59076591f86f406</anchor>
      <arglist>(std::vector&lt; size2_t &gt; dimensions)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageCL</name>
    <filename>classinviwo_1_1ImageCL.html</filename>
    <base>inviwo::ImageRepresentation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>copyRepresentationsTo</name>
      <anchorfile>classinviwo_1_1ImageCL.html</anchorfile>
      <anchor>ac6e489f5ec4bd52593b869f4cc346276</anchor>
      <arglist>(ImageRepresentation *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>priority</name>
      <anchorfile>classinviwo_1_1ImageCL.html</anchorfile>
      <anchor>a5f6c0e647206fc69c1ba6df5bc071c6f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual dvec4</type>
      <name>readPixel</name>
      <anchorfile>classinviwo_1_1ImageCL.html</anchorfile>
      <anchor>a65b5e6f366e6ebce5c3f43edfae26054</anchor>
      <arglist>(size2_t pos, LayerType layer, size_t index=0) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageCLGL</name>
    <filename>classinviwo_1_1ImageCLGL.html</filename>
    <base>inviwo::ImageRepresentation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>copyRepresentationsTo</name>
      <anchorfile>classinviwo_1_1ImageCLGL.html</anchorfile>
      <anchor>ae22754170b0527b6df541e7261881e64</anchor>
      <arglist>(ImageRepresentation *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>priority</name>
      <anchorfile>classinviwo_1_1ImageCLGL.html</anchorfile>
      <anchor>a02d45ca170dc3c115171ecfcd8ac4d13</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual dvec4</type>
      <name>readPixel</name>
      <anchorfile>classinviwo_1_1ImageCLGL.html</anchorfile>
      <anchor>ad3312c570e03ab651a038a41f941c4bd</anchor>
      <arglist>(size2_t pos, LayerType layer, size_t index=0) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageCompositeProcessorGL</name>
    <filename>classinviwo_1_1ImageCompositeProcessorGL.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1ImageCompositeProcessorGL.html</anchorfile>
      <anchor>a197aede9614ec035e3f832f6734abe30</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageCompositor</name>
    <filename>classinviwo_1_1ImageCompositor.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageContour</name>
    <filename>classinviwo_1_1ImageContour.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::detail::ImageContourDispatcher</name>
    <filename>structinviwo_1_1detail_1_1ImageContourDispatcher.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageContourProcessor</name>
    <filename>classinviwo_1_1ImageContourProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1ImageContourProcessor.html</anchorfile>
      <anchor>a8be88d2f07f7b9f82cec4a61f556c59c</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageConvolution</name>
    <filename>classinviwo_1_1ImageConvolution.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageEdgeDarken</name>
    <filename>classinviwo_1_1ImageEdgeDarken.html</filename>
    <base>inviwo::ImageGLProcessor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classinviwo_1_1ImageEdgeDarken.html</anchorfile>
      <anchor>acf83a6f1b809cb742fa11dea98001f0e</anchor>
      <arglist>(TextureUnitContainer &amp;cont) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageEditorProperty</name>
    <filename>classinviwo_1_1ImageEditorProperty.html</filename>
    <base>inviwo::FileProperty</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageEditorWidgetQt</name>
    <filename>classinviwo_1_1ImageEditorWidgetQt.html</filename>
    <base>inviwo::PropertyWidgetQt</base>
    <member kind="function">
      <type>void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1ImageEditorWidgetQt.html</anchorfile>
      <anchor>a119ee6459a3c5c94cb6f865fa4e4de31</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageExport</name>
    <filename>classinviwo_1_1ImageExport.html</filename>
    <base>DataExport&lt; Layer, ImageInport &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageGamma</name>
    <filename>classinviwo_1_1ImageGamma.html</filename>
    <base>inviwo::ImageGLProcessor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classinviwo_1_1ImageGamma.html</anchorfile>
      <anchor>ad30f7239a74419caed2875d9bc751513</anchor>
      <arglist>(TextureUnitContainer &amp;cont) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageGL</name>
    <filename>classinviwo_1_1ImageGL.html</filename>
    <base>inviwo::ImageRepresentation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>copyRepresentationsTo</name>
      <anchorfile>classinviwo_1_1ImageGL.html</anchorfile>
      <anchor>a26f17e8c4f4ab525d3acc486ec5665a9</anchor>
      <arglist>(ImageRepresentation *target) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>priority</name>
      <anchorfile>classinviwo_1_1ImageGL.html</anchorfile>
      <anchor>ad29637096e196d4d5449fb42ec76230e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual dvec4</type>
      <name>readPixel</name>
      <anchorfile>classinviwo_1_1ImageGL.html</anchorfile>
      <anchor>a3cc3d2fb57d683e00f5497576f36ebcd</anchor>
      <arglist>(size2_t pos, LayerType layer, size_t index=0) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageGLProcessor</name>
    <filename>classinviwo_1_1ImageGLProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1ImageGLProcessor.html</anchorfile>
      <anchor>a0caec0d137cc8b12884ab83eab7b5636</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1ImageGLProcessor.html</anchorfile>
      <anchor>a4d1d97f246fb9d478163f4a86f0a25dd</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classinviwo_1_1ImageGLProcessor.html</anchorfile>
      <anchor>a194ea934d85727065a2c2c3f4841a9ea</anchor>
      <arglist>(TextureUnitContainer &amp;cont)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>postProcess</name>
      <anchorfile>classinviwo_1_1ImageGLProcessor.html</anchorfile>
      <anchor>afde69e5a62f9716a00d4e473ccd07c1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>afterInportChanged</name>
      <anchorfile>classinviwo_1_1ImageGLProcessor.html</anchorfile>
      <anchor>a9cddf8203576532efddbc36932deb368</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>inportChanged</name>
      <anchorfile>classinviwo_1_1ImageGLProcessor.html</anchorfile>
      <anchor>a169afbadea74d78f351719e2ede31015</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageGradient</name>
    <filename>classinviwo_1_1ImageGradient.html</filename>
    <base>inviwo::ImageGLProcessor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classinviwo_1_1ImageGradient.html</anchorfile>
      <anchor>a613a7a3df4f3f8bb0eac7111332bf00b</anchor>
      <arglist>(TextureUnitContainer &amp;cont) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageGrayscale</name>
    <filename>classinviwo_1_1ImageGrayscale.html</filename>
    <base>inviwo::ImageGLProcessor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classinviwo_1_1ImageGrayscale.html</anchorfile>
      <anchor>a8d1d5c0415964d011869c7e6e2a40aa2</anchor>
      <arglist>(TextureUnitContainer &amp;cont) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageHighPass</name>
    <filename>classinviwo_1_1ImageHighPass.html</filename>
    <base>inviwo::ImageGLProcessor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classinviwo_1_1ImageHighPass.html</anchorfile>
      <anchor>aab2f345e1eb843bf6744ff28a28d9136</anchor>
      <arglist>(TextureUnitContainer &amp;cont) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageHueSaturationLuminance</name>
    <filename>classinviwo_1_1ImageHueSaturationLuminance.html</filename>
    <base>inviwo::ImageGLProcessor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classinviwo_1_1ImageHueSaturationLuminance.html</anchorfile>
      <anchor>a763e070dffa654b558419f5cf5bfb2ac</anchor>
      <arglist>(TextureUnitContainer &amp;cont) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageInvert</name>
    <filename>classinviwo_1_1ImageInvert.html</filename>
    <base>inviwo::ImageGLProcessor</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageLabel</name>
    <filename>classinviwo_1_1ImageLabel.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageLabelWidget</name>
    <filename>classinviwo_1_1ImageLabelWidget.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageLayoutGL</name>
    <filename>classinviwo_1_1ImageLayoutGL.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1ImageLayoutGL.html</anchorfile>
      <anchor>ab4b2e5faf693b02ad59245d3d6c1d212</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageLowPass</name>
    <filename>classinviwo_1_1ImageLowPass.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1ImageLowPass.html</anchorfile>
      <anchor>ab8f584221dedab00ca00b0efeeaa7079</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageMapping</name>
    <filename>classinviwo_1_1ImageMapping.html</filename>
    <base>inviwo::ImageGLProcessor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classinviwo_1_1ImageMapping.html</anchorfile>
      <anchor>a4de361a68502d3f3d1534b62e5632e35</anchor>
      <arglist>(TextureUnitContainer &amp;cont) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>afterInportChanged</name>
      <anchorfile>classinviwo_1_1ImageMapping.html</anchorfile>
      <anchor>a66e43852b7c82e5dd23a8db2a263c655</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageMixer</name>
    <filename>classinviwo_1_1ImageMixer.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1ImageMixer.html</anchorfile>
      <anchor>a135b2ccb1ca451b178d5550ba9640d8a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1ImageMixer.html</anchorfile>
      <anchor>adec81e2447be3c1e93c8765a9481af88</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageNormalizationProcessor</name>
    <filename>classinviwo_1_1ImageNormalizationProcessor.html</filename>
    <base>inviwo::ImageGLProcessor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classinviwo_1_1ImageNormalizationProcessor.html</anchorfile>
      <anchor>ab6b5e20b673b4ebef3f60e52f746644b</anchor>
      <arglist>(TextureUnitContainer &amp;cont) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>postProcess</name>
      <anchorfile>classinviwo_1_1ImageNormalizationProcessor.html</anchorfile>
      <anchor>af68434cd77f352382e2b2785c0832117</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageOpacity</name>
    <filename>classinviwo_1_1ImageOpacity.html</filename>
    <base>inviwo::ImageGLProcessor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classinviwo_1_1ImageOpacity.html</anchorfile>
      <anchor>a158eb088a6c9160e29f249909945da5d</anchor>
      <arglist>(TextureUnitContainer &amp;cont) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageOutport</name>
    <filename>classinviwo_1_1ImageOutport.html</filename>
    <base>DataOutport&lt; Image &gt;</base>
    <base>inviwo::EventHandler</base>
    <member kind="function">
      <type>void</type>
      <name>propagateEvent</name>
      <anchorfile>classinviwo_1_1ImageOutport.html</anchorfile>
      <anchor>a618210a838607fa9ae77ba8329bdf47e</anchor>
      <arglist>(Event *event) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimensions</name>
      <anchorfile>classinviwo_1_1ImageOutport.html</anchorfile>
      <anchor>acfb322aec2c07b1801b0db61b4585db6</anchor>
      <arglist>(const size2_t &amp;newDimension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHandleResizeEvents</name>
      <anchorfile>classinviwo_1_1ImageOutport.html</anchorfile>
      <anchor>a18dbedde49eb6809be7f42c328087863</anchor>
      <arglist>(bool handleResizeEvents)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>classinviwo_1_1ImageOutport.html</anchorfile>
      <anchor>a3ef46963dbca9212badfccb759623283</anchor>
      <arglist>(InvalidationLevel invalidationLevel) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageOverlayGL</name>
    <filename>classinviwo_1_1ImageOverlayGL.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1ImageOverlayGL.html</anchorfile>
      <anchor>a9e4a9835c94b0f10f7602b1af45d9063</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImagePortBase</name>
    <filename>classinviwo_1_1ImagePortBase.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageRAM</name>
    <filename>classinviwo_1_1ImageRAM.html</filename>
    <base>inviwo::ImageRepresentation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>copyRepresentationsTo</name>
      <anchorfile>classinviwo_1_1ImageRAM.html</anchorfile>
      <anchor>a6b8a11613a9c2adc371b3ffe4675cdf4</anchor>
      <arglist>(ImageRepresentation *target) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>priority</name>
      <anchorfile>classinviwo_1_1ImageRAM.html</anchorfile>
      <anchor>ad13deb186f078c3e832e1a49021d6d9d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual dvec4</type>
      <name>readPixel</name>
      <anchorfile>classinviwo_1_1ImageRAM.html</anchorfile>
      <anchor>a7a7c814e52a7acf5e6f2c4bed3e86563</anchor>
      <arglist>(size2_t pos, LayerType layer, size_t index=0) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageRAMCustomPrecision</name>
    <filename>classinviwo_1_1ImageRAMCustomPrecision.html</filename>
    <templarg></templarg>
    <templarg>B</templarg>
    <base>inviwo::ImageRAMPrecision</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageRAMPrecision</name>
    <filename>classinviwo_1_1ImageRAMPrecision.html</filename>
    <templarg></templarg>
    <base>inviwo::ImageRAM</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageRepresentation</name>
    <filename>classinviwo_1_1ImageRepresentation.html</filename>
    <base>DataGroupRepresentation&lt; Image &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>copyRepresentationsTo</name>
      <anchorfile>classinviwo_1_1ImageRepresentation.html</anchorfile>
      <anchor>a07caec2133ef7d3d5104f097e2583f3a</anchor>
      <arglist>(ImageRepresentation *target) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>priority</name>
      <anchorfile>classinviwo_1_1ImageRepresentation.html</anchorfile>
      <anchor>a8b5ce0d6516f09b90fe30674426bd74f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual dvec4</type>
      <name>readPixel</name>
      <anchorfile>classinviwo_1_1ImageRepresentation.html</anchorfile>
      <anchor>a362870b0305d5a2b1185259751a8acc3</anchor>
      <arglist>(size2_t pos, LayerType layer, size_t index=0) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageResample</name>
    <filename>classinviwo_1_1ImageResample.html</filename>
    <base>inviwo::ImageGLProcessor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1ImageResample.html</anchorfile>
      <anchor>aaa51a4bfa2a4757041ed0da2ff661791</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageReuseCache</name>
    <filename>classinviwo_1_1ImageReuseCache.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageScaling</name>
    <filename>classinviwo_1_1ImageScaling.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1ImageScaling.html</anchorfile>
      <anchor>ae0826b3389e9c0a5e35a4cc41a4f00fa</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageSequenceElementSelectorProcessor</name>
    <filename>classinviwo_1_1ImageSequenceElementSelectorProcessor.html</filename>
    <base>VectorElementSelectorProcessor&lt; Image, ImageOutport &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageSharpen</name>
    <filename>classinviwo_1_1ImageSharpen.html</filename>
    <base>inviwo::ImageGLProcessor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classinviwo_1_1ImageSharpen.html</anchorfile>
      <anchor>a785bd82fe7b8694e65301343aa67a7d0</anchor>
      <arglist>(TextureUnitContainer &amp;cont) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageSnapshot</name>
    <filename>classinviwo_1_1ImageSnapshot.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1ImageSnapshot.html</anchorfile>
      <anchor>a45701a5915ead68ee34da9bb148d5f36</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageSource</name>
    <filename>classinviwo_1_1ImageSource.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1ImageSource.html</anchorfile>
      <anchor>a94cc46b5137488bdc8782d7e907266f6</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageSourceSeries</name>
    <filename>classinviwo_1_1ImageSourceSeries.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1ImageSourceSeries.html</anchorfile>
      <anchor>adaa56859c52c511214103da1962990e5</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageSpatialSampler</name>
    <filename>classinviwo_1_1ImageSpatialSampler.html</filename>
    <templarg>DataDims</templarg>
    <templarg></templarg>
    <base>SpatialSampler&lt; 2, DataDims, T &gt;</base>
    <member kind="function">
      <type></type>
      <name>ImageSpatialSampler</name>
      <anchorfile>classinviwo_1_1ImageSpatialSampler.html</anchorfile>
      <anchor>adce247e50d123d7aafa441d2dcf0d09a</anchor>
      <arglist>(const LayerRAM *ram)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageSpatialSampler</name>
      <anchorfile>classinviwo_1_1ImageSpatialSampler.html</anchorfile>
      <anchor>a5e3b58a5bde74748f9f423f2d73b98ab</anchor>
      <arglist>(const Layer *layer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageSpatialSampler</name>
      <anchorfile>classinviwo_1_1ImageSpatialSampler.html</anchorfile>
      <anchor>aa835c6c787b9b005dba7464401bf0775</anchor>
      <arglist>(const Image *img)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageSpatialSampler</name>
      <anchorfile>classinviwo_1_1ImageSpatialSampler.html</anchorfile>
      <anchor>af74ac02ed33ba8c8d048e4f51f450687</anchor>
      <arglist>(std::shared_ptr&lt; const Image &gt; sharedImage)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; DataDims, T &gt;</type>
      <name>sample</name>
      <anchorfile>classinviwo_1_1ImageSpatialSampler.html</anchorfile>
      <anchor>a7e14cde718a3552882681dc260af3229</anchor>
      <arglist>(double x, double y, CoordinateSpace space) const </arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; DataDims, T &gt;</type>
      <name>sample</name>
      <anchorfile>classinviwo_1_1ImageSpatialSampler.html</anchorfile>
      <anchor>ad3a4b55c8254540348f1ee7bd8ac1e8f</anchor>
      <arglist>(double x, double y) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ImageToSpatialSampler</name>
    <filename>classinviwo_1_1ImageToSpatialSampler.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1ImageToSpatialSampler.html</anchorfile>
      <anchor>a18c7dbecdfd0bc53479654f795ded4e6</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::ImgRect</name>
    <filename>structinviwo_1_1ImgRect.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::util::IndexedDeserializer</name>
    <filename>classinviwo_1_1util_1_1IndexedDeserializer.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::IndexList</name>
    <filename>classinviwo_1_1IndexList.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::IndexMapper</name>
    <filename>structinviwo_1_1util_1_1IndexMapper.html</filename>
    <templarg>N</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::IndexMapper&lt; 2, IndexType &gt;</name>
    <filename>structinviwo_1_1util_1_1IndexMapper_3_012_00_01IndexType_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::IndexMapper&lt; 3, IndexType &gt;</name>
    <filename>structinviwo_1_1util_1_1IndexMapper_3_013_00_01IndexType_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::Inport</name>
    <filename>classinviwo_1_1Inport.html</filename>
    <base>inviwo::Port</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isReady</name>
      <anchorfile>classinviwo_1_1Inport.html</anchorfile>
      <anchor>a6ec2e575a425675418e8cc4ef80eba0c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOptional</name>
      <anchorfile>classinviwo_1_1Inport.html</anchorfile>
      <anchor>afe1660c34699d0c8dfcd79d4ef8d8495</anchor>
      <arglist>(bool optional)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isChanged</name>
      <anchorfile>classinviwo_1_1Inport.html</anchorfile>
      <anchor>af29be2f8403121963606dceb6a68c363</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>propagateEvent</name>
      <anchorfile>classinviwo_1_1Inport.html</anchorfile>
      <anchor>a224cfcaa6c97440986e7fdd5d2645519</anchor>
      <arglist>(Event *event, Outport *target=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>const BaseCallBack *</type>
      <name>onChange</name>
      <anchorfile>classinviwo_1_1Inport.html</anchorfile>
      <anchor>a1bf8e7693af8011b316555881a62d07f</anchor>
      <arglist>(T *o, void(T::*m)())</arglist>
    </member>
    <member kind="function">
      <type>const BaseCallBack *</type>
      <name>onInvalid</name>
      <anchorfile>classinviwo_1_1Inport.html</anchorfile>
      <anchor>ad1bdb2c6c195fe279fc67f9525b6a8a2</anchor>
      <arglist>(T *o, void(T::*m)())</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>classinviwo_1_1Inport.html</anchorfile>
      <anchor>a8dc2dcdadc525319ff79431832fa7535</anchor>
      <arglist>(InvalidationLevel invalidationLevel)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setValid</name>
      <anchorfile>classinviwo_1_1Inport.html</anchorfile>
      <anchor>a90fe83ae72fe7c465a916e47abadc7ac</anchor>
      <arglist>(const Outport *source)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>readyUpdate</name>
      <anchorfile>classinviwo_1_1Inport.html</anchorfile>
      <anchor>a1530f461996eb5f8aa085fdacf482b63</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::InportFactory</name>
    <filename>classinviwo_1_1InportFactory.html</filename>
    <base>Factory&lt; Inport, const std::string &amp;, const std::string &amp; &gt;</base>
    <base>StandardFactory&lt; Inport, InportFactoryObject &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::InportFactoryObject</name>
    <filename>classinviwo_1_1InportFactoryObject.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::InportFactoryObjectTemplate</name>
    <filename>classinviwo_1_1InportFactoryObjectTemplate.html</filename>
    <templarg></templarg>
    <base>inviwo::InportFactoryObject</base>
  </compound>
  <compound kind="class">
    <name>inviwo::InportIterable</name>
    <filename>classinviwo_1_1InportIterable.html</filename>
    <templarg>T</templarg>
    <templarg>Flat</templarg>
    <class kind="class">inviwo::InportIterable::const_iterator</class>
  </compound>
  <compound kind="class">
    <name>InportIterable&lt; BrushingAndLinkingManager, false &gt;</name>
    <filename>classinviwo_1_1InportIterable.html</filename>
  </compound>
  <compound kind="class">
    <name>InportIterable&lt; BufferBase, false &gt;</name>
    <filename>classinviwo_1_1InportIterable.html</filename>
  </compound>
  <compound kind="class">
    <name>InportIterable&lt; DataFrame, false &gt;</name>
    <filename>classinviwo_1_1InportIterable.html</filename>
  </compound>
  <compound kind="class">
    <name>InportIterable&lt; Eigen::MatrixXf, false &gt;</name>
    <filename>classinviwo_1_1InportIterable.html</filename>
  </compound>
  <compound kind="class">
    <name>InportIterable&lt; Handle, false &gt;</name>
    <filename>classinviwo_1_1InportIterable.html</filename>
  </compound>
  <compound kind="class">
    <name>InportIterable&lt; Image, false &gt;</name>
    <filename>classinviwo_1_1InportIterable.html</filename>
  </compound>
  <compound kind="class">
    <name>InportIterable&lt; IntegralLineSet, false &gt;</name>
    <filename>classinviwo_1_1InportIterable.html</filename>
  </compound>
  <compound kind="class">
    <name>InportIterable&lt; inviwo::LightSource, false &gt;</name>
    <filename>classinviwo_1_1InportIterable.html</filename>
  </compound>
  <compound kind="class">
    <name>InportIterable&lt; inviwo::plot::DataFrame, false &gt;</name>
    <filename>classinviwo_1_1InportIterable.html</filename>
  </compound>
  <compound kind="class">
    <name>InportIterable&lt; inviwo::Spatial4DSampler&lt; 3, double &gt;, false &gt;</name>
    <filename>classinviwo_1_1InportIterable.html</filename>
  </compound>
  <compound kind="class">
    <name>InportIterable&lt; inviwo::SpatialSampler&lt; 3, 3, double &gt;, false &gt;</name>
    <filename>classinviwo_1_1InportIterable.html</filename>
  </compound>
  <compound kind="class">
    <name>InportIterable&lt; inviwo::Volume, false &gt;</name>
    <filename>classinviwo_1_1InportIterable.html</filename>
  </compound>
  <compound kind="class">
    <name>InportIterable&lt; Mesh, false &gt;</name>
    <filename>classinviwo_1_1InportIterable.html</filename>
  </compound>
  <compound kind="class">
    <name>InportIterable&lt; Mesh, Flat &gt;</name>
    <filename>classinviwo_1_1InportIterable.html</filename>
  </compound>
  <compound kind="class">
    <name>InportIterable&lt; SeedPoint3DVector, false &gt;</name>
    <filename>classinviwo_1_1InportIterable.html</filename>
  </compound>
  <compound kind="class">
    <name>InportIterable&lt; SeedPointVector, false &gt;</name>
    <filename>classinviwo_1_1InportIterable.html</filename>
  </compound>
  <compound kind="class">
    <name>InportIterable&lt; std::vector&lt; std::shared_ptr&lt; Image &gt; &gt;, false &gt;</name>
    <filename>classinviwo_1_1InportIterable.html</filename>
  </compound>
  <compound kind="class">
    <name>InportIterable&lt; std::vector&lt; std::shared_ptr&lt; inviwo::Volume &gt; &gt;, false &gt;</name>
    <filename>classinviwo_1_1InportIterable.html</filename>
  </compound>
  <compound kind="class">
    <name>InportIterable&lt; std::vector&lt; std::shared_ptr&lt; Mesh &gt; &gt;, false &gt;</name>
    <filename>classinviwo_1_1InportIterable.html</filename>
  </compound>
  <compound kind="class">
    <name>InportIterable&lt; std::vector&lt; std::shared_ptr&lt; T &gt; &gt;, false &gt;</name>
    <filename>classinviwo_1_1InportIterable.html</filename>
  </compound>
  <compound kind="class">
    <name>InportIterable&lt; std::vector&lt; std::shared_ptr&lt; Volume &gt; &gt;, false &gt;</name>
    <filename>classinviwo_1_1InportIterable.html</filename>
  </compound>
  <compound kind="class">
    <name>InportIterable&lt; std::vector&lt; vec4 &gt;, false &gt;</name>
    <filename>classinviwo_1_1InportIterable.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::InportIterable&lt; T, false &gt;</name>
    <filename>classinviwo_1_1InportIterable_3_01T_00_01false_01_4.html</filename>
    <templarg></templarg>
    <class kind="class">inviwo::InportIterable&lt; T, false &gt;::const_iterator</class>
  </compound>
  <compound kind="class">
    <name>InportIterable&lt; Volume, false &gt;</name>
    <filename>classinviwo_1_1InportIterable.html</filename>
  </compound>
  <compound kind="class">
    <name>InportIterable&lt; VolumeSequence, false &gt;</name>
    <filename>classinviwo_1_1InportIterable.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::InputSelector</name>
    <filename>classinviwo_1_1InputSelector.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1InputSelector.html</anchorfile>
      <anchor>af2424e40b04af42293d001384a0295be</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::dispatching::filter::Integers</name>
    <filename>structinviwo_1_1dispatching_1_1filter_1_1Integers.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::IntegralLine</name>
    <filename>classinviwo_1_1IntegralLine.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::IntegralLineProperties</name>
    <filename>classinviwo_1_1IntegralLineProperties.html</filename>
    <base>inviwo::CompositeProperty</base>
  </compound>
  <compound kind="class">
    <name>inviwo::IntegralLineSet</name>
    <filename>classinviwo_1_1IntegralLineSet.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::IntegralLineTracer</name>
    <filename>classinviwo_1_1IntegralLineTracer.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::IntegralLineVectorToMesh</name>
    <filename>classinviwo_1_1IntegralLineVectorToMesh.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1IntegralLineVectorToMesh.html</anchorfile>
      <anchor>aa4020556e74a32f14ead4d1dc8fb2f0a</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::InteractionEvent</name>
    <filename>classinviwo_1_1InteractionEvent.html</filename>
    <base>inviwo::Event</base>
  </compound>
  <compound kind="class">
    <name>inviwo::InteractionHandler</name>
    <filename>classinviwo_1_1InteractionHandler.html</filename>
    <base>inviwo::EventListener</base>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>inviwo::Interpolation</name>
    <filename>classinviwo_1_1Interpolation.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::Interpolation</name>
    <filename>classinviwo_1_1animation_1_1Interpolation.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::InterpolationFactory</name>
    <filename>classinviwo_1_1animation_1_1InterpolationFactory.html</filename>
    <base>StandardFactory&lt; Interpolation, InterpolationFactoryObject &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::InterpolationFactoryObject</name>
    <filename>classinviwo_1_1animation_1_1InterpolationFactoryObject.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::InterpolationFactoryObjectTemplate</name>
    <filename>classinviwo_1_1animation_1_1InterpolationFactoryObjectTemplate.html</filename>
    <templarg></templarg>
    <base>inviwo::animation::InterpolationFactoryObject</base>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::InterpolationTyped</name>
    <filename>classinviwo_1_1animation_1_1InterpolationTyped.html</filename>
    <templarg></templarg>
    <base>inviwo::animation::Interpolation</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::IntersectionResult</name>
    <filename>structinviwo_1_1IntersectionResult.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::glui::IntMinMaxPropertyWidget</name>
    <filename>classinviwo_1_1glui_1_1IntMinMaxPropertyWidget.html</filename>
    <base>inviwo::glui::RangeSlider</base>
    <base>inviwo::PropertyWidget</base>
    <base>inviwo::PropertyObserver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1glui_1_1IntMinMaxPropertyWidget.html</anchorfile>
      <anchor>a7ddf560a6d0c9c5c3662483310576681</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::glui::IntPropertyWidget</name>
    <filename>classinviwo_1_1glui_1_1IntPropertyWidget.html</filename>
    <base>inviwo::glui::Slider</base>
    <base>inviwo::PropertyWidget</base>
    <base>inviwo::PropertyObserver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1glui_1_1IntPropertyWidget.html</anchorfile>
      <anchor>ae3502bafcd54e6bd62b84aab7c6a64c3</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::InvalidColCount</name>
    <filename>classinviwo_1_1plot_1_1InvalidColCount.html</filename>
    <base>inviwo::Exception</base>
  </compound>
  <compound kind="class">
    <name>inviwo::InvalidConversion</name>
    <filename>classinviwo_1_1InvalidConversion.html</filename>
    <base>inviwo::Exception</base>
  </compound>
  <compound kind="class">
    <name>inviwo::Inviwo_ABufferGL4</name>
    <filename>classinviwo_1_1Inviwo__ABufferGL4.html</filename>
    <class kind="class">inviwo::Inviwo_ABufferGL4::ABufferGLInteractionHandler</class>
    <member kind="function">
      <type>void</type>
      <name>abuffer_initABuffer</name>
      <anchorfile>classinviwo_1_1Inviwo__ABufferGL4.html</anchorfile>
      <anchor>aeb5bb6a12529948971e3ad531179d69f</anchor>
      <arglist>(ivec2 dim, bool forceInitialization=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>aBuffer_bindTextures</name>
      <anchorfile>classinviwo_1_1Inviwo__ABufferGL4.html</anchorfile>
      <anchor>a2adcdf02b5a04eaed3e48d6dd74ae03e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::Inviwo_ABufferGL4_LinkedList</name>
    <filename>classinviwo_1_1Inviwo__ABufferGL4__LinkedList.html</filename>
    <base>inviwo::Inviwo_ABufferGL4</base>
  </compound>
  <compound kind="class">
    <name>inviwo::InviwoAboutWindow</name>
    <filename>classinviwo_1_1InviwoAboutWindow.html</filename>
    <base>inviwo::InviwoDockWidget</base>
  </compound>
  <compound kind="class">
    <name>inviwo::InviwoApplication</name>
    <filename>classinviwo_1_1InviwoApplication.html</filename>
    <base>Singleton&lt; InviwoApplication &gt;</base>
    <base>inviwo::ResourceManagerObserver</base>
    <class kind="struct">inviwo::InviwoApplication::Queue</class>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>registerModules</name>
      <anchorfile>classinviwo_1_1InviwoApplication.html</anchorfile>
      <anchor>a9ca7aaa57b9a4b43608d48c3520cfe28</anchor>
      <arglist>(std::vector&lt; std::unique_ptr&lt; InviwoModuleFactoryObject &gt;&gt; modules)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>registerModules</name>
      <anchorfile>classinviwo_1_1InviwoApplication.html</anchorfile>
      <anchor>a093316c6b5f1880f059aea9339281c20</anchor>
      <arglist>(RuntimeModuleLoading)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getBasePath</name>
      <anchorfile>classinviwo_1_1InviwoApplication.html</anchorfile>
      <anchor>a53b38cd1c0ec6eb132935219af407d41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPath</name>
      <anchorfile>classinviwo_1_1InviwoApplication.html</anchorfile>
      <anchor>ab9a115f42d2ff0c11070d3dabfcacfa2</anchor>
      <arglist>(PathType pathType, const std::string &amp;suffix=&quot;&quot;, const bool &amp;createFolder=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addCallbackAction</name>
      <anchorfile>classinviwo_1_1InviwoApplication.html</anchorfile>
      <anchor>a9aaf15784a81c806450a037393d92378</anchor>
      <arglist>(ModuleCallbackAction *callbackAction)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::unique_ptr&lt; ModuleCallbackAction &gt; &gt; &amp;</type>
      <name>getCallbackActions</name>
      <anchorfile>classinviwo_1_1InviwoApplication.html</anchorfile>
      <anchor>a5e3fd9dc04ae5c68d838ddf96209d44a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Settings * &gt;</type>
      <name>getModuleSettings</name>
      <anchorfile>classinviwo_1_1InviwoApplication.html</anchorfile>
      <anchor>a9634c3f33a39dd33dfcfb20d31304466</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Capabilities * &gt;</type>
      <name>getModuleCapabilities</name>
      <anchorfile>classinviwo_1_1InviwoApplication.html</anchorfile>
      <anchor>a2c44a0d4445b12da14a0a356c8ebdb5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getPoolSize</name>
      <anchorfile>classinviwo_1_1InviwoApplication.html</anchorfile>
      <anchor>a52443656e26f81d8ee19222ea940be16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resizePool</name>
      <anchorfile>classinviwo_1_1InviwoApplication.html</anchorfile>
      <anchor>a3970f722202ce8fcc13a9dc84f5635bd</anchor>
      <arglist>(size_t newSize)</arglist>
    </member>
    <member kind="function">
      <type>ResourceManager *</type>
      <name>getResourceManager</name>
      <anchorfile>classinviwo_1_1InviwoApplication.html</anchorfile>
      <anchor>a425bb3fd4a768be0c58afd987a81a509</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UsageMode</type>
      <name>getApplicationUsageMode</name>
      <anchorfile>classinviwo_1_1InviwoApplication.html</anchorfile>
      <anchor>a385e4f18209ee6669483ffd09c85951e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setApplicationUsageMode</name>
      <anchorfile>classinviwo_1_1InviwoApplication.html</anchorfile>
      <anchor>a2f4220a0e88dea551218a36fbdd17e47</anchor>
      <arglist>(UsageMode mode)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::InviwoApplicationQt</name>
    <filename>classinviwo_1_1InviwoApplicationQt.html</filename>
    <base>inviwo::InviwoApplication</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::locale</type>
      <name>getUILocale</name>
      <anchorfile>classinviwo_1_1InviwoApplicationQt.html</anchorfile>
      <anchor>aa39d3a2ed75c1d6e573817c40fac4300</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMainWindow</name>
      <anchorfile>classinviwo_1_1InviwoApplicationQt.html</anchorfile>
      <anchor>a56aa511ce738f1232f21b9000b2577b7</anchor>
      <arglist>(QMainWindow *mainWindow)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resizePool</name>
      <anchorfile>classinviwo_1_1InviwoApplicationQt.html</anchorfile>
      <anchor>a99db1d81988507cf57b5a77bbf2f34e5</anchor>
      <arglist>(size_t newSize) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::InviwoCore</name>
    <filename>classinviwo_1_1InviwoCore.html</filename>
    <base>inviwo::InviwoModule</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getPath</name>
      <anchorfile>classinviwo_1_1InviwoCore.html</anchorfile>
      <anchor>a4694b0fe3c72a3a97d61b8d41b1620bc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::InviwoDockWidget</name>
    <filename>classinviwo_1_1InviwoDockWidget.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveState</name>
      <anchorfile>classinviwo_1_1InviwoDockWidget.html</anchorfile>
      <anchor>aab8aab6070f04eadcff287c0b09891fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadState</name>
      <anchorfile>classinviwo_1_1InviwoDockWidget.html</anchorfile>
      <anchor>a4440fee9e86b90f272eed4f3ece8f1ab</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::InviwoDockWidgetTitleBar</name>
    <filename>classinviwo_1_1InviwoDockWidgetTitleBar.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::InviwoEditMenu</name>
    <filename>classinviwo_1_1InviwoEditMenu.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::InviwoFileDialog</name>
    <filename>classinviwo_1_1InviwoFileDialog.html</filename>
    <base>inviwo::FileDialog</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentFile</name>
      <anchorfile>classinviwo_1_1InviwoFileDialog.html</anchorfile>
      <anchor>a62912594a026ac32e7c44e71486c93d9</anchor>
      <arglist>(const std::string &amp;filename) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentDirectory</name>
      <anchorfile>classinviwo_1_1InviwoFileDialog.html</anchorfile>
      <anchor>a49bf0918c6b7662eea14441991654ba0</anchor>
      <arglist>(const std::string &amp;path) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::InviwoMainWindow</name>
    <filename>classinviwo_1_1InviwoMainWindow.html</filename>
    <base>inviwo::NetworkEditorObserver</base>
  </compound>
  <compound kind="class">
    <name>inviwo::InviwoModule</name>
    <filename>classinviwo_1_1InviwoModule.html</filename>
    <member kind="function">
      <type></type>
      <name>InviwoModule</name>
      <anchorfile>classinviwo_1_1InviwoModule.html</anchorfile>
      <anchor>aa7b513b98e1e6365d1728bc25cb438bc</anchor>
      <arglist>(InviwoApplication *app, const std::string &amp;identifier)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getIdentifier</name>
      <anchorfile>classinviwo_1_1InviwoModule.html</anchorfile>
      <anchor>aba7dae2c9edc222b744c0154005239eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getDescription</name>
      <anchorfile>classinviwo_1_1InviwoModule.html</anchorfile>
      <anchor>ad401cf38e97e3d8616b9a20a34d6311f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getPath</name>
      <anchorfile>classinviwo_1_1InviwoModule.html</anchorfile>
      <anchor>a970181faa6c98c1a8d1ebfabfc50bd3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getVersion</name>
      <anchorfile>classinviwo_1_1InviwoModule.html</anchorfile>
      <anchor>acb4a4f03ecb65dc006aa643dd72dbb52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; VersionConverter &gt;</type>
      <name>getConverter</name>
      <anchorfile>classinviwo_1_1InviwoModule.html</anchorfile>
      <anchor>a3f0f67b99a74001557dd61de6822370d</anchor>
      <arglist>(int oldModuleVersion) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerCompositeProcessor</name>
      <anchorfile>classinviwo_1_1InviwoModule.html</anchorfile>
      <anchor>a25bef95c3334827308965b460862f3e6</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerPort</name>
      <anchorfile>classinviwo_1_1InviwoModule.html</anchorfile>
      <anchor>ad08053fc1d110a251aeb18311846a569</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerDefaultsForDataType</name>
      <anchorfile>classinviwo_1_1InviwoModule.html</anchorfile>
      <anchor>a0719d7138d0929334bcdcbdf328efbb8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::InviwoModuleFactoryObject</name>
    <filename>classinviwo_1_1InviwoModuleFactoryObject.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::InviwoModuleFactoryObjectTemplate</name>
    <filename>classinviwo_1_1InviwoModuleFactoryObjectTemplate.html</filename>
    <templarg></templarg>
    <base>inviwo::InviwoModuleFactoryObject</base>
  </compound>
  <compound kind="class">
    <name>inviwo::InviwoModuleLibraryObserver</name>
    <filename>classinviwo_1_1InviwoModuleLibraryObserver.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::InviwoQtEvent</name>
    <filename>classinviwo_1_1InviwoQtEvent.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::InviwoSetupInfo</name>
    <filename>structinviwo_1_1InviwoSetupInfo.html</filename>
    <base>inviwo::Serializable</base>
    <class kind="struct">inviwo::InviwoSetupInfo::ModuleSetupInfo</class>
  </compound>
  <compound kind="class">
    <name>inviwo::InviwoSplashScreen</name>
    <filename>classinviwo_1_1InviwoSplashScreen.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::is_callable</name>
    <filename>structinviwo_1_1util_1_1detail_1_1is__callable.html</filename>
    <templarg>F</templarg>
    <templarg>A</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::is_callable&lt; F(A...)&gt;</name>
    <filename>structinviwo_1_1util_1_1detail_1_1is__callable_3_01F_07A_8_8_8_08_4.html</filename>
    <templarg></templarg>
    <templarg>A</templarg>
    <base>is_callable&lt; F, A... &gt;</base>
  </compound>
  <compound kind="class">
    <name>is_callable&lt; F, A... &gt;</name>
    <filename>structinviwo_1_1util_1_1detail_1_1is__callable.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::is_callable_test</name>
    <filename>structinviwo_1_1util_1_1detail_1_1is__callable__test.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::is_constructible</name>
    <filename>structinviwo_1_1util_1_1is__constructible.html</filename>
    <templarg></templarg>
    <templarg>Arguments</templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::util::is_container</name>
    <filename>classinviwo_1_1util_1_1is__container.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::is_dereferenceable</name>
    <filename>structinviwo_1_1util_1_1is__dereferenceable.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::is_dereferenceable&lt; T, void_t&lt; decltype(*std::declval&lt; T &gt;())&gt;</name>
    <filename>structinviwo_1_1util_1_1is__dereferenceable_3_01T_00_01void__t_3_01decltype_07_5std_1_1declval_3_01T_01_4_07_08_08_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::is_floating_point</name>
    <filename>structinviwo_1_1util_1_1is__floating__point.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::is_floating_point&lt; half_float::half &gt;</name>
    <filename>structinviwo_1_1util_1_1is__floating__point_3_01half__float_1_1half_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::is_scalar_conv</name>
    <filename>structinviwo_1_1util_1_1detail_1_1is__scalar__conv.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::is_signed_int</name>
    <filename>structinviwo_1_1util_1_1detail_1_1is__signed__int.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::util::is_stream_insertable</name>
    <filename>classinviwo_1_1util_1_1is__stream__insertable.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::is_string</name>
    <filename>structinviwo_1_1util_1_1detail_1_1is__string.html</filename>
    <templarg>T</templarg>
    <templarg>Enable</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::is_string</name>
    <filename>structinviwo_1_1util_1_1is__string.html</filename>
    <templarg></templarg>
    <base>is_string&lt; T &gt;</base>
  </compound>
  <compound kind="class">
    <name>is_string&lt; T &gt;</name>
    <filename>structinviwo_1_1util_1_1detail_1_1is__string.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::is_string&lt; T, void_t&lt; typename T::value_type, typename T::traits_type, typename T::allocator_type &gt; &gt;</name>
    <filename>structinviwo_1_1util_1_1detail_1_1is__string_3_01T_00_01void__t_3_01typename_01T_1_1value__type_961b296ba46b449b6e0443a9262a8d87.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::is_unsigned_int</name>
    <filename>structinviwo_1_1util_1_1detail_1_1is__unsigned__int.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::ISORaycaster</name>
    <filename>classinviwo_1_1ISORaycaster.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1ISORaycaster.html</anchorfile>
      <anchor>a5ed98a1d1a7550bd0dcbed27c6a7efb7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1ISORaycaster.html</anchorfile>
      <anchor>abd293ac80fc9e174e857986c2f2e2e98</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::ContainerWrapper::Item</name>
    <filename>structinviwo_1_1ContainerWrapper_1_1Item.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::iter_range</name>
    <filename>structinviwo_1_1util_1_1iter__range.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::sequence::iterator</name>
    <filename>structinviwo_1_1util_1_1sequence_1_1iterator.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detailzip::iterator_tools</name>
    <filename>structinviwo_1_1util_1_1detailzip_1_1iterator__tools.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>iterator_tools&lt; Iterables &gt;</name>
    <filename>structinviwo_1_1util_1_1detailzip_1_1iterator__tools.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detailzip::iterator_tools&lt; std::tuple&lt; Ts... &gt; &gt;</name>
    <filename>structinviwo_1_1util_1_1detailzip_1_1iterator__tools_3_01std_1_1tuple_3_01Ts_8_8_8_01_4_01_4.html</filename>
    <templarg>Ts</templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::IvfSequenceVolumeReader</name>
    <filename>classinviwo_1_1IvfSequenceVolumeReader.html</filename>
    <base>DataReaderType&lt; VolumeSequence &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; VolumeSequence &gt;</type>
      <name>readData</name>
      <anchorfile>classinviwo_1_1IvfSequenceVolumeReader.html</anchorfile>
      <anchor>ac9fb3a887cdc552b4af094de0052ad87</anchor>
      <arglist>(const std::string &amp;filePath) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::IvfSequenceVolumeWriter</name>
    <filename>classinviwo_1_1IvfSequenceVolumeWriter.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeData</name>
      <anchorfile>classinviwo_1_1IvfSequenceVolumeWriter.html</anchorfile>
      <anchor>aca401950c6c1af5a2139c9cd3fd0ee31</anchor>
      <arglist>(const VolumeSequence *volumes, const std::string filePath) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeData</name>
      <anchorfile>classinviwo_1_1IvfSequenceVolumeWriter.html</anchorfile>
      <anchor>ac88f2c284edfcb6683fbdf94aaba3a55</anchor>
      <arglist>(const VolumeSequence *volumes, std::string name, std::string path, std::string reltivePathToTimesteps=&quot;&quot;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::IvfVolumeReader</name>
    <filename>classinviwo_1_1IvfVolumeReader.html</filename>
    <base>DataReaderType&lt; Volume &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::IvfVolumeWriter</name>
    <filename>classinviwo_1_1IvfVolumeWriter.html</filename>
    <base>DataWriterType&lt; Volume &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::IvwComboBox</name>
    <filename>classinviwo_1_1IvwComboBox.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::IvwLineEdit</name>
    <filename>classinviwo_1_1IvwLineEdit.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::IvwPushButton</name>
    <filename>classinviwo_1_1IvwPushButton.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::Jacobian2D</name>
    <filename>classinviwo_1_1Jacobian2D.html</filename>
    <base>inviwo::ImageGLProcessor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1Jacobian2D.html</anchorfile>
      <anchor>af1115e1a688ca606128957a9d21ac354</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classinviwo_1_1Jacobian2D.html</anchorfile>
      <anchor>adb4f8c02b88713e05c99d52b436b39be</anchor>
      <arglist>(TextureUnitContainer &amp;cont) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::KDNode</name>
    <filename>classinviwo_1_1KDNode.html</filename>
    <templarg>N</templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::KDNodeDistWrapper</name>
    <filename>structinviwo_1_1KDNodeDistWrapper.html</filename>
    <templarg>N</templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::KDTree</name>
    <filename>classinviwo_1_1KDTree.html</filename>
    <templarg>N</templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::KDTreeGlm</name>
    <filename>classinviwo_1_1KDTreeGlm.html</filename>
    <templarg>N</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>inviwo::KDTree</base>
  </compound>
  <compound kind="class">
    <name>inviwo::util::KeepTrueWhileInScope</name>
    <filename>classinviwo_1_1util_1_1KeepTrueWhileInScope.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::KernelManager</name>
    <filename>classinviwo_1_1KernelManager.html</filename>
    <base>Singleton&lt; KernelManager &gt;</base>
    <base>inviwo::FileObserver</base>
    <class kind="struct">inviwo::KernelManager::ProgramIdentifier</class>
    <member kind="typedef">
      <type>std::multimap&lt; std::string, ProgramIdentifier &gt;</type>
      <name>ProgramMap</name>
      <anchorfile>classinviwo_1_1KernelManager.html</anchorfile>
      <anchor>a24e1fe0414266ee9e35df4202814dfa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::multimap&lt; cl::Program *, cl::Kernel * &gt;</type>
      <name>KernelMap</name>
      <anchorfile>classinviwo_1_1KernelManager.html</anchorfile>
      <anchor>a2c04dfefa173ca628e2be6d3d7fe5834</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::multimap&lt; cl::Kernel *, KernelOwner * &gt;</type>
      <name>KernelOwnerMap</name>
      <anchorfile>classinviwo_1_1KernelManager.html</anchorfile>
      <anchor>a87e87ec9c769c10c4526482e2978b13f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>cl::Program *</type>
      <name>buildProgram</name>
      <anchorfile>classinviwo_1_1KernelManager.html</anchorfile>
      <anchor>a6e2c1eeaf2e1281af48fcd6ca4c959a3</anchor>
      <arglist>(const std::string &amp;fileName, const std::string &amp;header, const std::string &amp;defines, bool &amp;wasBuilt)</arglist>
    </member>
    <member kind="function">
      <type>cl::Kernel *</type>
      <name>getKernel</name>
      <anchorfile>classinviwo_1_1KernelManager.html</anchorfile>
      <anchor>a7fb1e07185a9183185ae5c6021b2a9fe</anchor>
      <arglist>(cl::Program *program, const std::string &amp;kernelName, KernelOwner *owner)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fileChanged</name>
      <anchorfile>classinviwo_1_1KernelManager.html</anchorfile>
      <anchor>adefd157b3ad07c41af374dec1bb2317e</anchor>
      <arglist>(const std::string &amp;fileName) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classinviwo_1_1KernelManager.html</anchorfile>
      <anchor>a8864c1e2802413760ed7e995130e95f7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::KernelObservable</name>
    <filename>classinviwo_1_1KernelObservable.html</filename>
    <base>Observable&lt; KernelObserver &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::KernelObserver</name>
    <filename>classinviwo_1_1KernelObserver.html</filename>
    <base>inviwo::Observer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onKernelCompiled</name>
      <anchorfile>classinviwo_1_1KernelObserver.html</anchorfile>
      <anchor>ab6938a24dcdc4f85c667bec681a84e51</anchor>
      <arglist>(const cl::Kernel *kernel)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::KernelOwner</name>
    <filename>classinviwo_1_1KernelOwner.html</filename>
    <base>inviwo::KernelObservable</base>
    <member kind="function">
      <type>cl::Kernel *</type>
      <name>addKernel</name>
      <anchorfile>classinviwo_1_1KernelOwner.html</anchorfile>
      <anchor>aaa09f09f51860985bd065a66ec4b5085</anchor>
      <arglist>(const std::string &amp;fileName, const std::string &amp;kernelName, const std::string &amp;header=&quot;&quot;, const std::string &amp;defines=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeKernel</name>
      <anchorfile>classinviwo_1_1KernelOwner.html</anchorfile>
      <anchor>afd65247a60f442ed4a858378ed27fa48</anchor>
      <arglist>(cl::Kernel *kernel)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::KeyboardEvent</name>
    <filename>classinviwo_1_1KeyboardEvent.html</filename>
    <base>inviwo::InteractionEvent</base>
  </compound>
  <compound kind="class">
    <name>inviwo::KeyboardEventMatcher</name>
    <filename>classinviwo_1_1KeyboardEventMatcher.html</filename>
    <base>inviwo::EventMatcher</base>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::Keyframe</name>
    <filename>classinviwo_1_1animation_1_1Keyframe.html</filename>
    <base>inviwo::Serializable</base>
    <base>inviwo::animation::KeyframeObservable</base>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::KeyframeObservable</name>
    <filename>classinviwo_1_1animation_1_1KeyframeObservable.html</filename>
    <base>Observable&lt; KeyframeObserver &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::KeyframeObserver</name>
    <filename>classinviwo_1_1animation_1_1KeyframeObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::KeyframeQt</name>
    <filename>classinviwo_1_1animation_1_1KeyframeQt.html</filename>
    <base>inviwo::animation::KeyframeObserver</base>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classinviwo_1_1animation_1_1KeyframeQt.html</anchorfile>
      <anchor>ad49e08c48ecf2b805e400929db098a70</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::animation::KeyframeQtLock</name>
    <filename>structinviwo_1_1animation_1_1KeyframeQtLock.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::KeyframeSequence</name>
    <filename>classinviwo_1_1animation_1_1KeyframeSequence.html</filename>
    <base>inviwo::Serializable</base>
    <base>inviwo::animation::KeyframeSequenceObserverble</base>
    <base>inviwo::animation::KeyframeObserver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KeyframeSequence</name>
      <anchorfile>classinviwo_1_1animation_1_1KeyframeSequence.html</anchorfile>
      <anchor>a18accdea573d2f82cb15eec99345f54a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>size</name>
      <anchorfile>classinviwo_1_1animation_1_1KeyframeSequence.html</anchorfile>
      <anchor>a9511c257cbfac03f63c998eb25628802</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>remove</name>
      <anchorfile>classinviwo_1_1animation_1_1KeyframeSequence.html</anchorfile>
      <anchor>a1284ec1932b68daacbb380787e95fd8d</anchor>
      <arglist>(size_t i)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classinviwo_1_1animation_1_1KeyframeSequence.html</anchorfile>
      <anchor>aea08ec05cdd6a2ef25ba96599627eccf</anchor>
      <arglist>(const Keyframe &amp;key)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::KeyframeSequenceObserver</name>
    <filename>classinviwo_1_1animation_1_1KeyframeSequenceObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::KeyframeSequenceObserverble</name>
    <filename>classinviwo_1_1animation_1_1KeyframeSequenceObserverble.html</filename>
    <base>Observable&lt; KeyframeSequenceObserver &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::KeyframeSequenceQt</name>
    <filename>classinviwo_1_1animation_1_1KeyframeSequenceQt.html</filename>
    <base>inviwo::animation::KeyframeSequenceObserver</base>
    <member kind="function" protection="protected">
      <type>KeyframeQt *</type>
      <name>getKeyframeQt</name>
      <anchorfile>classinviwo_1_1animation_1_1KeyframeSequenceQt.html</anchorfile>
      <anchor>a95d3f1687fff93d2ca14213919717524</anchor>
      <arglist>(const Keyframe *keyframe) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::KeyframeSequenceTyped</name>
    <filename>classinviwo_1_1animation_1_1KeyframeSequenceTyped.html</filename>
    <templarg></templarg>
    <base>inviwo::animation::KeyframeSequence</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KeyframeSequenceTyped</name>
      <anchorfile>classinviwo_1_1animation_1_1KeyframeSequenceTyped.html</anchorfile>
      <anchor>a12e4e6714b92507073d6a1398d7b39d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>size</name>
      <anchorfile>classinviwo_1_1animation_1_1KeyframeSequenceTyped.html</anchorfile>
      <anchor>af3fcefa50b3586db14ea15e14bf74cf7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remove</name>
      <anchorfile>classinviwo_1_1animation_1_1KeyframeSequenceTyped.html</anchorfile>
      <anchor>a84b4a47503ab1bfbba339534e1dd6365</anchor>
      <arglist>(size_t i) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classinviwo_1_1animation_1_1KeyframeSequenceTyped.html</anchorfile>
      <anchor>ad33c098bfb1cfcbb8d45b306d738e4d7</anchor>
      <arglist>(const Keyframe &amp;key) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classinviwo_1_1animation_1_1KeyframeSequenceTyped.html</anchorfile>
      <anchor>a6e5f21fefcfd8bc75767599626a0db1f</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::xml::Kind</name>
    <filename>classinviwo_1_1xml_1_1Kind.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::LabelGraphicsItem</name>
    <filename>classinviwo_1_1LabelGraphicsItem.html</filename>
    <base>inviwo::LabelGraphicsItemObservable</base>
  </compound>
  <compound kind="class">
    <name>inviwo::LabelGraphicsItemObservable</name>
    <filename>classinviwo_1_1LabelGraphicsItemObservable.html</filename>
    <base>Observable&lt; LabelGraphicsItemObserver &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::LabelGraphicsItemObserver</name>
    <filename>classinviwo_1_1LabelGraphicsItemObserver.html</filename>
    <base>inviwo::Observer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onLabelGraphicsItemChanged</name>
      <anchorfile>classinviwo_1_1LabelGraphicsItemObserver.html</anchorfile>
      <anchor>adecc9e3c7c5f7019ee64d3811ed42680</anchor>
      <arglist>(LabelGraphicsItem *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::Layer</name>
    <filename>classinviwo_1_1Layer.html</filename>
    <base>Data&lt; Layer, LayerRepresentation &gt;</base>
    <base>StructuredGridEntity&lt; 2 &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDimensions</name>
      <anchorfile>classinviwo_1_1Layer.html</anchorfile>
      <anchor>aab732a892ce730f3af8dd26b1bfe26d7</anchor>
      <arglist>(const size2_t &amp;dim) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyRepresentationsTo</name>
      <anchorfile>classinviwo_1_1Layer.html</anchorfile>
      <anchor>accdfb10562b9ab832a47c5ed953853df</anchor>
      <arglist>(Layer *target)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; std::vector&lt; unsigned char &gt; &gt;</type>
      <name>getAsCodedBuffer</name>
      <anchorfile>classinviwo_1_1Layer.html</anchorfile>
      <anchor>aa53859442f45e66338fd859d617ea0a4</anchor>
      <arglist>(const std::string &amp;fileExtension) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSwizzleMask</name>
      <anchorfile>classinviwo_1_1Layer.html</anchorfile>
      <anchor>a2af0ae316f42a135a2ff85f51fe561cf</anchor>
      <arglist>(const SwizzleMask &amp;mask)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::LayerCL</name>
    <filename>classinviwo_1_1LayerCL.html</filename>
    <base>inviwo::LayerCLBase</base>
    <base>inviwo::LayerRepresentation</base>
    <member kind="function">
      <type>void</type>
      <name>download</name>
      <anchorfile>classinviwo_1_1LayerCL.html</anchorfile>
      <anchor>a3783d4181fdadbbca0692b302fe63d82</anchor>
      <arglist>(void *data) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDimensions</name>
      <anchorfile>classinviwo_1_1LayerCL.html</anchorfile>
      <anchor>ab7e8e18900e54a42f354112563d11562</anchor>
      <arglist>(size2_t dimensions) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>copyRepresentationsTo</name>
      <anchorfile>classinviwo_1_1LayerCL.html</anchorfile>
      <anchor>a2cf3b212c58c07767b2ccd3ceb4e357f</anchor>
      <arglist>(LayerRepresentation *target) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual dvec4</type>
      <name>readPixel</name>
      <anchorfile>classinviwo_1_1LayerCL.html</anchorfile>
      <anchor>a19ed616d9498552e514bcf718ba8e497</anchor>
      <arglist>(size2_t pos, LayerType layer, size_t index=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSwizzleMask</name>
      <anchorfile>classinviwo_1_1LayerCL.html</anchorfile>
      <anchor>a2590dac34a2e6541183e157629ca15e4</anchor>
      <arglist>(const SwizzleMask &amp;mask) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::LayerCL2RAMConverter</name>
    <filename>classinviwo_1_1LayerCL2RAMConverter.html</filename>
    <base>RepresentationConverterType&lt; LayerRepresentation, LayerCL, LayerRAM &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::LayerCLBase</name>
    <filename>classinviwo_1_1LayerCLBase.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::LayerCLGL</name>
    <filename>classinviwo_1_1LayerCLGL.html</filename>
    <base>inviwo::LayerCLBase</base>
    <base>inviwo::LayerRepresentation</base>
    <base>inviwo::TextureObserver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDimensions</name>
      <anchorfile>classinviwo_1_1LayerCLGL.html</anchorfile>
      <anchor>adad2e6f3e4638bbbffd1000ac073c006</anchor>
      <arglist>(size2_t dimensions) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>copyRepresentationsTo</name>
      <anchorfile>classinviwo_1_1LayerCLGL.html</anchorfile>
      <anchor>af165027566d5c7b69fb0974b9effc85f</anchor>
      <arglist>(LayerRepresentation *target) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notifyBeforeTextureInitialization</name>
      <anchorfile>classinviwo_1_1LayerCLGL.html</anchorfile>
      <anchor>ad648d2a7fdb59ece30d8612559063c9f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notifyAfterTextureInitialization</name>
      <anchorfile>classinviwo_1_1LayerCLGL.html</anchorfile>
      <anchor>a4ad101009ee8c088b1bba0b82a989c0a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual dvec4</type>
      <name>readPixel</name>
      <anchorfile>classinviwo_1_1LayerCLGL.html</anchorfile>
      <anchor>a6baecc96305d3beac2e9e8265eb7bc77</anchor>
      <arglist>(size2_t pos, LayerType layer, size_t index=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSwizzleMask</name>
      <anchorfile>classinviwo_1_1LayerCLGL.html</anchorfile>
      <anchor>a5f67945b858bab901f459b9df04ad51c</anchor>
      <arglist>(const SwizzleMask &amp;mask) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Texture2D &gt;</type>
      <name>texture_</name>
      <anchorfile>classinviwo_1_1LayerCLGL.html</anchorfile>
      <anchor>a743b86fe34f8723f8ea319cf86f5afec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; cl::Image2DGL &gt;</type>
      <name>clImage_</name>
      <anchorfile>classinviwo_1_1LayerCLGL.html</anchorfile>
      <anchor>a763a08fd1360a348d8a8d7ac0922e022</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::LayerCLGL2CLConverter</name>
    <filename>classinviwo_1_1LayerCLGL2CLConverter.html</filename>
    <base>RepresentationConverterType&lt; LayerRepresentation, LayerCLGL, LayerCL &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::LayerCLGL2GLConverter</name>
    <filename>classinviwo_1_1LayerCLGL2GLConverter.html</filename>
    <base>RepresentationConverterType&lt; LayerRepresentation, LayerCLGL, LayerGL &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::LayerCLGL2RAMConverter</name>
    <filename>classinviwo_1_1LayerCLGL2RAMConverter.html</filename>
    <base>RepresentationConverterType&lt; LayerRepresentation, LayerCLGL, LayerRAM &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::LayerCLResizer</name>
    <filename>classinviwo_1_1LayerCLResizer.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resize</name>
      <anchorfile>classinviwo_1_1LayerCLResizer.html</anchorfile>
      <anchor>af7f64a7c82287970a4fe236497a643af</anchor>
      <arglist>(const cl::Image &amp;src, const cl::Image &amp;dst, const size2_t &amp;resizeToDimension)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::LayerDisk</name>
    <filename>classinviwo_1_1LayerDisk.html</filename>
    <base>inviwo::LayerRepresentation</base>
    <base>DiskRepresentation&lt; LayerRepresentation &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDimensions</name>
      <anchorfile>classinviwo_1_1LayerDisk.html</anchorfile>
      <anchor>a0fe1a13335d2062452af209886564f33</anchor>
      <arglist>(size2_t dimensions) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>copyRepresentationsTo</name>
      <anchorfile>classinviwo_1_1LayerDisk.html</anchorfile>
      <anchor>a5a4086d728e58a091a6442bac7e995ed</anchor>
      <arglist>(LayerRepresentation *target) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDataFormat</name>
      <anchorfile>classinviwo_1_1LayerDisk.html</anchorfile>
      <anchor>a5c4ba5335bfde966e4452588197f4558</anchor>
      <arglist>(const DataFormatBase *format)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSwizzleMask</name>
      <anchorfile>classinviwo_1_1LayerDisk.html</anchorfile>
      <anchor>a3b4460238d9163d84493a1ec6f3eb93d</anchor>
      <arglist>(const SwizzleMask &amp;mask) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::LayerDisk2RAMConverter</name>
    <filename>classinviwo_1_1LayerDisk2RAMConverter.html</filename>
    <base>RepresentationConverterType&lt; LayerRepresentation, LayerDisk, LayerRAM &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; LayerRAM &gt;</type>
      <name>createFrom</name>
      <anchorfile>classinviwo_1_1LayerDisk2RAMConverter.html</anchorfile>
      <anchor>ad0b81953edb2b8085beeeeeebf686197</anchor>
      <arglist>(std::shared_ptr&lt; const LayerDisk &gt; source) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::LayerDistanceTransformRAM</name>
    <filename>classinviwo_1_1LayerDistanceTransformRAM.html</filename>
    <base>inviwo::Processor</base>
    <base>inviwo::ProgressBarOwner</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>classinviwo_1_1LayerDistanceTransformRAM.html</anchorfile>
      <anchor>a21c4f8a9656894a09c6bdc793c8b9504</anchor>
      <arglist>(InvalidationLevel invalidationLevel, Property *source=nullptr) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1LayerDistanceTransformRAM.html</anchorfile>
      <anchor>a08ec85db7f51cee410e478203a821858</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::LayerGL</name>
    <filename>classinviwo_1_1LayerGL.html</filename>
    <base>inviwo::LayerRepresentation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDimensions</name>
      <anchorfile>classinviwo_1_1LayerGL.html</anchorfile>
      <anchor>adb3b40930fff2362b5f92d2be0d39192</anchor>
      <arglist>(size2_t dimensions) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSwizzleMask</name>
      <anchorfile>classinviwo_1_1LayerGL.html</anchorfile>
      <anchor>ac531afd934c814325aeb62ad37dac6b6</anchor>
      <arglist>(const SwizzleMask &amp;mask) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>copyRepresentationsTo</name>
      <anchorfile>classinviwo_1_1LayerGL.html</anchorfile>
      <anchor>af34930944f59f986017ff23ab9308143</anchor>
      <arglist>(LayerRepresentation *) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::LayerGL2CLGLConverter</name>
    <filename>classinviwo_1_1LayerGL2CLGLConverter.html</filename>
    <base>RepresentationConverterType&lt; LayerRepresentation, LayerGL, LayerCLGL &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::LayerGL2RAMConverter</name>
    <filename>classinviwo_1_1LayerGL2RAMConverter.html</filename>
    <base>RepresentationConverterType&lt; LayerRepresentation, LayerGL, LayerRAM &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::LayerRAM</name>
    <filename>classinviwo_1_1LayerRAM.html</filename>
    <base>inviwo::LayerRepresentation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>copyRepresentationsTo</name>
      <anchorfile>classinviwo_1_1LayerRAM.html</anchorfile>
      <anchor>af359ef7b19563e2eace18400aa493b1f</anchor>
      <arglist>(LayerRepresentation *) const override</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>dispatch</name>
      <anchorfile>classinviwo_1_1LayerRAM.html</anchorfile>
      <anchor>a61ddfa879cd406d29fa8d86549a2f965</anchor>
      <arglist>(Callable &amp;&amp;callable, Args &amp;&amp;...args) -&gt; Result</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>dispatch</name>
      <anchorfile>classinviwo_1_1LayerRAM.html</anchorfile>
      <anchor>a2f61a81c62db76edf20291ecb62d4d22</anchor>
      <arglist>(Callable &amp;&amp;callable, Args &amp;&amp;...args) const -&gt; Result</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::LayerRAM2CLConverter</name>
    <filename>classinviwo_1_1LayerRAM2CLConverter.html</filename>
    <base>RepresentationConverterType&lt; LayerRepresentation, LayerRAM, LayerCL &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::LayerRAM2GLConverter</name>
    <filename>classinviwo_1_1LayerRAM2GLConverter.html</filename>
    <base>RepresentationConverterType&lt; LayerRepresentation, LayerRAM, LayerGL &gt;</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::detail::LayerRamConstDispatcher</name>
    <filename>structinviwo_1_1detail_1_1LayerRamConstDispatcher.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::detail::LayerRamDispatcher</name>
    <filename>structinviwo_1_1detail_1_1LayerRamDispatcher.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::LayerRAMPrecision</name>
    <filename>classinviwo_1_1LayerRAMPrecision.html</filename>
    <templarg></templarg>
    <base>inviwo::LayerRAM</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDimensions</name>
      <anchorfile>classinviwo_1_1LayerRAMPrecision.html</anchorfile>
      <anchor>a76f01c657ac41421f9823784a4267962</anchor>
      <arglist>(size2_t dimensions) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSwizzleMask</name>
      <anchorfile>classinviwo_1_1LayerRAMPrecision.html</anchorfile>
      <anchor>a8b6cb028f4e807c9891e85e923bd7712</anchor>
      <arglist>(const SwizzleMask &amp;mask) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::LayerRepresentation</name>
    <filename>classinviwo_1_1LayerRepresentation.html</filename>
    <base>DataRepresentation&lt; Layer &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setDimensions</name>
      <anchorfile>classinviwo_1_1LayerRepresentation.html</anchorfile>
      <anchor>a06dff58e7e282066fda8d97508f45e24</anchor>
      <arglist>(size2_t dimensions)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setSwizzleMask</name>
      <anchorfile>classinviwo_1_1LayerRepresentation.html</anchorfile>
      <anchor>a96d5afa38680787916a41f72002499d3</anchor>
      <arglist>(const SwizzleMask &amp;mask)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>copyRepresentationsTo</name>
      <anchorfile>classinviwo_1_1LayerRepresentation.html</anchorfile>
      <anchor>afe2eb7583e5a6eb84b5140225f785d47</anchor>
      <arglist>(LayerRepresentation *) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::glui::Layout</name>
    <filename>classinviwo_1_1glui_1_1Layout.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setScalingFactor</name>
      <anchorfile>classinviwo_1_1glui_1_1Layout.html</anchorfile>
      <anchor>a3ee31e729b24f8c1cf345f9c983f9d18</anchor>
      <arglist>(double factor)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classinviwo_1_1glui_1_1Layout.html</anchorfile>
      <anchor>a1eb8c52e49c7a57eb0a5781fbc3ad1f7</anchor>
      <arglist>(const ivec2 &amp;topLeft, const size2_t &amp;canvasDim)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addElement</name>
      <anchorfile>classinviwo_1_1glui_1_1Layout.html</anchorfile>
      <anchor>a22a462b19dd887b494a732f508152bd4</anchor>
      <arglist>(Element &amp;element)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>removeElement</name>
      <anchorfile>classinviwo_1_1glui_1_1Layout.html</anchorfile>
      <anchor>af58aa1a0447a712864d76f692b6c381f</anchor>
      <arglist>(Element &amp;element)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ivec4</type>
      <name>margins_</name>
      <anchorfile>classinviwo_1_1glui_1_1Layout.html</anchorfile>
      <anchor>a797d85869ac8bbb03f8c9a266c1129d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::LibrarySearchDirs</name>
    <filename>classinviwo_1_1LibrarySearchDirs.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::LIC2D</name>
    <filename>classinviwo_1_1LIC2D.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1LIC2D.html</anchorfile>
      <anchor>a7ad985f4b8b7a9d9761e7a7d08ec1cb3</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::LIC3D</name>
    <filename>classinviwo_1_1LIC3D.html</filename>
    <base>inviwo::VolumeGLProcessor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classinviwo_1_1LIC3D.html</anchorfile>
      <anchor>a0bab90ed847d3e052596768a6ee371fb</anchor>
      <arglist>(TextureUnitContainer &amp;cont) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postProcess</name>
      <anchorfile>classinviwo_1_1LIC3D.html</anchorfile>
      <anchor>ab97db63488d44fb12104c1f8f8577cbd</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::LicenseInfo</name>
    <filename>classinviwo_1_1LicenseInfo.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::LightingRaycaster</name>
    <filename>classinviwo_1_1LightingRaycaster.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1LightingRaycaster.html</anchorfile>
      <anchor>a86fe372458897ed6292d754cc2202744</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1LightingRaycaster.html</anchorfile>
      <anchor>a3e1dcc8db275d38bfa179402f2722870</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilcl::LightParameters</name>
    <filename>structinviwo_1_1utilcl_1_1LightParameters.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::LightPositionWidgetQt</name>
    <filename>classinviwo_1_1LightPositionWidgetQt.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::LightPropertyWidgetQt</name>
    <filename>classinviwo_1_1LightPropertyWidgetQt.html</filename>
    <base>inviwo::PropertyWidgetQt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1LightPropertyWidgetQt.html</anchorfile>
      <anchor>a5a486ebe15ac3e3991d709af1385ae07</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::LightSource</name>
    <filename>classinviwo_1_1LightSource.html</filename>
    <base>SpatialEntity&lt; 3 &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual vec3</type>
      <name>getPower</name>
      <anchorfile>classinviwo_1_1LightSource.html</anchorfile>
      <anchor>a478d8cf3831f0a8ba5dfcbcfb9e22799</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>const vec3</type>
      <name>getIntensity</name>
      <anchorfile>classinviwo_1_1LightSource.html</anchorfile>
      <anchor>a20d5a93a506111c6e21c989b676bb5b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIntensity</name>
      <anchorfile>classinviwo_1_1LightSource.html</anchorfile>
      <anchor>aa1a0f59af38c4308968f44505d00e5b3</anchor>
      <arglist>(const vec3 &amp;intensity)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFieldOfView</name>
      <anchorfile>classinviwo_1_1LightSource.html</anchorfile>
      <anchor>a140e4c55d934b878073412e9e638e35b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const vec2 &amp;</type>
      <name>getSize</name>
      <anchorfile>classinviwo_1_1LightSource.html</anchorfile>
      <anchor>a2936fea74ceca20f3ec32b50f449e266</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classinviwo_1_1LightSource.html</anchorfile>
      <anchor>a5d0a4c8c5f9ce80941a7cc315198b58d</anchor>
      <arglist>(const vec2 &amp;newSize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classinviwo_1_1LightSource.html</anchorfile>
      <anchor>aafd9c7b6c9736734506666d91d764c05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnabled</name>
      <anchorfile>classinviwo_1_1LightSource.html</anchorfile>
      <anchor>a3a81743833db86d3579c4f107a05f93f</anchor>
      <arglist>(bool enable)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::LightVolumeGL</name>
    <filename>classinviwo_1_1LightVolumeGL.html</filename>
    <base>inviwo::Processor</base>
    <class kind="struct">inviwo::LightVolumeGL::PropagationParameters</class>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1LightVolumeGL.html</anchorfile>
      <anchor>ad31b5c9438c1227ba8e9a3b771bac365</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::LinearInterpolation</name>
    <filename>classinviwo_1_1animation_1_1LinearInterpolation.html</filename>
    <templarg></templarg>
    <base>inviwo::animation::InterpolationTyped</base>
  </compound>
  <compound kind="class">
    <name>inviwo::LineEditQt</name>
    <filename>classinviwo_1_1LineEditQt.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::LineRenderer</name>
    <filename>classinviwo_1_1LineRenderer.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1LineRenderer.html</anchorfile>
      <anchor>af74f209935509f1c609070a20e5c2316</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1LineRenderer.html</anchorfile>
      <anchor>abb2b35073cac4b274b8b075acee0c8a9</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::LinkConnectionDragGraphicsItem</name>
    <filename>classinviwo_1_1LinkConnectionDragGraphicsItem.html</filename>
    <base>inviwo::LinkGraphicsItem</base>
  </compound>
  <compound kind="class">
    <name>inviwo::LinkConnectionGraphicsItem</name>
    <filename>classinviwo_1_1LinkConnectionGraphicsItem.html</filename>
    <base>inviwo::LinkConnectionDragGraphicsItem</base>
  </compound>
  <compound kind="class">
    <name>inviwo::LinkDialog</name>
    <filename>classinviwo_1_1LinkDialog.html</filename>
    <base>inviwo::InviwoDockWidget</base>
  </compound>
  <compound kind="class">
    <name>inviwo::LinkDialogGraphicsScene</name>
    <filename>classinviwo_1_1LinkDialogGraphicsScene.html</filename>
    <base>inviwo::ProcessorNetworkObserver</base>
  </compound>
  <compound kind="class">
    <name>inviwo::LinkDialogGraphicsView</name>
    <filename>classinviwo_1_1LinkDialogGraphicsView.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::LinkDialogProcessorGraphicsItem</name>
    <filename>classinviwo_1_1LinkDialogProcessorGraphicsItem.html</filename>
    <base>GraphicsItemData&lt; Processor &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::LinkDialogPropertyGraphicsItem</name>
    <filename>classinviwo_1_1LinkDialogPropertyGraphicsItem.html</filename>
    <base>GraphicsItemData&lt; Property &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::LinkDialogTreeItem</name>
    <filename>classinviwo_1_1LinkDialogTreeItem.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::LinkEvaluator</name>
    <filename>classinviwo_1_1LinkEvaluator.html</filename>
    <member kind="function">
      <type>std::vector&lt; Property * &gt;</type>
      <name>getPropertiesLinkedTo</name>
      <anchorfile>classinviwo_1_1LinkEvaluator.html</anchorfile>
      <anchor>acb20c35d0436dec150e552872ac38c55</anchor>
      <arglist>(Property *property)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::LinkGraphicsItem</name>
    <filename>classinviwo_1_1LinkGraphicsItem.html</filename>
    <base>inviwo::EditorGraphicsItem</base>
    <member kind="function">
      <type>void</type>
      <name>paint</name>
      <anchorfile>classinviwo_1_1LinkGraphicsItem.html</anchorfile>
      <anchor>ab777631bcc0c17ebcce07d47bfc1143b</anchor>
      <arglist>(QPainter *p, const QStyleOptionGraphicsItem *options, QWidget *widget)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::LinkSettings</name>
    <filename>classinviwo_1_1LinkSettings.html</filename>
    <base>inviwo::Settings</base>
    <base>FactoryObserver&lt; PropertyFactoryObject &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::LogCentral</name>
    <filename>classinviwo_1_1LogCentral.html</filename>
    <base>Singleton&lt; LogCentral &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>registerLogger</name>
      <anchorfile>classinviwo_1_1LogCentral.html</anchorfile>
      <anchor>a5eeb127460684e9410b4d01db3c73530</anchor>
      <arglist>(std::weak_ptr&lt; Logger &gt; logger)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::LogErrorCounter</name>
    <filename>classinviwo_1_1LogErrorCounter.html</filename>
    <base>inviwo::Logger</base>
  </compound>
  <compound kind="class">
    <name>inviwo::Logger</name>
    <filename>classinviwo_1_1Logger.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::LogModel</name>
    <filename>classinviwo_1_1LogModel.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::LogTableModel</name>
    <filename>classinviwo_1_1LogTableModel.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::LogTableModelEntry</name>
    <filename>structinviwo_1_1LogTableModelEntry.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::LorenzSystem</name>
    <filename>classinviwo_1_1LorenzSystem.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1LorenzSystem.html</anchorfile>
      <anchor>ae5a54d35fd546d9ff083c277247e095a</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::MajorTickProperty</name>
    <filename>classinviwo_1_1plot_1_1MajorTickProperty.html</filename>
    <base>inviwo::CompositeProperty</base>
  </compound>
  <compound kind="class">
    <name>inviwo::util::MapDeserializer</name>
    <filename>classinviwo_1_1util_1_1MapDeserializer.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::MarchingTetrahedron</name>
    <filename>classinviwo_1_1MarchingTetrahedron.html</filename>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; Mesh &gt;</type>
      <name>apply</name>
      <anchorfile>classinviwo_1_1MarchingTetrahedron.html</anchorfile>
      <anchor>afbde3e9df1efe9c6e8ebab65fc24dbe0</anchor>
      <arglist>(std::shared_ptr&lt; const Volume &gt; volume, double iso, const vec4 &amp;color, bool invert, bool enclose, std::function&lt; void(float)&gt; progressCallback=std::function&lt; void(float)&gt;(), std::function&lt; bool(const size3_t &amp;)&gt; maskingCallback=[](const size3_t &amp;){return true;})</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::MarginProperty</name>
    <filename>classinviwo_1_1plot_1_1MarginProperty.html</filename>
    <base>inviwo::CompositeProperty</base>
  </compound>
  <compound kind="class">
    <name>inviwo::MatrixMetaData</name>
    <filename>classinviwo_1_1MatrixMetaData.html</filename>
    <templarg>N</templarg>
    <templarg></templarg>
    <base>inviwo::MetaDataPrimitiveType&lt; T, N, N &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::util::MemoryFileHandle</name>
    <filename>classinviwo_1_1util_1_1MemoryFileHandle.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>getNumberOfBytesInBuffer</name>
      <anchorfile>classinviwo_1_1util_1_1MemoryFileHandle.html</anchorfile>
      <anchor>afded267d52aaa114a8e602a408a7fa95</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::SystemCapabilities::MemoryInfo</name>
    <filename>structinviwo_1_1SystemCapabilities_1_1MemoryInfo.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::MenuItem</name>
    <filename>classinviwo_1_1MenuItem.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::Mesh</name>
    <filename>classinviwo_1_1Mesh.html</filename>
    <base>DataGroup&lt; Mesh, MeshRepresentation &gt;</base>
    <base>SpatialEntity&lt; 3 &gt;</base>
    <base>inviwo::MetaDataOwner</base>
    <class kind="struct">inviwo::Mesh::BufferInfo</class>
    <class kind="struct">inviwo::Mesh::MeshInfo</class>
    <member kind="function">
      <type>void</type>
      <name>addBuffer</name>
      <anchorfile>classinviwo_1_1Mesh.html</anchorfile>
      <anchor>a42959ebc45a4c5fc6d4d5117db5ae987</anchor>
      <arglist>(BufferInfo info, std::shared_ptr&lt; BufferBase &gt; att)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBuffer</name>
      <anchorfile>classinviwo_1_1Mesh.html</anchorfile>
      <anchor>a04d3ac1ac6c3d148bab0d8b7bd589ffd</anchor>
      <arglist>(BufferType type, std::shared_ptr&lt; BufferBase &gt; att)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeBuffer</name>
      <anchorfile>classinviwo_1_1Mesh.html</anchorfile>
      <anchor>a041724978b0cdede5e17580dc4f59610</anchor>
      <arglist>(size_t idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceBuffer</name>
      <anchorfile>classinviwo_1_1Mesh.html</anchorfile>
      <anchor>ad1bffc705f50d2f3fe71383e99ad101e</anchor>
      <arglist>(size_t idx, BufferInfo info, std::shared_ptr&lt; BufferBase &gt; att)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBuffer</name>
      <anchorfile>classinviwo_1_1Mesh.html</anchorfile>
      <anchor>ac271fe1f28685df5b10247620e2c3611</anchor>
      <arglist>(size_t idx, BufferInfo info, std::shared_ptr&lt; BufferBase &gt; att)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addIndicies</name>
      <anchorfile>classinviwo_1_1Mesh.html</anchorfile>
      <anchor>a9f62ca71ce78d1843c419eb937f144dc</anchor>
      <arglist>(MeshInfo info, std::shared_ptr&lt; IndexBuffer &gt; ind)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIndexBuffer</name>
      <anchorfile>classinviwo_1_1Mesh.html</anchorfile>
      <anchor>a29a4bdc29282497d44117ddf91c116b4</anchor>
      <arglist>(size_t idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserveSizeInVertexBuffer</name>
      <anchorfile>classinviwo_1_1Mesh.html</anchorfile>
      <anchor>a6c5bc6c5cb7f8e6f2200632539ede4b2</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserveIndexBuffers</name>
      <anchorfile>classinviwo_1_1Mesh.html</anchorfile>
      <anchor>a0121194cdd3679a1577a7f98396d094a</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classinviwo_1_1Mesh.html</anchorfile>
      <anchor>adecd7912703c869a82b24f6e16f44d7a</anchor>
      <arglist>(const Mesh &amp;mesh)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::Mesh2DRenderProcessorGL</name>
    <filename>classinviwo_1_1Mesh2DRenderProcessorGL.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1Mesh2DRenderProcessorGL.html</anchorfile>
      <anchor>a7f53d67c688e04c9b275e55af9232958</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::MeshClipping</name>
    <filename>classinviwo_1_1MeshClipping.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1MeshClipping.html</anchorfile>
      <anchor>a708946627b8dcdcd9141d0ae8d52001a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::shared_ptr&lt; Mesh &gt;</type>
      <name>clipGeometryAgainstPlane</name>
      <anchorfile>classinviwo_1_1MeshClipping.html</anchorfile>
      <anchor>a69ae432546374b026b290c07009aff3a</anchor>
      <arglist>(const Mesh *, const Plane &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::MeshCreator</name>
    <filename>classinviwo_1_1MeshCreator.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1MeshCreator.html</anchorfile>
      <anchor>a8d61afab85e8e5b5c54dc83a6265f1e2</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::MeshDrawer</name>
    <filename>classinviwo_1_1MeshDrawer.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>draw</name>
      <anchorfile>classinviwo_1_1MeshDrawer.html</anchorfile>
      <anchor>a75bb14e125cfe966519211d6f8e43caf</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Mesh *</type>
      <name>getMesh</name>
      <anchorfile>classinviwo_1_1MeshDrawer.html</anchorfile>
      <anchor>ab62f725cf514f9f67161eba975bb6abc</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual MeshDrawer *</type>
      <name>create</name>
      <anchorfile>classinviwo_1_1MeshDrawer.html</anchorfile>
      <anchor>a83334ca77b7606d2e44033e12012e857</anchor>
      <arglist>(const Mesh *geom) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>canDraw</name>
      <anchorfile>classinviwo_1_1MeshDrawer.html</anchorfile>
      <anchor>a3b8839bdf24bc1c5f51e841246de1140</anchor>
      <arglist>(const Mesh *geom) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::MeshDrawerFactory</name>
    <filename>classinviwo_1_1MeshDrawerFactory.html</filename>
    <base>Factory&lt; MeshDrawer, const Mesh * &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::MeshDrawerGL</name>
    <filename>classinviwo_1_1MeshDrawerGL.html</filename>
    <base>inviwo::MeshDrawer</base>
    <class kind="class">inviwo::MeshDrawerGL::DrawObject</class>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>draw</name>
      <anchorfile>classinviwo_1_1MeshDrawerGL.html</anchorfile>
      <anchor>aa9b69fb06b4c1fce89b9fdeac3416274</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>draw</name>
      <anchorfile>classinviwo_1_1MeshDrawerGL.html</anchorfile>
      <anchor>a259a622c08b2b0a3687a5caf88408d76</anchor>
      <arglist>(DrawMode drawMode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Mesh *</type>
      <name>getMesh</name>
      <anchorfile>classinviwo_1_1MeshDrawerGL.html</anchorfile>
      <anchor>a24ec8ad379abcbdec192a66bcf13a6e8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MeshDrawer *</type>
      <name>create</name>
      <anchorfile>classinviwo_1_1MeshDrawerGL.html</anchorfile>
      <anchor>a7cd2ae8e1e9c62d86a68a6bbf9d8d532</anchor>
      <arglist>(const Mesh *geom) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>canDraw</name>
      <anchorfile>classinviwo_1_1MeshDrawerGL.html</anchorfile>
      <anchor>a7e401c5afe37e63c4f2d1ac6260d436c</anchor>
      <arglist>(const Mesh *geom) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::MeshEntryExitPointsCL</name>
    <filename>classinviwo_1_1MeshEntryExitPointsCL.html</filename>
    <base>inviwo::KernelOwner</base>
    <member kind="function">
      <type>bool</type>
      <name>computeEntryExitPoints</name>
      <anchorfile>classinviwo_1_1MeshEntryExitPointsCL.html</anchorfile>
      <anchor>a07ac998491f4c63545bada6e34555a45</anchor>
      <arglist>(const Mesh *mesh, const mat4 &amp;worldToView, const mat4 &amp;viewToClip, Layer *entryPoints, Layer *exitPoints, bool useGLSharing, const VECTOR_CLASS&lt; cl::Event &gt; *waitForEvents=nullptr, cl::Event *event=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::MeshExport</name>
    <filename>classinviwo_1_1MeshExport.html</filename>
    <base>DataExport&lt; Mesh, MeshInport &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::MeshGL</name>
    <filename>classinviwo_1_1MeshGL.html</filename>
    <base>inviwo::MeshRepresentation</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::Mesh::MeshInfo</name>
    <filename>structinviwo_1_1Mesh_1_1MeshInfo.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::MeshMapping</name>
    <filename>classinviwo_1_1MeshMapping.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1MeshMapping.html</anchorfile>
      <anchor>a25457570b41fa0b9dbbdc121bebe43c9</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::MeshPicking</name>
    <filename>classinviwo_1_1MeshPicking.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1MeshPicking.html</anchorfile>
      <anchor>a8b34893b06cb5a5f1f65f5c687f8928b</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::MeshRAM</name>
    <filename>classinviwo_1_1MeshRAM.html</filename>
    <base>inviwo::MeshRepresentation</base>
  </compound>
  <compound kind="class">
    <name>inviwo::MeshRenderProcessorGL</name>
    <filename>classinviwo_1_1MeshRenderProcessorGL.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1MeshRenderProcessorGL.html</anchorfile>
      <anchor>a4a1e342764215001902fa5f27669164a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1MeshRenderProcessorGL.html</anchorfile>
      <anchor>a90e793825149d3e5c19da1f049bf714d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::MeshRepresentation</name>
    <filename>classinviwo_1_1MeshRepresentation.html</filename>
    <base>DataGroupRepresentation&lt; Mesh &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::MeshSequenceElementSelectorProcessor</name>
    <filename>classinviwo_1_1MeshSequenceElementSelectorProcessor.html</filename>
    <base>VectorElementSelectorProcessor&lt; Mesh, MeshOutport &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::MeshSource</name>
    <filename>classinviwo_1_1MeshSource.html</filename>
    <base>DataSource&lt; Mesh, MeshOutport &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::MetaData</name>
    <filename>classinviwo_1_1MetaData.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::hdf5::MetaData</name>
    <filename>structinviwo_1_1hdf5_1_1MetaData.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::MetaDataFactory</name>
    <filename>classinviwo_1_1MetaDataFactory.html</filename>
    <base>CloningFactory&lt; MetaData &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::MetaDataMap</name>
    <filename>classinviwo_1_1MetaDataMap.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>inviwo::MetaDataOwner</name>
    <filename>classinviwo_1_1MetaDataOwner.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>unsetMetaData</name>
      <anchorfile>classinviwo_1_1MetaDataOwner.html</anchorfile>
      <anchor>a17d098c44425614820745a0455635fc8</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::MetaDataPrimitiveType</name>
    <filename>classinviwo_1_1MetaDataPrimitiveType.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <templarg>M</templarg>
    <base>inviwo::MetaData</base>
  </compound>
  <compound kind="class">
    <name>inviwo::MetaDataPrimitiveType&lt; T, 0, 0 &gt;</name>
    <filename>classinviwo_1_1MetaDataPrimitiveType_3_01T_00_010_00_010_01_4.html</filename>
    <templarg></templarg>
    <base>inviwo::MetaData</base>
  </compound>
  <compound kind="class">
    <name>inviwo::MetaDataPrimitiveType&lt; T, N, 0 &gt;</name>
    <filename>classinviwo_1_1MetaDataPrimitiveType_3_01T_00_01N_00_010_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <base>inviwo::MetaData</base>
  </compound>
  <compound kind="class">
    <name>inviwo::MetaDataPrimitiveType&lt; T, N, N &gt;</name>
    <filename>classinviwo_1_1MetaDataPrimitiveType_3_01T_00_01N_00_01N_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <base>inviwo::MetaData</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::MinMaxHelper</name>
    <filename>structinviwo_1_1MinMaxHelper.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::MinMaxProperty</name>
    <filename>classinviwo_1_1MinMaxProperty.html</filename>
    <templarg>T</templarg>
    <base>TemplateProperty&lt; glm::tvec2&lt; T, glm::defaultp &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classinviwo_1_1MinMaxProperty.html</anchorfile>
      <anchor>a41446559491ec841f9e0481b845a9005</anchor>
      <arglist>(const range_type &amp;value, const range_type &amp;range, const T &amp;increment, const T &amp;minSep)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1MinMaxProperty.html</anchorfile>
      <anchor>a90e719f5733813bbfb849e8326ab8d64</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1MinMaxProperty.html</anchorfile>
      <anchor>a144020e6b710960064c22104d801a8fe</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>auto</type>
      <name>validateValues</name>
      <anchorfile>classinviwo_1_1MinMaxProperty.html</anchorfile>
      <anchor>a7ac5ea414feebb54a161b49dec659891</anchor>
      <arglist>(const range_type &amp;v) -&gt; std::pair&lt; bool, range_type &gt;</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MinMaxProperty&lt; double &gt;</name>
    <filename>classinviwo_1_1MinMaxProperty.html</filename>
    <base>TemplateProperty&lt; glm::tvec2&lt; double, glm::defaultp &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classinviwo_1_1MinMaxProperty.html</anchorfile>
      <anchor>a41446559491ec841f9e0481b845a9005</anchor>
      <arglist>(const range_type &amp;value, const range_type &amp;range, const double &amp;increment, const double &amp;minSep)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1MinMaxProperty.html</anchorfile>
      <anchor>a90e719f5733813bbfb849e8326ab8d64</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1MinMaxProperty.html</anchorfile>
      <anchor>a144020e6b710960064c22104d801a8fe</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>auto</type>
      <name>validateValues</name>
      <anchorfile>classinviwo_1_1MinMaxProperty.html</anchorfile>
      <anchor>a7ac5ea414feebb54a161b49dec659891</anchor>
      <arglist>(const range_type &amp;v) -&gt; std::pair&lt; bool, range_type &gt;</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MinMaxProperty&lt; float &gt;</name>
    <filename>classinviwo_1_1MinMaxProperty.html</filename>
    <base>TemplateProperty&lt; glm::tvec2&lt; float, glm::defaultp &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classinviwo_1_1MinMaxProperty.html</anchorfile>
      <anchor>a41446559491ec841f9e0481b845a9005</anchor>
      <arglist>(const range_type &amp;value, const range_type &amp;range, const float &amp;increment, const float &amp;minSep)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1MinMaxProperty.html</anchorfile>
      <anchor>a90e719f5733813bbfb849e8326ab8d64</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1MinMaxProperty.html</anchorfile>
      <anchor>a144020e6b710960064c22104d801a8fe</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>auto</type>
      <name>validateValues</name>
      <anchorfile>classinviwo_1_1MinMaxProperty.html</anchorfile>
      <anchor>a7ac5ea414feebb54a161b49dec659891</anchor>
      <arglist>(const range_type &amp;v) -&gt; std::pair&lt; bool, range_type &gt;</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MinMaxProperty&lt; int &gt;</name>
    <filename>classinviwo_1_1MinMaxProperty.html</filename>
    <base>TemplateProperty&lt; glm::tvec2&lt; int, glm::defaultp &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classinviwo_1_1MinMaxProperty.html</anchorfile>
      <anchor>a41446559491ec841f9e0481b845a9005</anchor>
      <arglist>(const range_type &amp;value, const range_type &amp;range, const int &amp;increment, const int &amp;minSep)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1MinMaxProperty.html</anchorfile>
      <anchor>a90e719f5733813bbfb849e8326ab8d64</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1MinMaxProperty.html</anchorfile>
      <anchor>a144020e6b710960064c22104d801a8fe</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>auto</type>
      <name>validateValues</name>
      <anchorfile>classinviwo_1_1MinMaxProperty.html</anchorfile>
      <anchor>a7ac5ea414feebb54a161b49dec659891</anchor>
      <arglist>(const range_type &amp;v) -&gt; std::pair&lt; bool, range_type &gt;</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::MinorTickProperty</name>
    <filename>classinviwo_1_1plot_1_1MinorTickProperty.html</filename>
    <base>inviwo::CompositeProperty</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ModuleCallback</name>
    <filename>classinviwo_1_1ModuleCallback.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ModuleCallbackAction</name>
    <filename>classinviwo_1_1ModuleCallbackAction.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ModuleInitException</name>
    <filename>classinviwo_1_1ModuleInitException.html</filename>
    <base>inviwo::Exception</base>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getModulesToDeregister</name>
      <anchorfile>classinviwo_1_1ModuleInitException.html</anchorfile>
      <anchor>a06d3294370fbdf3153359f9bce12435e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ModuleManager</name>
    <filename>classinviwo_1_1ModuleManager.html</filename>
    <member kind="function">
      <type>void</type>
      <name>registerModules</name>
      <anchorfile>classinviwo_1_1ModuleManager.html</anchorfile>
      <anchor>a03a64a394fc058b513bea82dafa17041</anchor>
      <arglist>(std::vector&lt; std::unique_ptr&lt; InviwoModuleFactoryObject &gt;&gt; moduleFactories)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerModules</name>
      <anchorfile>classinviwo_1_1ModuleManager.html</anchorfile>
      <anchor>a0a221c54f1f3bc98b2f2ca4a3d7e6453</anchor>
      <arglist>(RuntimeModuleLoading)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterModules</name>
      <anchorfile>classinviwo_1_1ModuleManager.html</anchorfile>
      <anchor>aeba6c9cf5056716ae0eb2d9845964e4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; std::function&lt; void()&gt; &gt;</type>
      <name>onModulesDidRegister</name>
      <anchorfile>classinviwo_1_1ModuleManager.html</anchorfile>
      <anchor>a57f651c3334355a8c6af08f0816dd1bb</anchor>
      <arglist>(std::function&lt; void()&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; std::function&lt; void()&gt; &gt;</type>
      <name>onModulesWillUnregister</name>
      <anchorfile>classinviwo_1_1ModuleManager.html</anchorfile>
      <anchor>af20f4a577db38023cd3a7545e6f4a251</anchor>
      <arglist>(std::function&lt; void()&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>const IdSet &amp;</type>
      <name>getProtectedModuleIdentifiers</name>
      <anchorfile>classinviwo_1_1ModuleManager.html</anchorfile>
      <anchor>a61a8f7f655124edf40977e4347a8deac</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::InviwoSetupInfo::ModuleSetupInfo</name>
    <filename>structinviwo_1_1InviwoSetupInfo_1_1ModuleSetupInfo.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>inviwo::MouseEvent</name>
    <filename>classinviwo_1_1MouseEvent.html</filename>
    <base>inviwo::MouseInteractionEvent</base>
    <member kind="function">
      <type>MouseButton</type>
      <name>button</name>
      <anchorfile>classinviwo_1_1MouseEvent.html</anchorfile>
      <anchor>ae15ea4903139011fe1ccf508c3ea5281</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MouseState</type>
      <name>state</name>
      <anchorfile>classinviwo_1_1MouseEvent.html</anchorfile>
      <anchor>a7d2f98bb317b361cdf0f6e11f542b051</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::MouseEventMatcher</name>
    <filename>classinviwo_1_1MouseEventMatcher.html</filename>
    <base>inviwo::EventMatcher</base>
  </compound>
  <compound kind="class">
    <name>inviwo::MouseInteractionEvent</name>
    <filename>classinviwo_1_1MouseInteractionEvent.html</filename>
    <base>inviwo::InteractionEvent</base>
    <member kind="function">
      <type>MouseButtons</type>
      <name>buttonState</name>
      <anchorfile>classinviwo_1_1MouseInteractionEvent.html</anchorfile>
      <anchor>ac22d258715fb6fbb755d7cdde379740f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>dvec2</type>
      <name>pos</name>
      <anchorfile>classinviwo_1_1MouseInteractionEvent.html</anchorfile>
      <anchor>a56c865c578de9430b8574462545b1075</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uvec2</type>
      <name>canvasSize</name>
      <anchorfile>classinviwo_1_1MouseInteractionEvent.html</anchorfile>
      <anchor>afe9a253b8aa2aee30a5727d25c85ab61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>depth</name>
      <anchorfile>classinviwo_1_1MouseInteractionEvent.html</anchorfile>
      <anchor>a1c7d666d0d4f58eab3ae5293a761d779</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>dvec2</type>
      <name>posNormalized</name>
      <anchorfile>classinviwo_1_1MouseInteractionEvent.html</anchorfile>
      <anchor>a75c682539fbbb8e59f7b0c5f5fe5531b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>dvec3</type>
      <name>ndc</name>
      <anchorfile>classinviwo_1_1MouseInteractionEvent.html</anchorfile>
      <anchor>ae5d09a069641a575664a4a7ef32076e1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::MPVMVolumeReader</name>
    <filename>classinviwo_1_1MPVMVolumeReader.html</filename>
    <base>DataReaderType&lt; Volume &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::MultichannelRaycaster</name>
    <filename>classinviwo_1_1MultichannelRaycaster.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1MultichannelRaycaster.html</anchorfile>
      <anchor>ae3c6cdfe78fb1641427c8669ae034f23</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1MultichannelRaycaster.html</anchorfile>
      <anchor>aa282f5d91d0c6a872b9fa963b26d2708</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::MultiFileProperty</name>
    <filename>classinviwo_1_1MultiFileProperty.html</filename>
    <base>TemplateProperty&lt; std::vector&lt; std::string &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>MultiFileProperty</name>
      <anchorfile>classinviwo_1_1MultiFileProperty.html</anchorfile>
      <anchor>a3cb481a24919497b77efd24dc3b4ce43</anchor>
      <arglist>(std::string identifier, std::string displayName, const std::vector&lt; std::string &gt; &amp;value={}, std::string contentType=&quot;default&quot;, InvalidationLevel invalidationLevel=InvalidationLevel::InvalidOutput, PropertySemantics semantics=PropertySemantics::Default)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>requestFile</name>
      <anchorfile>classinviwo_1_1MultiFileProperty.html</anchorfile>
      <anchor>ad4472838a718bac00c44cd9f0a2d878f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::MultiFilePropertyWidgetQt</name>
    <filename>classinviwo_1_1MultiFilePropertyWidgetQt.html</filename>
    <base>inviwo::PropertyWidgetQt</base>
    <base>inviwo::FileRequestable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1MultiFilePropertyWidgetQt.html</anchorfile>
      <anchor>a93b3bc186edbd1218b83ff71f7d29c95</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>requestFile</name>
      <anchorfile>classinviwo_1_1MultiFilePropertyWidgetQt.html</anchorfile>
      <anchor>a144d85c1b816a609ce70d7c1f77edb0b</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::MultilineTextEdit</name>
    <filename>classinviwo_1_1MultilineTextEdit.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::NetworkEditor</name>
    <filename>classinviwo_1_1NetworkEditor.html</filename>
    <base>Observable&lt; NetworkEditorObserver &gt;</base>
    <base>inviwo::ProcessorNetworkObserver</base>
  </compound>
  <compound kind="class">
    <name>inviwo::NetworkEditorObserver</name>
    <filename>classinviwo_1_1NetworkEditorObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>inviwo::NetworkEditorView</name>
    <filename>classinviwo_1_1NetworkEditorView.html</filename>
    <base>inviwo::NetworkEditorObserver</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::NetworkLock</name>
    <filename>structinviwo_1_1NetworkLock.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::NetworkSearch</name>
    <filename>classinviwo_1_1NetworkSearch.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::NiftiModule</name>
    <filename>classinviwo_1_1NiftiModule.html</filename>
    <base>inviwo::InviwoModule</base>
  </compound>
  <compound kind="class">
    <name>inviwo::NiftiReader</name>
    <filename>classinviwo_1_1NiftiReader.html</filename>
    <base>DataReaderType&lt; std::vector&lt; std::shared_ptr&lt; Volume &gt; &gt; &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; VolumeSequence &gt;</type>
      <name>readData</name>
      <anchorfile>classinviwo_1_1NiftiReader.html</anchorfile>
      <anchor>a4f8118c82566ddc46307b99ea0a89ac1</anchor>
      <arglist>(const std::string &amp;filePath) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const DataFormatBase *</type>
      <name>niftiDataTypeToInviwoDataFormat</name>
      <anchorfile>classinviwo_1_1NiftiReader.html</anchorfile>
      <anchor>abbf88fb522ae5ba05e869bc532a4da02</anchor>
      <arglist>(int niftiDataType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::NiftiVolumeRAMLoader</name>
    <filename>classinviwo_1_1NiftiVolumeRAMLoader.html</filename>
    <base>DiskRepresentationLoader&lt; VolumeRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::NoColumns</name>
    <filename>classinviwo_1_1plot_1_1NoColumns.html</filename>
    <base>inviwo::Exception</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::NodeDebugger::Node</name>
    <filename>structinviwo_1_1NodeDebugger_1_1Node.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::NodeDebugger</name>
    <filename>structinviwo_1_1NodeDebugger.html</filename>
    <class kind="struct">inviwo::NodeDebugger::Node</class>
  </compound>
  <compound kind="class">
    <name>inviwo::NodeSwitch</name>
    <filename>classinviwo_1_1NodeSwitch.html</filename>
    <member kind="function">
      <type></type>
      <name>NodeSwitch</name>
      <anchorfile>classinviwo_1_1NodeSwitch.html</anchorfile>
      <anchor>a84485d9e26fd35f1528a4cf62a418783</anchor>
      <arglist>(SerializeBase &amp;serializer, TxElement *node, bool retrieveChild=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeSwitch</name>
      <anchorfile>classinviwo_1_1NodeSwitch.html</anchorfile>
      <anchor>aa95d14f9ddd3f6347052ca8d7dc102b1</anchor>
      <arglist>(SerializeBase &amp;serializer, const std::string &amp;key, bool retrieveChild=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NodeSwitch</name>
      <anchorfile>classinviwo_1_1NodeSwitch.html</anchorfile>
      <anchor>a7202ac00e5cc92a60860adaceed20b1c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::NodeVersionConverter</name>
    <filename>classinviwo_1_1NodeVersionConverter.html</filename>
    <base>inviwo::VersionConverter</base>
  </compound>
  <compound kind="class">
    <name>inviwo::NoiseProcessor</name>
    <filename>classinviwo_1_1NoiseProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1NoiseProcessor.html</anchorfile>
      <anchor>a2288c3cb92372840b300d2ca215aa228</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntSize2Property</type>
      <name>size_</name>
      <anchorfile>classinviwo_1_1NoiseProcessor.html</anchorfile>
      <anchor>a4e8cb5b5b3d71600c0262106fe12c4a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TemplateOptionProperty&lt; NoiseType &gt;</type>
      <name>type_</name>
      <anchorfile>classinviwo_1_1NoiseProcessor.html</anchorfile>
      <anchor>ae1bc96fa789bd0817ff1dd4dec73e705</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FloatMinMaxProperty</type>
      <name>range_</name>
      <anchorfile>classinviwo_1_1NoiseProcessor.html</anchorfile>
      <anchor>a68376173b75052f765afb7cf6c8ce26c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntMinMaxProperty</type>
      <name>levels_</name>
      <anchorfile>classinviwo_1_1NoiseProcessor.html</anchorfile>
      <anchor>ac7ca921e3796d78659c3b07f99853d02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FloatProperty</type>
      <name>persistence_</name>
      <anchorfile>classinviwo_1_1NoiseProcessor.html</anchorfile>
      <anchor>a5772ed3e75be968c6c638f23213900ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntProperty</type>
      <name>poissonDotsAlongX_</name>
      <anchorfile>classinviwo_1_1NoiseProcessor.html</anchorfile>
      <anchor>ae8c97b6b3e24bfb983c2c257ef42b0aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntProperty</type>
      <name>poissonMaxPoints_</name>
      <anchorfile>classinviwo_1_1NoiseProcessor.html</anchorfile>
      <anchor>a795aff861df669f1a96b2770acdf697e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BoolProperty</type>
      <name>useSameSeed_</name>
      <anchorfile>classinviwo_1_1NoiseProcessor.html</anchorfile>
      <anchor>a04dd837096f7c56128c67e165d0aa46f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntProperty</type>
      <name>seed_</name>
      <anchorfile>classinviwo_1_1NoiseProcessor.html</anchorfile>
      <anchor>a507231143a78e9e693c6755340cce91e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::NoiseVolumeProcessor</name>
    <filename>classinviwo_1_1NoiseVolumeProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1NoiseVolumeProcessor.html</anchorfile>
      <anchor>a44a818c77e845c07b700a95e5221c338</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::NormalizedHistogram</name>
    <filename>classinviwo_1_1NormalizedHistogram.html</filename>
    <class kind="struct">inviwo::NormalizedHistogram::Stats</class>
  </compound>
  <compound kind="class">
    <name>inviwo::util::NotificationBlocker</name>
    <filename>classinviwo_1_1util_1_1NotificationBlocker.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::NullPointerException</name>
    <filename>classinviwo_1_1NullPointerException.html</filename>
    <base>inviwo::Exception</base>
  </compound>
  <compound kind="class">
    <name>inviwo::NumpyMandelbrot</name>
    <filename>classinviwo_1_1NumpyMandelbrot.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1NumpyMandelbrot.html</anchorfile>
      <anchor>ac9e924501d50973decec9531a1a0861f</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::NumPyMeshCreateTest</name>
    <filename>classinviwo_1_1NumPyMeshCreateTest.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1NumPyMeshCreateTest.html</anchorfile>
      <anchor>a953927096a62e744166fbccab2d9898a</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::NumPyVolume</name>
    <filename>classinviwo_1_1NumPyVolume.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1NumPyVolume.html</anchorfile>
      <anchor>a233e4e8ccbc6560e2c0ab68ef09685c4</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::Observable</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <templarg>T</templarg>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; ActivityIndicatorObserver &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; AnimationControllerObserver &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; AnimationObserver &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; BufferObjectObserver &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; CompositePropertyObserver &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; FactoryObserver&lt; CameraFactoryObject &gt; &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; FactoryObserver&lt; DialogFactoryObject &gt; &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; FactoryObserver&lt; InportFactoryObject &gt; &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; FactoryObserver&lt; InterpolationFactoryObject &gt; &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; FactoryObserver&lt; M &gt; &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; FactoryObserver&lt; OutportFactoryObject &gt; &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; FactoryObserver&lt; PortInspectorFactoryObject &gt; &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; FactoryObserver&lt; ProcessorFactoryObject &gt; &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; FactoryObserver&lt; PropertyFactoryObject &gt; &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; FactoryObserver&lt; T &gt; &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; FactoryObserver&lt; TrackFactoryObject &gt; &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; KernelObserver &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; KeyframeObserver &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; KeyframeSequenceObserver &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; LabelGraphicsItemObserver &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; NetworkEditorObserver &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; ProcessorMetaDataObserver &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; ProcessorNetworkEvaluationObserver &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; ProcessorNetworkObserver &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; ProcessorObserver &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; ProcessorWidgetMetaDataObserver &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; ProcessorWidgetObserver &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; ProgressBarObserver &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; PropertyObserver &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; PropertyOwnerObserver &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; PythonExecutionOutputObeserver &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; ResourceManagerObserver &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; TextureObserver &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; TrackObserver &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; TransferFunctionObserver &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; TransferFunctionPointObserver &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>Observable&lt; TransferFunctionPropertyObserver &gt;</name>
    <filename>classinviwo_1_1Observable.html</filename>
    <base>inviwo::ObservableInterface</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ObservableInterface</name>
    <filename>classinviwo_1_1ObservableInterface.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::Observer</name>
    <filename>classinviwo_1_1Observer.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Observer</name>
      <anchorfile>classinviwo_1_1Observer.html</anchorfile>
      <anchor>a388506546de6df5201d474b07ce3fa88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeObservation</name>
      <anchorfile>classinviwo_1_1Observer.html</anchorfile>
      <anchor>a89a511d1efc3db5e2ce1fe8fd53043a4</anchor>
      <arglist>(ObservableInterface *observable)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addObservation</name>
      <anchorfile>classinviwo_1_1Observer.html</anchorfile>
      <anchor>aa62add49e9cc4b358f61aa9d38aee991</anchor>
      <arglist>(ObservableInterface *observable)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::Property::OnChangeBlocker</name>
    <filename>classinviwo_1_1Property_1_1OnChangeBlocker.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::OnScopeExit</name>
    <filename>structinviwo_1_1util_1_1OnScopeExit.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::OpenCL</name>
    <filename>classinviwo_1_1OpenCL.html</filename>
    <base>Singleton&lt; OpenCL &gt;</base>
    <member kind="function">
      <type>const cl::CommandQueue &amp;</type>
      <name>getQueue</name>
      <anchorfile>classinviwo_1_1OpenCL.html</anchorfile>
      <anchor>afb2614d9792cbc649896e23e2bf4ee4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const cl::CommandQueue &amp;</type>
      <name>getAsyncQueue</name>
      <anchorfile>classinviwo_1_1OpenCL.html</anchorfile>
      <anchor>a9fae887ef2458032ac5d1aa40ecdced8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const cl::Context &amp;</type>
      <name>getContext</name>
      <anchorfile>classinviwo_1_1OpenCL.html</anchorfile>
      <anchor>aafa97a419ca41cf46643aea8727df434</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const cl::Device &amp;</type>
      <name>getDevice</name>
      <anchorfile>classinviwo_1_1OpenCL.html</anchorfile>
      <anchor>a93af8ae3fe719504b23e509a8adb4314</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDevice</name>
      <anchorfile>classinviwo_1_1OpenCL.html</anchorfile>
      <anchor>a5f5ce33707a5a1ffa1c33cb0be9b1c67</anchor>
      <arglist>(cl::Device device, bool glSharing)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCommonIncludeDirectory</name>
      <anchorfile>classinviwo_1_1OpenCL.html</anchorfile>
      <anchor>acfb357ea73d1ee3c6651a0784a70c214</anchor>
      <arglist>(const std::string &amp;directoryPath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeCommonIncludeDirectory</name>
      <anchorfile>classinviwo_1_1OpenCL.html</anchorfile>
      <anchor>a637679a17c413b40a2e725d6063d2269</anchor>
      <arglist>(const std::string &amp;directoryPath)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValidImageFormat</name>
      <anchorfile>classinviwo_1_1OpenCL.html</anchorfile>
      <anchor>af2aa20dcd01dcdf5b2f4af95bfb2aec8</anchor>
      <arglist>(const cl::Context &amp;context, const cl::ImageFormat &amp;format)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValidVolumeFormat</name>
      <anchorfile>classinviwo_1_1OpenCL.html</anchorfile>
      <anchor>a88afbf5405019382d0330e7e75df4900</anchor>
      <arglist>(const cl::Context &amp;context, const cl::ImageFormat &amp;format)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>printBuildError</name>
      <anchorfile>classinviwo_1_1OpenCL.html</anchorfile>
      <anchor>a13dcd7a6bde52d618edaabd4b188feb9</anchor>
      <arglist>(const std::vector&lt; cl::Device &gt; &amp;devices, const cl::Program &amp;program, const std::string &amp;filename=&quot;&quot;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; cl_context_properties &gt;</type>
      <name>getGLSharingContextProperties</name>
      <anchorfile>classinviwo_1_1OpenCL.html</anchorfile>
      <anchor>a9e86b0308761c2d85c1809da06630cd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; cl::Device &gt;</type>
      <name>getAllDevices</name>
      <anchorfile>classinviwo_1_1OpenCL.html</anchorfile>
      <anchor>aaffd4f0def83e9f114614123f919a46a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getBestGPUDeviceOnSystem</name>
      <anchorfile>classinviwo_1_1OpenCL.html</anchorfile>
      <anchor>a4a4b050b47a44ebf5a3349e6e5cb0f99</anchor>
      <arglist>(cl::Device &amp;bestDevice, cl::Platform &amp;onPlatform)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::OpenCLCapabilities</name>
    <filename>classinviwo_1_1OpenCLCapabilities.html</filename>
    <base>inviwo::Capabilities</base>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>printDeviceInfo</name>
      <anchorfile>classinviwo_1_1OpenCLCapabilities.html</anchorfile>
      <anchor>ac54004c261a3cfad8f726114cea96ccd</anchor>
      <arglist>(const cl::Device &amp;device)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::OpenCLException</name>
    <filename>classinviwo_1_1OpenCLException.html</filename>
    <base>inviwo::Exception</base>
  </compound>
  <compound kind="class">
    <name>inviwo::OpenCLFormatException</name>
    <filename>classinviwo_1_1OpenCLFormatException.html</filename>
    <base>inviwo::Exception</base>
  </compound>
  <compound kind="class">
    <name>inviwo::OpenCLModule</name>
    <filename>classinviwo_1_1OpenCLModule.html</filename>
    <base>inviwo::InviwoModule</base>
  </compound>
  <compound kind="class">
    <name>inviwo::OpenCLSettings</name>
    <filename>classinviwo_1_1OpenCLSettings.html</filename>
    <base>inviwo::Settings</base>
  </compound>
  <compound kind="class">
    <name>inviwo::OpenGLCapabilities</name>
    <filename>classinviwo_1_1OpenGLCapabilities.html</filename>
    <base>inviwo::Capabilities</base>
    <class kind="class">inviwo::OpenGLCapabilities::GLSLShaderVersion</class>
  </compound>
  <compound kind="class">
    <name>inviwo::OpenGLException</name>
    <filename>classinviwo_1_1OpenGLException.html</filename>
    <base>inviwo::Exception</base>
  </compound>
  <compound kind="class">
    <name>inviwo::OpenGLInitException</name>
    <filename>classinviwo_1_1OpenGLInitException.html</filename>
    <base>inviwo::ModuleInitException</base>
  </compound>
  <compound kind="class">
    <name>inviwo::OpenGLModule</name>
    <filename>classinviwo_1_1OpenGLModule.html</filename>
    <base>inviwo::InviwoModule</base>
  </compound>
  <compound kind="class">
    <name>inviwo::OpenGLQtCapabilities</name>
    <filename>classinviwo_1_1OpenGLQtCapabilities.html</filename>
    <base>inviwo::Capabilities</base>
  </compound>
  <compound kind="class">
    <name>inviwo::OpenGLQtMenu</name>
    <filename>classinviwo_1_1OpenGLQtMenu.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::OpenGLQtModule</name>
    <filename>classinviwo_1_1OpenGLQtModule.html</filename>
    <base>inviwo::InviwoModule</base>
    <base>inviwo::ProcessorNetworkEvaluationObserver</base>
  </compound>
  <compound kind="class">
    <name>inviwo::OpenGLSettings</name>
    <filename>classinviwo_1_1OpenGLSettings.html</filename>
    <base>inviwo::Settings</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::OptionPropertyHelper</name>
    <filename>structinviwo_1_1OptionPropertyHelper.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::OptionPropertyOption</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <templarg>T</templarg>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; AxisRangeMode &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; BackgroundStyle &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; BlendMode &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; BoundaryType &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; CartesianCoordinateAxis &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; ColoringMethod &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; ConnectivityType &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; CoordinateSpace &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; DataFormatId &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; DataRangeMode &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; double &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; DrawType &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; glui::BoxLayout::LayoutDirection &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; GlyphClippingMode &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; GlyphType &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; InputType &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; int &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; inviwo::IntegralLineProperties::Direction &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; inviwo::IntegralLineProperties::IntegrationScheme &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; inviwo::Shader::OnError &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; inviwo::Shader::UniformWarning &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; LabelPosition &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; LayerType &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; Layout &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; LineDrawMode &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; Location &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; MeshType &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; Method &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; Mode &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; NoiseType &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; Operator &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; Orientation &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; OutputType &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; Placement &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; Positioning &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; RenderMode &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; size_t &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; std::string &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; TickStyle &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; Type &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; UsageMode &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; util::VolumeLaplacianPostProcessing &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; utilgl::debug::BreakLevel &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; utilgl::debug::Mode &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>OptionPropertyOption&lt; utilgl::debug::Severity &gt;</name>
    <filename>classinviwo_1_1OptionPropertyOption.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>inviwo::OptionPropertyWidgetQt</name>
    <filename>classinviwo_1_1OptionPropertyWidgetQt.html</filename>
    <base>inviwo::PropertyWidgetQt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1OptionPropertyWidgetQt.html</anchorfile>
      <anchor>a85e58ad8a48f5e51683ae3ebca139c6d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::OrdinalAnimationProperty</name>
    <filename>classinviwo_1_1OrdinalAnimationProperty.html</filename>
    <templarg></templarg>
    <base>inviwo::BaseOrdinalAnimationProperty</base>
  </compound>
  <compound kind="class">
    <name>inviwo::OrdinalBaseWidget</name>
    <filename>classinviwo_1_1OrdinalBaseWidget.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>OrdinalBaseWidget&lt; BT &gt;</name>
    <filename>classinviwo_1_1OrdinalBaseWidget.html</filename>
  </compound>
  <compound kind="class">
    <name>OrdinalBaseWidget&lt; int &gt;</name>
    <filename>classinviwo_1_1OrdinalBaseWidget.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::OrdinalEditorWidget</name>
    <filename>classinviwo_1_1OrdinalEditorWidget.html</filename>
    <templarg></templarg>
    <base>inviwo::TemplateOrdinalEditorWidget</base>
  </compound>
  <compound kind="class">
    <name>inviwo::OrdinalEditorWidget&lt; int &gt;</name>
    <filename>classinviwo_1_1OrdinalEditorWidget_3_01int_01_4.html</filename>
    <base>TemplateOrdinalEditorWidget&lt; int &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::OrdinalMinMaxPropertyWidgetQt</name>
    <filename>classinviwo_1_1OrdinalMinMaxPropertyWidgetQt.html</filename>
    <templarg></templarg>
    <base>inviwo::PropertyWidgetQt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1OrdinalMinMaxPropertyWidgetQt.html</anchorfile>
      <anchor>a8a8c57bf02c38cdd6f5b23f1d4ebef21</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::OrdinalMinMaxTextPropertyWidgetQt</name>
    <filename>classinviwo_1_1OrdinalMinMaxTextPropertyWidgetQt.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>inviwo::PropertyWidgetQt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1OrdinalMinMaxTextPropertyWidgetQt.html</anchorfile>
      <anchor>af2b2bde50a20a113c2c904f02fb7aa5f</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::OrdinalProperty</name>
    <filename>classinviwo_1_1OrdinalProperty.html</filename>
    <templarg>T</templarg>
    <base>inviwo::TemplateProperty</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>a197d2df94777e52ff9340558df1cf6dc</anchor>
      <arglist>(const T &amp;value, const T &amp;minVal, const T &amp;maxVal, const T &amp;increment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>af4fbd0908b054a41666dc8e8843325e7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>acd5bcdbdf9601ed091f712ce5b4b1dd4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; bool, T &gt;</type>
      <name>validateValues</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>ad5818703383be5fa9af3c366906df8c7</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OrdinalProperty&lt; double &gt;</name>
    <filename>classinviwo_1_1OrdinalProperty.html</filename>
    <base>TemplateProperty&lt; double &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>a197d2df94777e52ff9340558df1cf6dc</anchor>
      <arglist>(const double &amp;value, const double &amp;minVal, const double &amp;maxVal, const double &amp;increment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>af4fbd0908b054a41666dc8e8843325e7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>acd5bcdbdf9601ed091f712ce5b4b1dd4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; bool, double &gt;</type>
      <name>validateValues</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>ad5818703383be5fa9af3c366906df8c7</anchor>
      <arglist>(const double &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OrdinalProperty&lt; dvec2 &gt;</name>
    <filename>classinviwo_1_1OrdinalProperty.html</filename>
    <base>TemplateProperty&lt; dvec2 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>a197d2df94777e52ff9340558df1cf6dc</anchor>
      <arglist>(const dvec2 &amp;value, const dvec2 &amp;minVal, const dvec2 &amp;maxVal, const dvec2 &amp;increment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>af4fbd0908b054a41666dc8e8843325e7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>acd5bcdbdf9601ed091f712ce5b4b1dd4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; bool, dvec2 &gt;</type>
      <name>validateValues</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>ad5818703383be5fa9af3c366906df8c7</anchor>
      <arglist>(const dvec2 &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OrdinalProperty&lt; dvec3 &gt;</name>
    <filename>classinviwo_1_1OrdinalProperty.html</filename>
    <base>TemplateProperty&lt; dvec3 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>a197d2df94777e52ff9340558df1cf6dc</anchor>
      <arglist>(const dvec3 &amp;value, const dvec3 &amp;minVal, const dvec3 &amp;maxVal, const dvec3 &amp;increment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>af4fbd0908b054a41666dc8e8843325e7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>acd5bcdbdf9601ed091f712ce5b4b1dd4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; bool, dvec3 &gt;</type>
      <name>validateValues</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>ad5818703383be5fa9af3c366906df8c7</anchor>
      <arglist>(const dvec3 &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OrdinalProperty&lt; dvec4 &gt;</name>
    <filename>classinviwo_1_1OrdinalProperty.html</filename>
    <base>TemplateProperty&lt; dvec4 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>a197d2df94777e52ff9340558df1cf6dc</anchor>
      <arglist>(const dvec4 &amp;value, const dvec4 &amp;minVal, const dvec4 &amp;maxVal, const dvec4 &amp;increment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>af4fbd0908b054a41666dc8e8843325e7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>acd5bcdbdf9601ed091f712ce5b4b1dd4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; bool, dvec4 &gt;</type>
      <name>validateValues</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>ad5818703383be5fa9af3c366906df8c7</anchor>
      <arglist>(const dvec4 &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OrdinalProperty&lt; float &gt;</name>
    <filename>classinviwo_1_1OrdinalProperty.html</filename>
    <base>TemplateProperty&lt; float &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>a197d2df94777e52ff9340558df1cf6dc</anchor>
      <arglist>(const float &amp;value, const float &amp;minVal, const float &amp;maxVal, const float &amp;increment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>af4fbd0908b054a41666dc8e8843325e7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>acd5bcdbdf9601ed091f712ce5b4b1dd4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; bool, float &gt;</type>
      <name>validateValues</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>ad5818703383be5fa9af3c366906df8c7</anchor>
      <arglist>(const float &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OrdinalProperty&lt; glm::i64 &gt;</name>
    <filename>classinviwo_1_1OrdinalProperty.html</filename>
    <base>TemplateProperty&lt; glm::i64 &gt;</base>
  </compound>
  <compound kind="class">
    <name>OrdinalProperty&lt; glm::tvec3&lt; T, glm::defaultp &gt; &gt;</name>
    <filename>classinviwo_1_1OrdinalProperty.html</filename>
    <base>TemplateProperty&lt; glm::tvec3&lt; T, glm::defaultp &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>OrdinalProperty&lt; int &gt;</name>
    <filename>classinviwo_1_1OrdinalProperty.html</filename>
    <base>TemplateProperty&lt; int &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>a197d2df94777e52ff9340558df1cf6dc</anchor>
      <arglist>(const int &amp;value, const int &amp;minVal, const int &amp;maxVal, const int &amp;increment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>af4fbd0908b054a41666dc8e8843325e7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>acd5bcdbdf9601ed091f712ce5b4b1dd4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; bool, int &gt;</type>
      <name>validateValues</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>ad5818703383be5fa9af3c366906df8c7</anchor>
      <arglist>(const int &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OrdinalProperty&lt; ivec2 &gt;</name>
    <filename>classinviwo_1_1OrdinalProperty.html</filename>
    <base>TemplateProperty&lt; ivec2 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>a197d2df94777e52ff9340558df1cf6dc</anchor>
      <arglist>(const ivec2 &amp;value, const ivec2 &amp;minVal, const ivec2 &amp;maxVal, const ivec2 &amp;increment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>af4fbd0908b054a41666dc8e8843325e7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>acd5bcdbdf9601ed091f712ce5b4b1dd4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; bool, ivec2 &gt;</type>
      <name>validateValues</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>ad5818703383be5fa9af3c366906df8c7</anchor>
      <arglist>(const ivec2 &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OrdinalProperty&lt; ivec3 &gt;</name>
    <filename>classinviwo_1_1OrdinalProperty.html</filename>
    <base>TemplateProperty&lt; ivec3 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>a197d2df94777e52ff9340558df1cf6dc</anchor>
      <arglist>(const ivec3 &amp;value, const ivec3 &amp;minVal, const ivec3 &amp;maxVal, const ivec3 &amp;increment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>af4fbd0908b054a41666dc8e8843325e7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>acd5bcdbdf9601ed091f712ce5b4b1dd4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; bool, ivec3 &gt;</type>
      <name>validateValues</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>ad5818703383be5fa9af3c366906df8c7</anchor>
      <arglist>(const ivec3 &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OrdinalProperty&lt; ivec4 &gt;</name>
    <filename>classinviwo_1_1OrdinalProperty.html</filename>
    <base>TemplateProperty&lt; ivec4 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>a197d2df94777e52ff9340558df1cf6dc</anchor>
      <arglist>(const ivec4 &amp;value, const ivec4 &amp;minVal, const ivec4 &amp;maxVal, const ivec4 &amp;increment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>af4fbd0908b054a41666dc8e8843325e7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>acd5bcdbdf9601ed091f712ce5b4b1dd4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; bool, ivec4 &gt;</type>
      <name>validateValues</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>ad5818703383be5fa9af3c366906df8c7</anchor>
      <arglist>(const ivec4 &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OrdinalProperty&lt; mat3 &gt;</name>
    <filename>classinviwo_1_1OrdinalProperty.html</filename>
    <base>TemplateProperty&lt; mat3 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>a197d2df94777e52ff9340558df1cf6dc</anchor>
      <arglist>(const mat3 &amp;value, const mat3 &amp;minVal, const mat3 &amp;maxVal, const mat3 &amp;increment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>af4fbd0908b054a41666dc8e8843325e7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>acd5bcdbdf9601ed091f712ce5b4b1dd4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; bool, mat3 &gt;</type>
      <name>validateValues</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>ad5818703383be5fa9af3c366906df8c7</anchor>
      <arglist>(const mat3 &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OrdinalProperty&lt; mat4 &gt;</name>
    <filename>classinviwo_1_1OrdinalProperty.html</filename>
    <base>TemplateProperty&lt; mat4 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>a197d2df94777e52ff9340558df1cf6dc</anchor>
      <arglist>(const mat4 &amp;value, const mat4 &amp;minVal, const mat4 &amp;maxVal, const mat4 &amp;increment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>af4fbd0908b054a41666dc8e8843325e7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>acd5bcdbdf9601ed091f712ce5b4b1dd4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; bool, mat4 &gt;</type>
      <name>validateValues</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>ad5818703383be5fa9af3c366906df8c7</anchor>
      <arglist>(const mat4 &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OrdinalProperty&lt; size2_t &gt;</name>
    <filename>classinviwo_1_1OrdinalProperty.html</filename>
    <base>TemplateProperty&lt; size2_t &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>a197d2df94777e52ff9340558df1cf6dc</anchor>
      <arglist>(const size2_t &amp;value, const size2_t &amp;minVal, const size2_t &amp;maxVal, const size2_t &amp;increment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>af4fbd0908b054a41666dc8e8843325e7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>acd5bcdbdf9601ed091f712ce5b4b1dd4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; bool, size2_t &gt;</type>
      <name>validateValues</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>ad5818703383be5fa9af3c366906df8c7</anchor>
      <arglist>(const size2_t &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OrdinalProperty&lt; size3_t &gt;</name>
    <filename>classinviwo_1_1OrdinalProperty.html</filename>
    <base>TemplateProperty&lt; size3_t &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>a197d2df94777e52ff9340558df1cf6dc</anchor>
      <arglist>(const size3_t &amp;value, const size3_t &amp;minVal, const size3_t &amp;maxVal, const size3_t &amp;increment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>af4fbd0908b054a41666dc8e8843325e7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>acd5bcdbdf9601ed091f712ce5b4b1dd4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; bool, size3_t &gt;</type>
      <name>validateValues</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>ad5818703383be5fa9af3c366906df8c7</anchor>
      <arglist>(const size3_t &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OrdinalProperty&lt; size4_t &gt;</name>
    <filename>classinviwo_1_1OrdinalProperty.html</filename>
    <base>TemplateProperty&lt; size4_t &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>a197d2df94777e52ff9340558df1cf6dc</anchor>
      <arglist>(const size4_t &amp;value, const size4_t &amp;minVal, const size4_t &amp;maxVal, const size4_t &amp;increment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>af4fbd0908b054a41666dc8e8843325e7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>acd5bcdbdf9601ed091f712ce5b4b1dd4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; bool, size4_t &gt;</type>
      <name>validateValues</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>ad5818703383be5fa9af3c366906df8c7</anchor>
      <arglist>(const size4_t &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OrdinalProperty&lt; size_t &gt;</name>
    <filename>classinviwo_1_1OrdinalProperty.html</filename>
    <base>TemplateProperty&lt; size_t &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>a197d2df94777e52ff9340558df1cf6dc</anchor>
      <arglist>(const size_t &amp;value, const size_t &amp;minVal, const size_t &amp;maxVal, const size_t &amp;increment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>af4fbd0908b054a41666dc8e8843325e7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>acd5bcdbdf9601ed091f712ce5b4b1dd4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; bool, size_t &gt;</type>
      <name>validateValues</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>ad5818703383be5fa9af3c366906df8c7</anchor>
      <arglist>(const size_t &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OrdinalProperty&lt; vec2 &gt;</name>
    <filename>classinviwo_1_1OrdinalProperty.html</filename>
    <base>TemplateProperty&lt; vec2 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>a197d2df94777e52ff9340558df1cf6dc</anchor>
      <arglist>(const vec2 &amp;value, const vec2 &amp;minVal, const vec2 &amp;maxVal, const vec2 &amp;increment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>af4fbd0908b054a41666dc8e8843325e7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>acd5bcdbdf9601ed091f712ce5b4b1dd4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; bool, vec2 &gt;</type>
      <name>validateValues</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>ad5818703383be5fa9af3c366906df8c7</anchor>
      <arglist>(const vec2 &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OrdinalProperty&lt; vec3 &gt;</name>
    <filename>classinviwo_1_1OrdinalProperty.html</filename>
    <base>TemplateProperty&lt; vec3 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>a197d2df94777e52ff9340558df1cf6dc</anchor>
      <arglist>(const vec3 &amp;value, const vec3 &amp;minVal, const vec3 &amp;maxVal, const vec3 &amp;increment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>af4fbd0908b054a41666dc8e8843325e7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>acd5bcdbdf9601ed091f712ce5b4b1dd4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; bool, vec3 &gt;</type>
      <name>validateValues</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>ad5818703383be5fa9af3c366906df8c7</anchor>
      <arglist>(const vec3 &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OrdinalProperty&lt; vec4 &gt;</name>
    <filename>classinviwo_1_1OrdinalProperty.html</filename>
    <base>TemplateProperty&lt; vec4 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>a197d2df94777e52ff9340558df1cf6dc</anchor>
      <arglist>(const vec4 &amp;value, const vec4 &amp;minVal, const vec4 &amp;maxVal, const vec4 &amp;increment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>af4fbd0908b054a41666dc8e8843325e7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>acd5bcdbdf9601ed091f712ce5b4b1dd4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; bool, vec4 &gt;</type>
      <name>validateValues</name>
      <anchorfile>classinviwo_1_1OrdinalProperty.html</anchorfile>
      <anchor>ad5818703383be5fa9af3c366906df8c7</anchor>
      <arglist>(const vec4 &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::OrdinalPropertyAnimator</name>
    <filename>classinviwo_1_1OrdinalPropertyAnimator.html</filename>
    <base>inviwo::Processor</base>
  </compound>
  <compound kind="class">
    <name>inviwo::OrdinalPropertyConverter</name>
    <filename>classinviwo_1_1OrdinalPropertyConverter.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>inviwo::TemplatePropertyConverter</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::OrdinalPropertyHelper</name>
    <filename>structinviwo_1_1OrdinalPropertyHelper.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::OrdinalPropertyIterator</name>
    <filename>structinviwo_1_1OrdinalPropertyIterator.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::OrdinalPropertyWidgetQt</name>
    <filename>classinviwo_1_1OrdinalPropertyWidgetQt.html</filename>
    <templarg></templarg>
    <base>inviwo::PropertyWidgetQt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1OrdinalPropertyWidgetQt.html</anchorfile>
      <anchor>a5f80188e33dc2c374c2d77acc1b875a7</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::OrientationIndicator</name>
    <filename>classinviwo_1_1OrientationIndicator.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1OrientationIndicator.html</anchorfile>
      <anchor>a521839152df0db6c5bc1e2e6e442d8fd</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::OrthographicCamera</name>
    <filename>classinviwo_1_1OrthographicCamera.html</filename>
    <base>inviwo::Camera</base>
    <member kind="function">
      <type>void</type>
      <name>setFrustum</name>
      <anchorfile>classinviwo_1_1OrthographicCamera.html</anchorfile>
      <anchor>a54475f23fd14859a846ebf83eb42c103</anchor>
      <arglist>(vec4 val)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual mat4</type>
      <name>calculateProjectionMatrix</name>
      <anchorfile>classinviwo_1_1OrthographicCamera.html</anchorfile>
      <anchor>a428b2861f556ffa3d70a3fe41daf2f06</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::SystemCapabilities::OSInfo</name>
    <filename>structinviwo_1_1SystemCapabilities_1_1OSInfo.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::util::ostream_joiner</name>
    <filename>classinviwo_1_1util_1_1ostream__joiner.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::Outport</name>
    <filename>classinviwo_1_1Outport.html</filename>
    <base>inviwo::Port</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isReady</name>
      <anchorfile>classinviwo_1_1Outport.html</anchorfile>
      <anchor>aa459ec8de7bcda3dfa6b03fe7faa34b7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>classinviwo_1_1Outport.html</anchorfile>
      <anchor>a0e10ee4b77c78044b7d8b019ff673c49</anchor>
      <arglist>(InvalidationLevel invalidationLevel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>propagateEvent</name>
      <anchorfile>classinviwo_1_1Outport.html</anchorfile>
      <anchor>a0a0b4f4417f7d66252f16e2fbd3d6812</anchor>
      <arglist>(Event *event)</arglist>
    </member>
    <member kind="function">
      <type>const BaseCallBack *</type>
      <name>onConnect</name>
      <anchorfile>classinviwo_1_1Outport.html</anchorfile>
      <anchor>aff76d718168ee4089bb7c8e27f877c97</anchor>
      <arglist>(std::function&lt; void()&gt; lambda)</arglist>
    </member>
    <member kind="function">
      <type>const BaseCallBack *</type>
      <name>onDisconnect</name>
      <anchorfile>classinviwo_1_1Outport.html</anchorfile>
      <anchor>a7c58b5401f6b1e9c2849e6c248f60e99</anchor>
      <arglist>(std::function&lt; void()&gt; lambda)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValid</name>
      <anchorfile>classinviwo_1_1Outport.html</anchorfile>
      <anchor>aa16fe81ab410aec4c7148ed587ce261d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::OutportFactory</name>
    <filename>classinviwo_1_1OutportFactory.html</filename>
    <base>Factory&lt; Outport, const std::string &amp;, const std::string &amp; &gt;</base>
    <base>StandardFactory&lt; Outport, OutportFactoryObject &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::OutportFactoryObject</name>
    <filename>classinviwo_1_1OutportFactoryObject.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::OutportFactoryObjectTemplate</name>
    <filename>classinviwo_1_1OutportFactoryObjectTemplate.html</filename>
    <templarg></templarg>
    <base>inviwo::OutportFactoryObject</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::OutportIterable</name>
    <filename>structinviwo_1_1OutportIterable.html</filename>
    <templarg></templarg>
    <class kind="class">inviwo::OutportIterable::const_iterator</class>
  </compound>
  <compound kind="struct">
    <name>inviwo::OutportIterableImpl</name>
    <filename>structinviwo_1_1OutportIterableImpl.html</filename>
    <templarg>T</templarg>
    <templarg>Enable</templarg>
    <base>inviwo::OutportIterable</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::OutportIterableImpl&lt; std::vector&lt; std::shared_ptr&lt; T &gt;, Alloc &gt; &gt;</name>
    <filename>structinviwo_1_1OutportIterableImpl_3_01std_1_1vector_3_01std_1_1shared__ptr_3_01T_01_4_00_01Alloc_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>inviwo::OutportIterable</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::OutportIterableImpl&lt; std::vector&lt; std::unique_ptr&lt; T &gt;, Alloc &gt; &gt;</name>
    <filename>structinviwo_1_1OutportIterableImpl_3_01std_1_1vector_3_01std_1_1unique__ptr_3_01T_01_4_00_01Alloc_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>inviwo::OutportIterable</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::OutportIterableImpl&lt; std::vector&lt; T *, Alloc &gt; &gt;</name>
    <filename>structinviwo_1_1OutportIterableImpl_3_01std_1_1vector_3_01T_01_5_00_01Alloc_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>inviwo::OutportIterable</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::OutportIterableImpl&lt; std::vector&lt; T, Alloc &gt; &gt;</name>
    <filename>structinviwo_1_1OutportIterableImpl_3_01std_1_1vector_3_01T_00_01Alloc_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>inviwo::OutportIterable</base>
  </compound>
  <compound kind="class">
    <name>OutportIterableImpl&lt; T &gt;</name>
    <filename>structinviwo_1_1OutportIterableImpl.html</filename>
    <base>inviwo::OutportIterable</base>
  </compound>
  <compound kind="class">
    <name>inviwo::OverlayProperty</name>
    <filename>classinviwo_1_1OverlayProperty.html</filename>
    <base>inviwo::CompositeProperty</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PackedLightSource</name>
    <filename>structinviwo_1_1PackedLightSource.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::ParallelCoordinates</name>
    <filename>classinviwo_1_1plot_1_1ParallelCoordinates.html</filename>
    <base>inviwo::Processor</base>
    <class kind="struct">inviwo::plot::ParallelCoordinates::AxisBase</class>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1plot_1_1ParallelCoordinates.html</anchorfile>
      <anchor>a2df885fd3f8a0effb9889187479189fe</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::ParseWrapper</name>
    <filename>structinviwo_1_1ParseWrapper.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::PartialConnection</name>
    <filename>structinviwo_1_1util_1_1detail_1_1PartialConnection.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::PartialDstLink</name>
    <filename>structinviwo_1_1util_1_1detail_1_1PartialDstLink.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PartiallyMatchingIdCondition</name>
    <filename>classinviwo_1_1PartiallyMatchingIdCondition.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::PartialProcessorNetwork</name>
    <filename>structinviwo_1_1util_1_1detail_1_1PartialProcessorNetwork.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::PartialSrcLink</name>
    <filename>structinviwo_1_1util_1_1detail_1_1PartialSrcLink.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>inviwo::hdf5::Path</name>
    <filename>classinviwo_1_1hdf5_1_1Path.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::Document::PathComponent</name>
    <filename>classinviwo_1_1Document_1_1PathComponent.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::PathLineProperties</name>
    <filename>classinviwo_1_1PathLineProperties.html</filename>
    <base>inviwo::IntegralLineProperties</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PathLines</name>
    <filename>classinviwo_1_1PathLines.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1PathLines.html</anchorfile>
      <anchor>aff7199d4f5172effcbb177239ae12cfe</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::PathLineTracer</name>
    <filename>classinviwo_1_1PathLineTracer.html</filename>
    <base>inviwo::IntegralLineTracer</base>
  </compound>
  <compound kind="class">
    <name>inviwo::hdf5::PathSelection</name>
    <filename>classinviwo_1_1hdf5_1_1PathSelection.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1hdf5_1_1PathSelection.html</anchorfile>
      <anchor>a74bcc12ed60bc07bd5166ac385a6cbfd</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::PerspectiveCamera</name>
    <filename>classinviwo_1_1PerspectiveCamera.html</filename>
    <base>inviwo::Camera</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual mat4</type>
      <name>calculateProjectionMatrix</name>
      <anchorfile>classinviwo_1_1PerspectiveCamera.html</anchorfile>
      <anchor>ae4e30d6b1ba81170a7b60ed4cde8c37e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::PickingAction</name>
    <filename>classinviwo_1_1PickingAction.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>getPickingId</name>
      <anchorfile>classinviwo_1_1PickingAction.html</anchorfile>
      <anchor>a1f8598ad525fd15767f03678c5c47b85</anchor>
      <arglist>(size_t id=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getLocalPickingId</name>
      <anchorfile>classinviwo_1_1PickingAction.html</anchorfile>
      <anchor>a26e62e9a4528f932c3577cec697df6b3</anchor>
      <arglist>(size_t id=0) const </arglist>
    </member>
    <member kind="function">
      <type>vec3</type>
      <name>getColor</name>
      <anchorfile>classinviwo_1_1PickingAction.html</anchorfile>
      <anchor>a43591f845a503cae84207938f97fcda4</anchor>
      <arglist>(size_t id=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSize</name>
      <anchorfile>classinviwo_1_1PickingAction.html</anchorfile>
      <anchor>a951511f76a987ee13fba9dbf6e900ddd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnabled</name>
      <anchorfile>classinviwo_1_1PickingAction.html</anchorfile>
      <anchor>af41fbf0ed0996eff1d198daea15f84e2</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAction</name>
      <anchorfile>classinviwo_1_1PickingAction.html</anchorfile>
      <anchor>aab3ba1e0840a8cef066eda7431392ee6</anchor>
      <arglist>(Callback action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProcessor</name>
      <anchorfile>classinviwo_1_1PickingAction.html</anchorfile>
      <anchor>a5a3dc6f5cae254f3a16528a999a046ab</anchor>
      <arglist>(Processor *processor)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::PickingController</name>
    <filename>classinviwo_1_1PickingController.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::PickingEvent</name>
    <filename>classinviwo_1_1PickingEvent.html</filename>
    <base>inviwo::Event</base>
    <member kind="function">
      <type>size_t</type>
      <name>getPickedId</name>
      <anchorfile>classinviwo_1_1PickingEvent.html</anchorfile>
      <anchor>a8f200adf1e40d79db45717d50b9a506f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>dvec2</type>
      <name>getPosition</name>
      <anchorfile>classinviwo_1_1PickingEvent.html</anchorfile>
      <anchor>aa87b342774082eac62d2f209848da3de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDepth</name>
      <anchorfile>classinviwo_1_1PickingEvent.html</anchorfile>
      <anchor>a6fb0da5641d68390486e1c264e067ff4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>dvec2</type>
      <name>getPreviousPosition</name>
      <anchorfile>classinviwo_1_1PickingEvent.html</anchorfile>
      <anchor>ab87b414fd26d0bb3c8849d754dd07d39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPreviousDepth</name>
      <anchorfile>classinviwo_1_1PickingEvent.html</anchorfile>
      <anchor>a4cf62ef8f091474c546871c031229fbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>dvec2</type>
      <name>getPressedPosition</name>
      <anchorfile>classinviwo_1_1PickingEvent.html</anchorfile>
      <anchor>ae9b99d8f8344fce3a5cc13f535630a39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPressedDepth</name>
      <anchorfile>classinviwo_1_1PickingEvent.html</anchorfile>
      <anchor>a58617e1521da6e537d3b1dcccc69fd89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>dvec2</type>
      <name>getDeltaPosition</name>
      <anchorfile>classinviwo_1_1PickingEvent.html</anchorfile>
      <anchor>aa708825d62934ebf787da0790f5fa6a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDeltaDepth</name>
      <anchorfile>classinviwo_1_1PickingEvent.html</anchorfile>
      <anchor>a2e4bf71773c105d14548cf3ce20d77fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>dvec2</type>
      <name>getDeltaPressedPosition</name>
      <anchorfile>classinviwo_1_1PickingEvent.html</anchorfile>
      <anchor>a3ebf0a1af1accb4a5101d808e1f10679</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDeltaPressedDepth</name>
      <anchorfile>classinviwo_1_1PickingEvent.html</anchorfile>
      <anchor>ad5d7932c9537dbb2eeb57835e648aa9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>dvec3</type>
      <name>getNDC</name>
      <anchorfile>classinviwo_1_1PickingEvent.html</anchorfile>
      <anchor>aa767a50b8048645318d76a45a4d705a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uvec2</type>
      <name>getCanvasSize</name>
      <anchorfile>classinviwo_1_1PickingEvent.html</anchorfile>
      <anchor>a6fb77d32b36a30df9cb0bb732117fbfd</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::PickingManager</name>
    <filename>classinviwo_1_1PickingManager.html</filename>
    <base>Singleton&lt; PickingManager &gt;</base>
    <class kind="struct">inviwo::PickingManager::Result</class>
  </compound>
  <compound kind="class">
    <name>inviwo::PickingMapper</name>
    <filename>classinviwo_1_1PickingMapper.html</filename>
    <member kind="function">
      <type></type>
      <name>PickingMapper</name>
      <anchorfile>classinviwo_1_1PickingMapper.html</anchorfile>
      <anchor>a0293a6b10ce43c54dbc5c8093a06631b</anchor>
      <arglist>(Processor *p, size_t size, std::function&lt; void(PickingEvent *)&gt; callback, PickingManager *manager=PickingManager::getPtr())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classinviwo_1_1PickingMapper.html</anchorfile>
      <anchor>a197c75e8f584c6d5dd509dd0a2057e2a</anchor>
      <arglist>(size_t newSize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classinviwo_1_1PickingMapper.html</anchorfile>
      <anchor>a755050a67f4798ee16f0654c418e80f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getPickingId</name>
      <anchorfile>classinviwo_1_1PickingMapper.html</anchorfile>
      <anchor>ac1d4d1a577b18de1c55319fd5e93c979</anchor>
      <arglist>(size_t id=0) const </arglist>
    </member>
    <member kind="function">
      <type>vec3</type>
      <name>getColor</name>
      <anchorfile>classinviwo_1_1PickingMapper.html</anchorfile>
      <anchor>a1ab12bf9f172ede263861b8d6f1656d6</anchor>
      <arglist>(size_t id=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSize</name>
      <anchorfile>classinviwo_1_1PickingMapper.html</anchorfile>
      <anchor>acf503035e2b960c5cc7259a08cd40649</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PickingAction *</type>
      <name>getPickingAction</name>
      <anchorfile>classinviwo_1_1PickingMapper.html</anchorfile>
      <anchor>aa4ec218142168f967c0aea3282db7f49</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::PixelToBufferProcessor</name>
    <filename>classinviwo_1_1PixelToBufferProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1PixelToBufferProcessor.html</anchorfile>
      <anchor>a2cf27972cf519b1c9c8cc32d9d19f0e8</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::PixelValue</name>
    <filename>classinviwo_1_1PixelValue.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1PixelValue.html</anchorfile>
      <anchor>a579edcabd904b81fdf5fa62de18c0e53</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::Plane</name>
    <filename>classinviwo_1_1Plane.html</filename>
    <member kind="function">
      <type>IntersectionResult</type>
      <name>getIntersection</name>
      <anchorfile>classinviwo_1_1Plane.html</anchorfile>
      <anchor>a2dc7bb2fa939c64cf849693b6df55087</anchor>
      <arglist>(const vec3 &amp;start, const vec3 &amp;stop) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>distance</name>
      <anchorfile>classinviwo_1_1Plane.html</anchorfile>
      <anchor>a1c00c81cf13ad9fe0f06816418a4d49a</anchor>
      <arglist>(const vec3 &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>vec3</type>
      <name>projectPoint</name>
      <anchorfile>classinviwo_1_1Plane.html</anchorfile>
      <anchor>abd3405f301794e1f688aa8f2166fc17a</anchor>
      <arglist>(const vec3 &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classinviwo_1_1Plane.html</anchorfile>
      <anchor>a2391f3d8e09d5b1fe8ca28a003001370</anchor>
      <arglist>(const vec3 &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::PlaneProperty</name>
    <filename>classinviwo_1_1PlaneProperty.html</filename>
    <base>inviwo::CompositeProperty</base>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::PlotTextProperty</name>
    <filename>classinviwo_1_1plot_1_1PlotTextProperty.html</filename>
    <base>inviwo::BoolCompositeProperty</base>
    <member kind="variable">
      <type>FloatProperty</type>
      <name>position_</name>
      <anchorfile>classinviwo_1_1plot_1_1PlotTextProperty.html</anchorfile>
      <anchor>aaae63618ee497f7707c1a47d43df6c08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FloatProperty</type>
      <name>offset_</name>
      <anchorfile>classinviwo_1_1plot_1_1PlotTextProperty.html</anchorfile>
      <anchor>a5d8e127b354da94a3bad4b1d36da0ed5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::PlottingGLModule</name>
    <filename>classinviwo_1_1PlottingGLModule.html</filename>
    <base>inviwo::InviwoModule</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PlottingModule</name>
    <filename>classinviwo_1_1PlottingModule.html</filename>
    <base>inviwo::InviwoModule</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::TransferFunctionDataPoint::Point</name>
    <filename>structinviwo_1_1TransferFunctionDataPoint_1_1Point.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::PointLight</name>
    <filename>classinviwo_1_1PointLight.html</filename>
    <base>inviwo::LightSource</base>
    <member kind="function" virtualness="virtual">
      <type>virtual vec3</type>
      <name>getPower</name>
      <anchorfile>classinviwo_1_1PointLight.html</anchorfile>
      <anchor>a5a3950e5233e4226530f92f85642b901</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>vec3</type>
      <name>getPosition</name>
      <anchorfile>classinviwo_1_1PointLight.html</anchorfile>
      <anchor>a1704492fa7893865b8fdd2ae4a73953a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classinviwo_1_1PointLight.html</anchorfile>
      <anchor>a304825698f503339cb48ee74d3147c04</anchor>
      <arglist>(const vec3 &amp;position)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::PointLightInteractionHandler</name>
    <filename>classinviwo_1_1PointLightInteractionHandler.html</filename>
    <base>inviwo::InteractionHandler</base>
    <base>inviwo::TrackballObject</base>
    <member kind="function">
      <type>void</type>
      <name>setLightPosFromScreenCoords</name>
      <anchorfile>classinviwo_1_1PointLightInteractionHandler.html</anchorfile>
      <anchor>abbfdde0bc5006fd2197ae94220ba36d6</anchor>
      <arglist>(const vec2 &amp;normalizedScreenCoord)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::PointLightSourceProcessor</name>
    <filename>classinviwo_1_1PointLightSourceProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1PointLightSourceProcessor.html</anchorfile>
      <anchor>a79a38544fc49481428f2d16cef7a1c04</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updatePointLightSource</name>
      <anchorfile>classinviwo_1_1PointLightSourceProcessor.html</anchorfile>
      <anchor>abd465745d5edd07d42c3517203f50c33</anchor>
      <arglist>(PointLight *lightSource)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::PointLightTrackball</name>
    <filename>classinviwo_1_1PointLightTrackball.html</filename>
    <base>inviwo::Trackball</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PointRenderer</name>
    <filename>classinviwo_1_1PointRenderer.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1PointRenderer.html</anchorfile>
      <anchor>af6b36682e82efb9fd12b3bb9f2bf24a1</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::Polygon</name>
    <filename>classinviwo_1_1Polygon.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::PolygonModeState</name>
    <filename>structinviwo_1_1utilgl_1_1PolygonModeState.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::Port</name>
    <filename>classinviwo_1_1Port.html</filename>
    <base>inviwo::Serializable</base>
    <member kind="function" virtualness="pure">
      <type>virtual uvec3</type>
      <name>getColorCode</name>
      <anchorfile>classinviwo_1_1Port.html</anchorfile>
      <anchor>a2c376e236412b98b5f3aa405a19be2dd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Port</name>
      <anchorfile>classinviwo_1_1Port.html</anchorfile>
      <anchor>a20f620bce13874929ec03a614a11d8d9</anchor>
      <arglist>(std::string identifier=&quot;&quot;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::PortConnection</name>
    <filename>classinviwo_1_1PortConnection.html</filename>
    <base>inviwo::Serializable</base>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classinviwo_1_1PortConnection.html</anchorfile>
      <anchor>a4ccb14674a698d64cc175c40490ddc05</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::PortInspector</name>
    <filename>classinviwo_1_1PortInspector.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PortInspectorFactory</name>
    <filename>classinviwo_1_1PortInspectorFactory.html</filename>
    <base>StandardFactory&lt; PortInspector, PortInspectorFactoryObject &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PortInspectorFactoryObject</name>
    <filename>classinviwo_1_1PortInspectorFactoryObject.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::PortInspectorManager</name>
    <filename>classinviwo_1_1PortInspectorManager.html</filename>
    <base>inviwo::Serializable</base>
    <base>inviwo::ProcessorNetworkObserver</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PortTraits</name>
    <filename>structinviwo_1_1PortTraits.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>classIdentifier</name>
      <anchorfile>structinviwo_1_1PortTraits.html</anchorfile>
      <anchor>a18905fc23ff0e09c78dc22a1b302fb21</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::PortTraits&lt; BaseImageInport&lt; 0 &gt; &gt;</name>
    <filename>structinviwo_1_1PortTraits_3_01BaseImageInport_3_010_01_4_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::PortTraits&lt; BaseImageInport&lt; 1 &gt; &gt;</name>
    <filename>structinviwo_1_1PortTraits_3_01BaseImageInport_3_011_01_4_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::PortTraits&lt; BrushingAndLinkingInport &gt;</name>
    <filename>structinviwo_1_1PortTraits_3_01BrushingAndLinkingInport_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::PortTraits&lt; BrushingAndLinkingOutport &gt;</name>
    <filename>structinviwo_1_1PortTraits_3_01BrushingAndLinkingOutport_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::PortTraits&lt; DataInport&lt; T, N, Flat &gt; &gt;</name>
    <filename>structinviwo_1_1PortTraits_3_01DataInport_3_01T_00_01N_00_01Flat_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <templarg>Flat</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::PortTraits&lt; DataOutport&lt; T &gt; &gt;</name>
    <filename>structinviwo_1_1PortTraits_3_01DataOutport_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::PortTraits&lt; ImageOutport &gt;</name>
    <filename>structinviwo_1_1PortTraits_3_01ImageOutport_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::PositionMetaData</name>
    <filename>classinviwo_1_1PositionMetaData.html</filename>
    <base>inviwo::MetaDataPrimitiveType</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PositionProperty</name>
    <filename>classinviwo_1_1PositionProperty.html</filename>
    <base>inviwo::CompositeProperty</base>
    <member kind="function">
      <type>const vec3 &amp;</type>
      <name>get</name>
      <anchorfile>classinviwo_1_1PositionProperty.html</anchorfile>
      <anchor>ab73bf11101c16d462ac2baac2a435d1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classinviwo_1_1PositionProperty.html</anchorfile>
      <anchor>a9e877bde4f0a94f7d2af593f173eff1c</anchor>
      <arglist>(const vec3 &amp;worldSpacePos)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::PostProcessingModule</name>
    <filename>classinviwo_1_1PostProcessingModule.html</filename>
    <base>inviwo::InviwoModule</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PresentationProcessor</name>
    <filename>classinviwo_1_1PresentationProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1PresentationProcessor.html</anchorfile>
      <anchor>ac3d0e4d74204c30c84be9e6c6ce96c3a</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::SystemCapabilities::ProcessMemoryInfo</name>
    <filename>structinviwo_1_1SystemCapabilities_1_1ProcessMemoryInfo.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::Processor</name>
    <filename>classinviwo_1_1Processor.html</filename>
    <base>inviwo::PropertyOwner</base>
    <base>inviwo::MetaDataOwner</base>
    <base>inviwo::ProcessorObservable</base>
    <base>inviwo::EventPropagator</base>
    <member kind="function">
      <type></type>
      <name>Processor</name>
      <anchorfile>classinviwo_1_1Processor.html</anchorfile>
      <anchor>a3fb26620c2c90c26f8566309cc5f55bd</anchor>
      <arglist>(const std::string &amp;identifier=&quot;&quot;, const std::string &amp;displayName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentifier</name>
      <anchorfile>classinviwo_1_1Processor.html</anchorfile>
      <anchor>a6fb08fe653c6b379ec26a49fafb40c1c</anchor>
      <arglist>(const std::string &amp;identifier)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisplayName</name>
      <anchorfile>classinviwo_1_1Processor.html</anchorfile>
      <anchor>a41469d166a47b848ea68d8fc36fcb585</anchor>
      <arglist>(const std::string &amp;displayName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1Processor.html</anchorfile>
      <anchor>a9ca0ca1407ee6e9f0c5e3a9b1a453dd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPortGroup</name>
      <anchorfile>classinviwo_1_1Processor.html</anchorfile>
      <anchor>a242144d371f50da49735d4956d494c59</anchor>
      <arglist>(Port *port) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allInportsAreReady</name>
      <anchorfile>classinviwo_1_1Processor.html</anchorfile>
      <anchor>aee7d5c97bc10f8d5d26c6ec0b4e5c72f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSource</name>
      <anchorfile>classinviwo_1_1Processor.html</anchorfile>
      <anchor>a49b6f92aa3d72e74de00ff28b96fc75a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSink</name>
      <anchorfile>classinviwo_1_1Processor.html</anchorfile>
      <anchor>aba006f093832b36cccf0a387cfeaa3a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReady</name>
      <anchorfile>classinviwo_1_1Processor.html</anchorfile>
      <anchor>a8b4316e0b7d4e6defeec07c5ee56cb38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1Processor.html</anchorfile>
      <anchor>a8aec4f59f1cccfa4f37993958f095359</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doIfNotReady</name>
      <anchorfile>classinviwo_1_1Processor.html</anchorfile>
      <anchor>a6d86ad3f64ff3cdadaad473036809a1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValid</name>
      <anchorfile>classinviwo_1_1Processor.html</anchorfile>
      <anchor>aeb74bbbce653265ae657f6314bebf14e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>classinviwo_1_1Processor.html</anchorfile>
      <anchor>aaa3c473b3078826df39fb54d7a449ee8</anchor>
      <arglist>(InvalidationLevel invalidationLevel, Property *modifiedProperty=nullptr) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addInteractionHandler</name>
      <anchorfile>classinviwo_1_1Processor.html</anchorfile>
      <anchor>adac1b6040b74014c3fe47b7c250b7323</anchor>
      <arglist>(InteractionHandler *interactionHandler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeInteractionHandler</name>
      <anchorfile>classinviwo_1_1Processor.html</anchorfile>
      <anchor>ab39cd287ac0afb5a2c2593fbcd9bb141</anchor>
      <arglist>(InteractionHandler *interactionHandler)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addPort</name>
      <anchorfile>classinviwo_1_1Processor.html</anchorfile>
      <anchor>a8789ed504b9d8e5b5ae0adea0683b214</anchor>
      <arglist>(Inport &amp;port, const std::string &amp;portGroup=&quot;default&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addPort</name>
      <anchorfile>classinviwo_1_1Processor.html</anchorfile>
      <anchor>a2a09fac8f44747e6e80986e5bd83d71b</anchor>
      <arglist>(Outport &amp;port, const std::string &amp;portGroup=&quot;default&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addPortToGroup</name>
      <anchorfile>classinviwo_1_1Processor.html</anchorfile>
      <anchor>a2affc6bd5676912ba70a850c24e147d8</anchor>
      <arglist>(Port *port, const std::string &amp;portGroup)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removePortFromGroups</name>
      <anchorfile>classinviwo_1_1Processor.html</anchorfile>
      <anchor>a46d0dc5bd8ce5d056f56b716f7dc6ab8</anchor>
      <arglist>(Port *port)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::processorDelete</name>
    <filename>structinviwo_1_1processorDelete.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorDockWidgetQt</name>
    <filename>classinviwo_1_1ProcessorDockWidgetQt.html</filename>
    <base>inviwo::InviwoDockWidget</base>
    <base>inviwo::ProcessorWidget</base>
    <base>inviwo::ProcessorObserver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onProcessorIdentifierChanged</name>
      <anchorfile>classinviwo_1_1ProcessorDockWidgetQt.html</anchorfile>
      <anchor>a02055b763c5c5e7f1750540b51777190</anchor>
      <arglist>(Processor *processor, const std::string &amp;oldIdentifier) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorDragObject</name>
    <filename>classinviwo_1_1ProcessorDragObject.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorFactory</name>
    <filename>classinviwo_1_1ProcessorFactory.html</filename>
    <base>Factory&lt; Processor &gt;</base>
    <base>StandardFactory&lt; Processor, ProcessorFactoryObject, const std::string &amp;, InviwoApplication * &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorFactoryObject</name>
    <filename>classinviwo_1_1ProcessorFactoryObject.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorFactoryObjectTemplate</name>
    <filename>classinviwo_1_1ProcessorFactoryObjectTemplate.html</filename>
    <templarg></templarg>
    <base>inviwo::ProcessorFactoryObject</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorGraphicsItem</name>
    <filename>classinviwo_1_1ProcessorGraphicsItem.html</filename>
    <base>inviwo::EditorGraphicsItem</base>
    <base>inviwo::ProcessorObserver</base>
    <base>inviwo::LabelGraphicsItemObserver</base>
    <base>inviwo::ProcessorMetaDataObserver</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>onLabelGraphicsItemChanged</name>
      <anchorfile>classinviwo_1_1ProcessorGraphicsItem.html</anchorfile>
      <anchor>a1a13e333d30ab210390c198c2f03994c</anchor>
      <arglist>(LabelGraphicsItem *item) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onProcessorIdentifierChanged</name>
      <anchorfile>classinviwo_1_1ProcessorGraphicsItem.html</anchorfile>
      <anchor>a47e41d4cab8f37d871ce8dc6eae3c6cd</anchor>
      <arglist>(Processor *, const std::string &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onProcessorDisplayNameChanged</name>
      <anchorfile>classinviwo_1_1ProcessorGraphicsItem.html</anchorfile>
      <anchor>a9db84c0bc79c4d435e8b1997631ab33a</anchor>
      <arglist>(Processor *, const std::string &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>onProcessorReadyChanged</name>
      <anchorfile>classinviwo_1_1ProcessorGraphicsItem.html</anchorfile>
      <anchor>a4474b461fb04ff8611ba01b17f40a1be</anchor>
      <arglist>(Processor *) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorInfo</name>
    <filename>structinviwo_1_1ProcessorInfo.html</filename>
    <member kind="variable">
      <type>const std::string</type>
      <name>classIdentifier</name>
      <anchorfile>structinviwo_1_1ProcessorInfo.html</anchorfile>
      <anchor>a953a8d2a0b3cab5f7498847ed03f8f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>displayName</name>
      <anchorfile>structinviwo_1_1ProcessorInfo.html</anchorfile>
      <anchor>a3f6bcf20dd1a2e65c127c7336a68d197</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>category</name>
      <anchorfile>structinviwo_1_1ProcessorInfo.html</anchorfile>
      <anchor>a19e6faf670938b88306d0bc4678beab4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Tags</type>
      <name>tags</name>
      <anchorfile>structinviwo_1_1ProcessorInfo.html</anchorfile>
      <anchor>a6f3590edf2b83d898ad14f89f39b2620</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>visible</name>
      <anchorfile>structinviwo_1_1ProcessorInfo.html</anchorfile>
      <anchor>a54109ebb587ddb8b62d81debd3270459</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorInportGraphicsItem</name>
    <filename>classinviwo_1_1ProcessorInportGraphicsItem.html</filename>
    <base>inviwo::ProcessorPortGraphicsItem</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorKernelOwner</name>
    <filename>classinviwo_1_1ProcessorKernelOwner.html</filename>
    <base>inviwo::KernelOwner</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notifyObserversKernelCompiled</name>
      <anchorfile>classinviwo_1_1ProcessorKernelOwner.html</anchorfile>
      <anchor>aa0f73a74ae01761b1391dcc03f6a794b</anchor>
      <arglist>(const cl::Kernel *kernel)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorLinkGraphicsItem</name>
    <filename>classinviwo_1_1ProcessorLinkGraphicsItem.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorMetaData</name>
    <filename>classinviwo_1_1ProcessorMetaData.html</filename>
    <base>inviwo::MetaData</base>
    <base>Observable&lt; ProcessorMetaDataObserver &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorMetaDataObserver</name>
    <filename>classinviwo_1_1ProcessorMetaDataObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorNetwork</name>
    <filename>classinviwo_1_1ProcessorNetwork.html</filename>
    <base>inviwo::Serializable</base>
    <base>inviwo::ProcessorNetworkObservable</base>
    <base>inviwo::ProcessorObserver</base>
    <base>inviwo::PropertyOwnerObserver</base>
    <base>inviwo::ProcessorMetaDataObserver</base>
    <member kind="function">
      <type>bool</type>
      <name>addProcessor</name>
      <anchorfile>classinviwo_1_1ProcessorNetwork.html</anchorfile>
      <anchor>a466097b0d3c0de9f2b727669f469865b</anchor>
      <arglist>(Processor *processor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeProcessor</name>
      <anchorfile>classinviwo_1_1ProcessorNetwork.html</anchorfile>
      <anchor>aac09b5ae5f01007abb94634f6ff8b443</anchor>
      <arglist>(Processor *processor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAndDeleteProcessor</name>
      <anchorfile>classinviwo_1_1ProcessorNetwork.html</anchorfile>
      <anchor>a0fc41f9aadb334eb5c0a6487ae62268b</anchor>
      <arglist>(Processor *processor)</arglist>
    </member>
    <member kind="function">
      <type>Processor *</type>
      <name>getProcessorByIdentifier</name>
      <anchorfile>classinviwo_1_1ProcessorNetwork.html</anchorfile>
      <anchor>aa1056dbdcc197a9eee28b30bd0a689c3</anchor>
      <arglist>(std::string identifier) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T * &gt;</type>
      <name>getProcessorsByType</name>
      <anchorfile>classinviwo_1_1ProcessorNetwork.html</anchorfile>
      <anchor>a50e67749f9109515d819755b791c64c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConnection</name>
      <anchorfile>classinviwo_1_1ProcessorNetwork.html</anchorfile>
      <anchor>af09e75e611fb743592e101f47275758b</anchor>
      <arglist>(Outport *sourcePort, Inport *destPort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeConnection</name>
      <anchorfile>classinviwo_1_1ProcessorNetwork.html</anchorfile>
      <anchor>a8e75314ee2a8d8f3687aa6de2c290a44</anchor>
      <arglist>(Outport *sourcePort, Inport *destPort)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classinviwo_1_1ProcessorNetwork.html</anchorfile>
      <anchor>a20f930dea3a29789658d593ccfb5d881</anchor>
      <arglist>(Outport *sourcePort, Inport *destPort) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLink</name>
      <anchorfile>classinviwo_1_1ProcessorNetwork.html</anchorfile>
      <anchor>ac8dba8aa2119e9d26551ccd800e44f89</anchor>
      <arglist>(Property *source, Property *destination)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeLink</name>
      <anchorfile>classinviwo_1_1ProcessorNetwork.html</anchorfile>
      <anchor>a3a46dc34c3db9a0de8d46d057f212c45</anchor>
      <arglist>(Property *source, Property *destination)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLinked</name>
      <anchorfile>classinviwo_1_1ProcessorNetwork.html</anchorfile>
      <anchor>a5a6b26fe0534cee823051c7dd271a5cb</anchor>
      <arglist>(Property *source, Property *destination) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLinkedBidirectional</name>
      <anchorfile>classinviwo_1_1ProcessorNetwork.html</anchorfile>
      <anchor>af40110644744da7b58aaaaf6cd3021cf</anchor>
      <arglist>(Property *source, Property *destination)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classinviwo_1_1ProcessorNetwork.html</anchorfile>
      <anchor>aff46df51bdbc8455da0966b6dc77e0f9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorNetworkConverter</name>
    <filename>classinviwo_1_1ProcessorNetworkConverter.html</filename>
    <base>inviwo::VersionConverter</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorNetworkEvaluationObservable</name>
    <filename>classinviwo_1_1ProcessorNetworkEvaluationObservable.html</filename>
    <base>Observable&lt; ProcessorNetworkEvaluationObserver &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorNetworkEvaluationObserver</name>
    <filename>classinviwo_1_1ProcessorNetworkEvaluationObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorNetworkEvaluator</name>
    <filename>classinviwo_1_1ProcessorNetworkEvaluator.html</filename>
    <base>inviwo::ProcessorNetworkObserver</base>
    <base>inviwo::ProcessorObserver</base>
    <base>inviwo::ProcessorNetworkEvaluationObservable</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorNetworkObservable</name>
    <filename>classinviwo_1_1ProcessorNetworkObservable.html</filename>
    <base>Observable&lt; ProcessorNetworkObserver &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorNetworkObserver</name>
    <filename>classinviwo_1_1ProcessorNetworkObserver.html</filename>
    <base>inviwo::Observer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onProcessorNetworkChange</name>
      <anchorfile>classinviwo_1_1ProcessorNetworkObserver.html</anchorfile>
      <anchor>a99103d63e219ff4db238b73aac540feb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorObservable</name>
    <filename>classinviwo_1_1ProcessorObservable.html</filename>
    <base>Observable&lt; ProcessorObserver &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorObserver</name>
    <filename>classinviwo_1_1ProcessorObserver.html</filename>
    <base>inviwo::Observer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onProcessorIdentifierChanged</name>
      <anchorfile>classinviwo_1_1ProcessorObserver.html</anchorfile>
      <anchor>a4b58fc482adad52e0552974b8d8e5154</anchor>
      <arglist>(Processor *, const std::string &amp;oldIdentifier)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onProcessorDisplayNameChanged</name>
      <anchorfile>classinviwo_1_1ProcessorObserver.html</anchorfile>
      <anchor>a483a31086db17492e3a84220e5f5a31d</anchor>
      <arglist>(Processor *, const std::string &amp;oldDisplayName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onProcessorSourceChanged</name>
      <anchorfile>classinviwo_1_1ProcessorObserver.html</anchorfile>
      <anchor>a4dbd1f23cc49ed33156d5da5fc13719a</anchor>
      <arglist>(Processor *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onProcessorSinkChanged</name>
      <anchorfile>classinviwo_1_1ProcessorObserver.html</anchorfile>
      <anchor>ac4eaecedf4c8532bffa3cad996bfe45b</anchor>
      <arglist>(Processor *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onProcessorReadyChanged</name>
      <anchorfile>classinviwo_1_1ProcessorObserver.html</anchorfile>
      <anchor>a2f3afc9e6a408de7469793cbd75a70ad</anchor>
      <arglist>(Processor *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorOutportGraphicsItem</name>
    <filename>classinviwo_1_1ProcessorOutportGraphicsItem.html</filename>
    <base>inviwo::ProcessorPortGraphicsItem</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorPair</name>
    <filename>classinviwo_1_1ProcessorPair.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorPortConnectionIndicator</name>
    <filename>classinviwo_1_1ProcessorPortConnectionIndicator.html</filename>
    <base>inviwo::EditorGraphicsItem</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorPortGraphicsItem</name>
    <filename>classinviwo_1_1ProcessorPortGraphicsItem.html</filename>
    <base>inviwo::EditorGraphicsItem</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorProgressGraphicsItem</name>
    <filename>classinviwo_1_1ProcessorProgressGraphicsItem.html</filename>
    <base>inviwo::EditorGraphicsItem</base>
    <base>inviwo::ProgressBarObserver</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>progressChanged</name>
      <anchorfile>classinviwo_1_1ProcessorProgressGraphicsItem.html</anchorfile>
      <anchor>ae93f88a116c6fcf28c05b229b662af14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>progressBarVisibilityChanged</name>
      <anchorfile>classinviwo_1_1ProcessorProgressGraphicsItem.html</anchorfile>
      <anchor>a508e23c4e133e844638cfe224ca5e778</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorStatusGraphicsItem</name>
    <filename>classinviwo_1_1ProcessorStatusGraphicsItem.html</filename>
    <base>inviwo::EditorGraphicsItem</base>
    <base>inviwo::ActivityIndicatorObserver</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorTraits</name>
    <filename>structinviwo_1_1ProcessorTraits.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::ProcessorTraits&lt; BasisTransform&lt; Mesh &gt; &gt;</name>
    <filename>structinviwo_1_1ProcessorTraits_3_01BasisTransform_3_01Mesh_01_4_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::ProcessorTraits&lt; BasisTransform&lt; Volume &gt; &gt;</name>
    <filename>structinviwo_1_1ProcessorTraits_3_01BasisTransform_3_01Volume_01_4_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::ProcessorTraits&lt; CompositeSink&lt; InportType, OutportType &gt; &gt;</name>
    <filename>structinviwo_1_1ProcessorTraits_3_01CompositeSink_3_01InportType_00_01OutportType_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::ProcessorTraits&lt; CompositeSource&lt; InportType, OutportType &gt; &gt;</name>
    <filename>structinviwo_1_1ProcessorTraits_3_01CompositeSource_3_01InportType_00_01OutportType_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::ProcessorTraits&lt; InputSelector&lt; Inport, Outport &gt; &gt;</name>
    <filename>structinviwo_1_1ProcessorTraits_3_01InputSelector_3_01Inport_00_01Outport_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::ProcessorTraits&lt; WorldTransform&lt; Mesh &gt; &gt;</name>
    <filename>structinviwo_1_1ProcessorTraits_3_01WorldTransform_3_01Mesh_01_4_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::ProcessorTraits&lt; WorldTransform&lt; Volume &gt; &gt;</name>
    <filename>structinviwo_1_1ProcessorTraits_3_01WorldTransform_3_01Volume_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorTree</name>
    <filename>classinviwo_1_1ProcessorTree.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorTreeItem</name>
    <filename>classinviwo_1_1ProcessorTreeItem.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorTreeWidget</name>
    <filename>classinviwo_1_1ProcessorTreeWidget.html</filename>
    <base>inviwo::InviwoDockWidget</base>
    <base>FactoryObserver&lt; ProcessorFactoryObject &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorWidget</name>
    <filename>classinviwo_1_1ProcessorWidget.html</filename>
    <base>inviwo::ProcessorWidgetObservable</base>
    <base>inviwo::ProcessorWidgetMetaDataObserver</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorWidgetFactory</name>
    <filename>classinviwo_1_1ProcessorWidgetFactory.html</filename>
    <base>Factory&lt; ProcessorWidget, const std::string &amp;, Processor * &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorWidgetFactoryObject</name>
    <filename>classinviwo_1_1ProcessorWidgetFactoryObject.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorWidgetFactoryObjectTemplate</name>
    <filename>classinviwo_1_1ProcessorWidgetFactoryObjectTemplate.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>inviwo::ProcessorWidgetFactoryObject</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorWidgetMetaData</name>
    <filename>classinviwo_1_1ProcessorWidgetMetaData.html</filename>
    <base>inviwo::MetaData</base>
    <base>Observable&lt; ProcessorWidgetMetaDataObserver &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorWidgetMetaDataObserver</name>
    <filename>classinviwo_1_1ProcessorWidgetMetaDataObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorWidgetObservable</name>
    <filename>classinviwo_1_1ProcessorWidgetObservable.html</filename>
    <base>Observable&lt; ProcessorWidgetObserver &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorWidgetObserver</name>
    <filename>classinviwo_1_1ProcessorWidgetObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ProcessorWidgetQt</name>
    <filename>classinviwo_1_1ProcessorWidgetQt.html</filename>
    <base>inviwo::ProcessorWidget</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::KernelManager::ProgramIdentifier</name>
    <filename>structinviwo_1_1KernelManager_1_1ProgramIdentifier.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ProgressBar</name>
    <filename>classinviwo_1_1ProgressBar.html</filename>
    <base>inviwo::ActivityIndicator</base>
    <base>inviwo::ProgressBarObservable</base>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ProgressBarObservable</name>
    <filename>classinviwo_1_1ProgressBarObservable.html</filename>
    <base>Observable&lt; ProgressBarObserver &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ProgressBarObserver</name>
    <filename>classinviwo_1_1ProgressBarObserver.html</filename>
    <base>inviwo::Observer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>progressChanged</name>
      <anchorfile>classinviwo_1_1ProgressBarObserver.html</anchorfile>
      <anchor>a049c7bbea27a5976ec8981a250b88557</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>progressBarVisibilityChanged</name>
      <anchorfile>classinviwo_1_1ProgressBarObserver.html</anchorfile>
      <anchor>a16b37e0c5a8566272fb32bdff974608a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ProgressBarOwner</name>
    <filename>classinviwo_1_1ProgressBarOwner.html</filename>
    <docanchor file="classinviwo_1_1ProgressBarOwner" title="Example">example</docanchor>
  </compound>
  <compound kind="struct">
    <name>inviwo::LightVolumeGL::PropagationParameters</name>
    <filename>structinviwo_1_1LightVolumeGL_1_1PropagationParameters.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::ScatterPlotGL::Properties</name>
    <filename>classinviwo_1_1plot_1_1ScatterPlotGL_1_1Properties.html</filename>
    <base>inviwo::CompositeProperty</base>
  </compound>
  <compound kind="class">
    <name>inviwo::Property</name>
    <filename>classinviwo_1_1Property.html</filename>
    <base>inviwo::PropertyObservable</base>
    <base>inviwo::Serializable</base>
    <base>inviwo::MetaDataOwner</base>
    <class kind="class">inviwo::Property::OnChangeBlocker</class>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIdentifier</name>
      <anchorfile>classinviwo_1_1Property.html</anchorfile>
      <anchor>a51434c3c9969e69b13b6cb42f5fb844d</anchor>
      <arglist>(const std::string &amp;identifier)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDisplayName</name>
      <anchorfile>classinviwo_1_1Property.html</anchorfile>
      <anchor>a625444dd520eb88ac1e7bb2cd2865f75</anchor>
      <arglist>(const std::string &amp;displayName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1Property.html</anchorfile>
      <anchor>ab661c6cbb1ca0b0630d795194c383015</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReadOnly</name>
      <anchorfile>classinviwo_1_1Property.html</anchorfile>
      <anchor>a0aacd36952a78d33aa04a5f6616e2eab</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerWidget</name>
      <anchorfile>classinviwo_1_1Property.html</anchorfile>
      <anchor>af8646a9dd52ea2bd7f33b3a6b1410739</anchor>
      <arglist>(PropertyWidget *propertyWidget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deregisterWidget</name>
      <anchorfile>classinviwo_1_1Property.html</anchorfile>
      <anchor>a741aed79f5978f000d84b4c5db77f63b</anchor>
      <arglist>(PropertyWidget *propertyWidget)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; PropertyWidget * &gt; &amp;</type>
      <name>getWidgets</name>
      <anchorfile>classinviwo_1_1Property.html</anchorfile>
      <anchor>afdc01aae7598fd0f4460a64d5bc33eda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitiatingWidget</name>
      <anchorfile>classinviwo_1_1Property.html</anchorfile>
      <anchor>a24f8305fa7c29f34618054a9531946f6</anchor>
      <arglist>(PropertyWidget *propertyWidget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearInitiatingWidget</name>
      <anchorfile>classinviwo_1_1Property.html</anchorfile>
      <anchor>a9b18b9392d85f49d4cc2383732ecbc0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasWidgets</name>
      <anchorfile>classinviwo_1_1Property.html</anchorfile>
      <anchor>afea51b32267bc6c4cf410ce7b4cfb9f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1Property.html</anchorfile>
      <anchor>abe9e4fc4c6ce717f0851abe26a4af542</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1Property.html</anchorfile>
      <anchor>ad83d37159cba1dde0e6a8f5e6cbbb94b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertyConverter</name>
    <filename>classinviwo_1_1PropertyConverter.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertyConverterManager</name>
    <filename>classinviwo_1_1PropertyConverterManager.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::PropertyDistanceSorter</name>
    <filename>structinviwo_1_1util_1_1PropertyDistanceSorter.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertyEditorWidget</name>
    <filename>classinviwo_1_1PropertyEditorWidget.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertyEditorWidgetQt</name>
    <filename>classinviwo_1_1PropertyEditorWidgetQt.html</filename>
    <base>inviwo::InviwoDockWidget</base>
    <base>inviwo::PropertyEditorWidget</base>
    <base>inviwo::PropertyObserver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveState</name>
      <anchorfile>classinviwo_1_1PropertyEditorWidgetQt.html</anchorfile>
      <anchor>a63b558c746410c44cd6f4921ee74e52e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadState</name>
      <anchorfile>classinviwo_1_1PropertyEditorWidgetQt.html</anchorfile>
      <anchor>a0f3223c8d81136b5af36078ae0d3f310</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertyFactory</name>
    <filename>classinviwo_1_1PropertyFactory.html</filename>
    <base>StandardFactory&lt; Property, PropertyFactoryObject, const std::string &amp;, const std::string &amp;, const std::string &amp; &gt;</base>
    <base>Factory&lt; Property, const std::string &amp; &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertyFactoryObject</name>
    <filename>classinviwo_1_1PropertyFactoryObject.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertyFactoryObjectTemplate</name>
    <filename>classinviwo_1_1PropertyFactoryObjectTemplate.html</filename>
    <templarg></templarg>
    <base>inviwo::PropertyFactoryObject</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertyLink</name>
    <filename>classinviwo_1_1PropertyLink.html</filename>
    <base>inviwo::Serializable</base>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classinviwo_1_1PropertyLink.html</anchorfile>
      <anchor>afafa974b828c3d636fa8b917f1d16421</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertyListEvent</name>
    <filename>classinviwo_1_1PropertyListEvent.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertyListFrame</name>
    <filename>classinviwo_1_1PropertyListFrame.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertyListWidget</name>
    <filename>classinviwo_1_1PropertyListWidget.html</filename>
    <base>inviwo::InviwoDockWidget</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertyObservable</name>
    <filename>classinviwo_1_1PropertyObservable.html</filename>
    <base>Observable&lt; PropertyObserver &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertyObserver</name>
    <filename>classinviwo_1_1PropertyObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertyOwner</name>
    <filename>classinviwo_1_1PropertyOwner.html</filename>
    <base>inviwo::PropertyOwnerObservable</base>
    <base>inviwo::Serializable</base>
    <base>inviwo::EventListener</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertyOwnerObservable</name>
    <filename>classinviwo_1_1PropertyOwnerObservable.html</filename>
    <base>Observable&lt; PropertyOwnerObserver &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertyOwnerObserver</name>
    <filename>classinviwo_1_1PropertyOwnerObserver.html</filename>
    <base>inviwo::Observer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onWillAddProperty</name>
      <anchorfile>classinviwo_1_1PropertyOwnerObserver.html</anchorfile>
      <anchor>a41429d641c4704883792b1515e87f586</anchor>
      <arglist>(Property *property, size_t index)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertyPresetManager</name>
    <filename>classinviwo_1_1PropertyPresetManager.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>appendPropertyPresets</name>
      <anchorfile>classinviwo_1_1PropertyPresetManager.html</anchorfile>
      <anchor>af6a4ea22933cfadcf2fca1dabe79f897</anchor>
      <arglist>(Property *target, Property *source)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static util::OnScopeExit</type>
      <name>scopedSerializationModeAll</name>
      <anchorfile>classinviwo_1_1PropertyPresetManager.html</anchorfile>
      <anchor>ac6d2b90c5fa7567124f7ae10f07ea6e8</anchor>
      <arglist>(Property *property)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertySelectionTree</name>
    <filename>classinviwo_1_1PropertySelectionTree.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertySelectionTreeDialog</name>
    <filename>classinviwo_1_1PropertySelectionTreeDialog.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertySelectionTreeWidget</name>
    <filename>classinviwo_1_1PropertySelectionTreeWidget.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertySemantics</name>
    <filename>classinviwo_1_1PropertySemantics.html</filename>
    <base>inviwo::Serializable</base>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::PropertyTrack</name>
    <filename>classinviwo_1_1animation_1_1PropertyTrack.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>inviwo::animation::TrackTyped</base>
    <base>inviwo::animation::BasePropertyTrack</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PropertyTrack</name>
      <anchorfile>classinviwo_1_1animation_1_1PropertyTrack.html</anchorfile>
      <anchor>a9a38d27ae1b3115aed62ea56cc020005</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classinviwo_1_1animation_1_1PropertyTrack.html</anchorfile>
      <anchor>a2dad73415647ff215c39817d6e57b0a9</anchor>
      <arglist>(const std::string &amp;name) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPriority</name>
      <anchorfile>classinviwo_1_1animation_1_1PropertyTrack.html</anchorfile>
      <anchor>a473f75e4f6befdb7370c8240d076d763</anchor>
      <arglist>(size_t priority) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getPriority</name>
      <anchorfile>classinviwo_1_1animation_1_1PropertyTrack.html</anchorfile>
      <anchor>a4e71d140537110b9ae6db78a51461f4d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AniamtionTimeState</type>
      <name>operator()</name>
      <anchorfile>classinviwo_1_1animation_1_1PropertyTrack.html</anchorfile>
      <anchor>a4d27b468c59904c0761e767be29794aa</anchor>
      <arglist>(Seconds from, Seconds to, AnimationState state) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classinviwo_1_1animation_1_1PropertyTrack.html</anchorfile>
      <anchor>a531b86366ad72f8cbdf19f72e6930dd5</anchor>
      <arglist>(const KeyframeSequence &amp;sequence) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>size</name>
      <anchorfile>classinviwo_1_1animation_1_1PropertyTrack.html</anchorfile>
      <anchor>a7ead1914ab5bfb0d5b44e2744c49026a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remove</name>
      <anchorfile>classinviwo_1_1animation_1_1PropertyTrack.html</anchorfile>
      <anchor>a3a8cbcad909984a77b10a30fcf54a060</anchor>
      <arglist>(size_t i) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addKeyFrameUsingPropertyValue</name>
      <anchorfile>classinviwo_1_1animation_1_1PropertyTrack.html</anchorfile>
      <anchor>a63f6157f26479e45f3253bf006426d6c</anchor>
      <arglist>(Seconds time, std::unique_ptr&lt; Interpolation &gt; interpolation) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertyTransformer</name>
    <filename>classinviwo_1_1PropertyTransformer.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>PropertyTransformer&lt; glm::tvec3&lt; T, glm::defaultp &gt; &gt;</name>
    <filename>classinviwo_1_1PropertyTransformer.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertyWidget</name>
    <filename>classinviwo_1_1PropertyWidget.html</filename>
    <member kind="function">
      <type></type>
      <name>PropertyWidget</name>
      <anchorfile>classinviwo_1_1PropertyWidget.html</anchorfile>
      <anchor>a97feb62f4addae4e0f4c15425e25a002</anchor>
      <arglist>(Property *property)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PropertyWidget</name>
      <anchorfile>classinviwo_1_1PropertyWidget.html</anchorfile>
      <anchor>a71306636facb4405dd9c89f2624252eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1PropertyWidget.html</anchorfile>
      <anchor>a0cf4d6db22560aa9db3121f5c0a810e3</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertyWidgetFactory</name>
    <filename>classinviwo_1_1PropertyWidgetFactory.html</filename>
    <base>Factory&lt; PropertyWidget, Property * &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertyWidgetFactoryObject</name>
    <filename>classinviwo_1_1PropertyWidgetFactoryObject.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertyWidgetFactoryObjectTemplate</name>
    <filename>classinviwo_1_1PropertyWidgetFactoryObjectTemplate.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>inviwo::PropertyWidgetFactoryObject</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PropertyWidgetQt</name>
    <filename>classinviwo_1_1PropertyWidgetQt.html</filename>
    <base>inviwo::PropertyWidget</base>
    <base>inviwo::PropertyObserver</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detailzip::proxy</name>
    <filename>structinviwo_1_1util_1_1detailzip_1_1proxy.html</filename>
    <templarg>Ts</templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::PVMModule</name>
    <filename>classinviwo_1_1PVMModule.html</filename>
    <base>inviwo::InviwoModule</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PVMVolumeReader</name>
    <filename>classinviwo_1_1PVMVolumeReader.html</filename>
    <base>DataReaderType&lt; Volume &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PVMVolumeWriter</name>
    <filename>classinviwo_1_1PVMVolumeWriter.html</filename>
    <base>DataWriterType&lt; Volume &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::Python3Module</name>
    <filename>classinviwo_1_1Python3Module.html</filename>
    <base>inviwo::InviwoModule</base>
  </compound>
  <compound kind="class">
    <name>inviwo::Python3QtModule</name>
    <filename>classinviwo_1_1Python3QtModule.html</filename>
    <base>inviwo::InviwoModule</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PythonEditorWidget</name>
    <filename>classinviwo_1_1PythonEditorWidget.html</filename>
    <base>inviwo::InviwoDockWidget</base>
    <base>inviwo::FileObserver</base>
    <base>inviwo::PythonExecutionOutputObeserver</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PythonExecutionOutputObeserver</name>
    <filename>classinviwo_1_1PythonExecutionOutputObeserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PythonExecutionOutputObservable</name>
    <filename>classinviwo_1_1PythonExecutionOutputObservable.html</filename>
    <base>Observable&lt; PythonExecutionOutputObeserver &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PythonInterpreter</name>
    <filename>classinviwo_1_1PythonInterpreter.html</filename>
    <base>inviwo::PythonExecutionOutputObservable</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PythonLogger</name>
    <filename>classinviwo_1_1PythonLogger.html</filename>
    <base>inviwo::PythonExecutionOutputObeserver</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PythonMenu</name>
    <filename>classinviwo_1_1PythonMenu.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::PythonScript</name>
    <filename>classinviwo_1_1PythonScript.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PythonScript</name>
      <anchorfile>classinviwo_1_1PythonScript.html</anchorfile>
      <anchor>ad15e78b76dca29ab28aaabecba032aa0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSource</name>
      <anchorfile>classinviwo_1_1PythonScript.html</anchorfile>
      <anchor>ab935f541b435a393fe9772e107afc30b</anchor>
      <arglist>(const std::string &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getSource</name>
      <anchorfile>classinviwo_1_1PythonScript.html</anchorfile>
      <anchor>ae0854192eaa4419828d732d47e021e96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classinviwo_1_1PythonScript.html</anchorfile>
      <anchor>adc1b9330e18d19a73d6093fce9cdae2d</anchor>
      <arglist>(const VariableMap &amp;extraLocalVariables=VariableMap(), std::function&lt; void(pybind11::dict)&gt; callback=[](pybind11::dict dict){})</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::PythonScriptDisk</name>
    <filename>classinviwo_1_1PythonScriptDisk.html</filename>
    <base>inviwo::PythonScript</base>
    <base>inviwo::SingleFileObserver</base>
  </compound>
  <compound kind="class">
    <name>inviwo::PythonTextEditor</name>
    <filename>classinviwo_1_1PythonTextEditor.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::QStringHelper</name>
    <filename>classinviwo_1_1QStringHelper.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::QStringHelper&lt; long int &gt;</name>
    <filename>classinviwo_1_1QStringHelper_3_01long_01int_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::QStringHelper&lt; unsigned long int &gt;</name>
    <filename>classinviwo_1_1QStringHelper_3_01unsigned_01long_01int_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::QtWidgetsModule</name>
    <filename>classinviwo_1_1QtWidgetsModule.html</filename>
    <base>inviwo::InviwoModule</base>
  </compound>
  <compound kind="class">
    <name>inviwo::QtWidgetsSettings</name>
    <filename>classinviwo_1_1QtWidgetsSettings.html</filename>
    <base>inviwo::Settings</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::InviwoApplication::Queue</name>
    <filename>structinviwo_1_1InviwoApplication_1_1Queue.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::kind::RAM</name>
    <filename>structinviwo_1_1kind_1_1RAM.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::RandomMeshGenerator</name>
    <filename>classinviwo_1_1RandomMeshGenerator.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1RandomMeshGenerator.html</anchorfile>
      <anchor>a526c124deeac8292f17037a6a72a9aff</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::RandomSphereGenerator</name>
    <filename>classinviwo_1_1RandomSphereGenerator.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1RandomSphereGenerator.html</anchorfile>
      <anchor>a4775ae44da9df4000fee46d16c727641</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::RangeException</name>
    <filename>classinviwo_1_1RangeException.html</filename>
    <base>inviwo::Exception</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::rangeRatio</name>
    <filename>structinviwo_1_1util_1_1detail_1_1rangeRatio.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::rangeRatioImpl</name>
    <filename>structinviwo_1_1util_1_1detail_1_1rangeRatioImpl.html</filename>
    <templarg></templarg>
    <templarg>D1</templarg>
    <templarg>D2</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::rangeRatioImpl&lt; T, D, D &gt;</name>
    <filename>structinviwo_1_1util_1_1detail_1_1rangeRatioImpl_3_01T_00_01D_00_01D_01_4.html</filename>
    <templarg></templarg>
    <templarg>D</templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::glui::RangeSlider</name>
    <filename>classinviwo_1_1glui_1_1RangeSlider.html</filename>
    <base>inviwo::glui::Element</base>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>convertDeltaToSlider</name>
      <anchorfile>classinviwo_1_1glui_1_1RangeSlider.html</anchorfile>
      <anchor>a9d0ce374bfa0c2e14194c7f1e1d65c15</anchor>
      <arglist>(const dvec2 &amp;delta) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::RangeSliderQt</name>
    <filename>classinviwo_1_1RangeSliderQt.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::rank</name>
    <filename>structinviwo_1_1util_1_1rank.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::rank&lt; const T &gt;</name>
    <filename>structinviwo_1_1util_1_1rank_3_01const_01T_01_4.html</filename>
    <templarg></templarg>
    <base>inviwo::util::rank</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::rank&lt; half_float::half &gt;</name>
    <filename>structinviwo_1_1util_1_1rank_3_01half__float_1_1half_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::RawDataReaderDialogQt</name>
    <filename>classinviwo_1_1RawDataReaderDialogQt.html</filename>
    <base>inviwo::DataReaderDialog</base>
  </compound>
  <compound kind="class">
    <name>inviwo::RawVolumeRAMLoader</name>
    <filename>classinviwo_1_1RawVolumeRAMLoader.html</filename>
    <base>DiskRepresentationLoader&lt; VolumeRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::RawVolumeReader</name>
    <filename>classinviwo_1_1RawVolumeReader.html</filename>
    <base>DataReaderType&lt; Volume &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::RBFVectorFieldGenerator2D</name>
    <filename>classinviwo_1_1RBFVectorFieldGenerator2D.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1RBFVectorFieldGenerator2D.html</anchorfile>
      <anchor>aa61d60b576b3b505c92f26a7c79fb57d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::RBFVectorFieldGenerator3D</name>
    <filename>classinviwo_1_1RBFVectorFieldGenerator3D.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1RBFVectorFieldGenerator3D.html</anchorfile>
      <anchor>ad5058caabd18738f1233cf71c440d2da</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::RedGreenProcessor</name>
    <filename>classinviwo_1_1RedGreenProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1RedGreenProcessor.html</anchorfile>
      <anchor>ac23215dbfcb813d14f97c8757cb47e9d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::SerializeBase::ReferenceData</name>
    <filename>structinviwo_1_1SerializeBase_1_1ReferenceData.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::SerializeBase::ReferenceDataContainer</name>
    <filename>classinviwo_1_1SerializeBase_1_1ReferenceDataContainer.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::RenderBufferObject</name>
    <filename>classinviwo_1_1RenderBufferObject.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::RenderContext</name>
    <filename>classinviwo_1_1RenderContext.html</filename>
    <base>Singleton&lt; RenderContext &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::glui::Renderer</name>
    <filename>classinviwo_1_1glui_1_1Renderer.html</filename>
    <member kind="function">
      <type>Texture2DArray *</type>
      <name>createUITextures</name>
      <anchorfile>classinviwo_1_1glui_1_1Renderer.html</anchorfile>
      <anchor>a58299741a4cf2e2b352e6a05ff98b806</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;files, const std::string &amp;sourcePath)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::representation_traits</name>
    <filename>structinviwo_1_1representation__traits.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::representation_traits&lt; Volume, kind::Base &gt;</name>
    <filename>structinviwo_1_1representation__traits_3_01Volume_00_01kind_1_1Base_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::representation_traits&lt; Volume, kind::Disk &gt;</name>
    <filename>structinviwo_1_1representation__traits_3_01Volume_00_01kind_1_1Disk_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::representation_traits&lt; Volume, kind::GL &gt;</name>
    <filename>structinviwo_1_1representation__traits_3_01Volume_00_01kind_1_1GL_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::representation_traits&lt; Volume, kind::RAM &gt;</name>
    <filename>structinviwo_1_1representation__traits_3_01Volume_00_01kind_1_1RAM_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::RepresentationConverter</name>
    <filename>classinviwo_1_1RepresentationConverter.html</filename>
    <templarg>BaseRepr</templarg>
    <base>inviwo::BaseRepresentationConverter</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverter&lt; BufferRepresentation &gt;</name>
    <filename>classinviwo_1_1RepresentationConverter.html</filename>
    <base>inviwo::BaseRepresentationConverter</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverter&lt; LayerRepresentation &gt;</name>
    <filename>classinviwo_1_1RepresentationConverter.html</filename>
    <base>inviwo::BaseRepresentationConverter</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverter&lt; VolumeRepresentation &gt;</name>
    <filename>classinviwo_1_1RepresentationConverter.html</filename>
    <base>inviwo::BaseRepresentationConverter</base>
  </compound>
  <compound kind="class">
    <name>inviwo::RepresentationConverterFactory</name>
    <filename>classinviwo_1_1RepresentationConverterFactory.html</filename>
    <templarg></templarg>
    <base>inviwo::BaseRepresentationConverterFactory</base>
  </compound>
  <compound kind="class">
    <name>inviwo::RepresentationConverterMetaFactory</name>
    <filename>classinviwo_1_1RepresentationConverterMetaFactory.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::RepresentationConverterPackage</name>
    <filename>classinviwo_1_1RepresentationConverterPackage.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::RepresentationConverterType</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <templarg>BaseRepr</templarg>
    <templarg>From</templarg>
    <templarg>To</templarg>
    <base>inviwo::RepresentationConverter</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverterType&lt; BufferRepresentation, BufferCL, BufferRAM &gt;</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <base>RepresentationConverter&lt; BufferRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverterType&lt; BufferRepresentation, BufferCLGL, BufferCL &gt;</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <base>RepresentationConverter&lt; BufferRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverterType&lt; BufferRepresentation, BufferCLGL, BufferGL &gt;</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <base>RepresentationConverter&lt; BufferRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverterType&lt; BufferRepresentation, BufferCLGL, BufferRAM &gt;</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <base>RepresentationConverter&lt; BufferRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverterType&lt; BufferRepresentation, BufferGL, BufferCLGL &gt;</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <base>RepresentationConverter&lt; BufferRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverterType&lt; BufferRepresentation, BufferGL, BufferRAM &gt;</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <base>RepresentationConverter&lt; BufferRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverterType&lt; BufferRepresentation, BufferRAM, BufferCL &gt;</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <base>RepresentationConverter&lt; BufferRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverterType&lt; BufferRepresentation, BufferRAM, BufferGL &gt;</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <base>RepresentationConverter&lt; BufferRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverterType&lt; LayerRepresentation, LayerCL, LayerRAM &gt;</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <base>RepresentationConverter&lt; LayerRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverterType&lt; LayerRepresentation, LayerCLGL, LayerCL &gt;</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <base>RepresentationConverter&lt; LayerRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverterType&lt; LayerRepresentation, LayerCLGL, LayerGL &gt;</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <base>RepresentationConverter&lt; LayerRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverterType&lt; LayerRepresentation, LayerCLGL, LayerRAM &gt;</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <base>RepresentationConverter&lt; LayerRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverterType&lt; LayerRepresentation, LayerDisk, LayerRAM &gt;</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <base>RepresentationConverter&lt; LayerRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverterType&lt; LayerRepresentation, LayerGL, LayerCLGL &gt;</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <base>RepresentationConverter&lt; LayerRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverterType&lt; LayerRepresentation, LayerGL, LayerRAM &gt;</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <base>RepresentationConverter&lt; LayerRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverterType&lt; LayerRepresentation, LayerRAM, LayerCL &gt;</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <base>RepresentationConverter&lt; LayerRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverterType&lt; LayerRepresentation, LayerRAM, LayerGL &gt;</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <base>RepresentationConverter&lt; LayerRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverterType&lt; VolumeRepresentation, VolumeCL, VolumeRAM &gt;</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <base>RepresentationConverter&lt; VolumeRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverterType&lt; VolumeRepresentation, VolumeCLGL, VolumeCL &gt;</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <base>RepresentationConverter&lt; VolumeRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverterType&lt; VolumeRepresentation, VolumeCLGL, VolumeGL &gt;</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <base>RepresentationConverter&lt; VolumeRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverterType&lt; VolumeRepresentation, VolumeCLGL, VolumeRAM &gt;</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <base>RepresentationConverter&lt; VolumeRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverterType&lt; VolumeRepresentation, VolumeDisk, VolumeRAM &gt;</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <base>RepresentationConverter&lt; VolumeRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverterType&lt; VolumeRepresentation, VolumeGL, VolumeCLGL &gt;</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <base>RepresentationConverter&lt; VolumeRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverterType&lt; VolumeRepresentation, VolumeGL, VolumeRAM &gt;</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <base>RepresentationConverter&lt; VolumeRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverterType&lt; VolumeRepresentation, VolumeRAM, VolumeCL &gt;</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <base>RepresentationConverter&lt; VolumeRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>RepresentationConverterType&lt; VolumeRepresentation, VolumeRAM, VolumeGL &gt;</name>
    <filename>classinviwo_1_1RepresentationConverterType.html</filename>
    <base>RepresentationConverter&lt; VolumeRepresentation &gt;</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detailzip::require</name>
    <filename>structinviwo_1_1util_1_1detailzip_1_1require.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::ResizeEvent</name>
    <filename>classinviwo_1_1ResizeEvent.html</filename>
    <base>inviwo::Event</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>shouldPropagateTo</name>
      <anchorfile>classinviwo_1_1ResizeEvent.html</anchorfile>
      <anchor>a04899ebb60c44406afa1d663c70de9a8</anchor>
      <arglist>(Inport *inport, Processor *processor, Outport *source) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::Resource</name>
    <filename>classinviwo_1_1Resource.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ResourceException</name>
    <filename>classinviwo_1_1ResourceException.html</filename>
    <base>inviwo::Exception</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ResourceManager</name>
    <filename>classinviwo_1_1ResourceManager.html</filename>
    <base>inviwo::ResourceManagerObservable</base>
    <member kind="function">
      <type>std::shared_ptr&lt; T &gt;</type>
      <name>getResource</name>
      <anchorfile>classinviwo_1_1ResourceManager.html</anchorfile>
      <anchor>a9caf9466f338ac8f064bbf8a425e3f66</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addResource</name>
      <anchorfile>classinviwo_1_1ResourceManager.html</anchorfile>
      <anchor>ad7af039e7272470f23ac74f9d6109128</anchor>
      <arglist>(const std::string &amp;key, std::shared_ptr&lt; T &gt; resource, bool overwrite=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasResource</name>
      <anchorfile>classinviwo_1_1ResourceManager.html</anchorfile>
      <anchor>a1f447e720bf72c91a61b47a7052edad0</anchor>
      <arglist>(const std::string &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeResource</name>
      <anchorfile>classinviwo_1_1ResourceManager.html</anchorfile>
      <anchor>a7774f8881eb69306a3365806faeec186</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeResource</name>
      <anchorfile>classinviwo_1_1ResourceManager.html</anchorfile>
      <anchor>a73089a330ccadcae86189236aca8a61c</anchor>
      <arglist>(const std::string &amp;key, const std::type_index &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classinviwo_1_1ResourceManager.html</anchorfile>
      <anchor>a7187ea17313938869369d62d5f631ecf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classinviwo_1_1ResourceManager.html</anchorfile>
      <anchor>ad73c0b6ecd373e089c376628db959f9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnabled</name>
      <anchorfile>classinviwo_1_1ResourceManager.html</anchorfile>
      <anchor>a24fa50f13b02ba89877a25b3aadcc64e</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfResources</name>
      <anchorfile>classinviwo_1_1ResourceManager.html</anchorfile>
      <anchor>abae19340c4e0d6bd1dee4aee0f047cb3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ResourceManagerDockWidget</name>
    <filename>classinviwo_1_1ResourceManagerDockWidget.html</filename>
    <base>inviwo::InviwoDockWidget</base>
    <base>inviwo::ResourceManagerObserver</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ResourceManagerObservable</name>
    <filename>classinviwo_1_1ResourceManagerObservable.html</filename>
    <base>Observable&lt; ResourceManagerObserver &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ResourceManagerObserver</name>
    <filename>classinviwo_1_1ResourceManagerObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::SyntaxFormater::Result</name>
    <filename>structinviwo_1_1SyntaxFormater_1_1Result.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::PickingManager::Result</name>
    <filename>structinviwo_1_1PickingManager_1_1Result.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::RunningImageMeanAndStandardDeviationCL</name>
    <filename>classinviwo_1_1RunningImageMeanAndStandardDeviationCL.html</filename>
    <base>inviwo::KernelOwner</base>
    <member kind="function">
      <type></type>
      <name>RunningImageMeanAndStandardDeviationCL</name>
      <anchorfile>classinviwo_1_1RunningImageMeanAndStandardDeviationCL.html</anchorfile>
      <anchor>a34b56e211fef7ee69e7fcdbd58816128</anchor>
      <arglist>(const uvec2 &amp;layerDimension=uvec2(32), const size2_t &amp;workgroupSize=uvec2(16))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeMeanAndStandardDeviation</name>
      <anchorfile>classinviwo_1_1RunningImageMeanAndStandardDeviationCL.html</anchorfile>
      <anchor>ac4eb7bc5524b6d09794e1825131474f4</anchor>
      <arglist>(const Layer *newSamples, int iteration, Layer *&amp;outMean, Layer *&amp;outStandardDeviation, bool useGLSharing, const VECTOR_CLASS&lt; cl::Event &gt; *waitForEvents=nullptr, cl::Event *event=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeMeanAndStandardDeviation</name>
      <anchorfile>classinviwo_1_1RunningImageMeanAndStandardDeviationCL.html</anchorfile>
      <anchor>ad9c22fb51ce04126db442ba483e08ea4</anchor>
      <arglist>(const uvec2 &amp;nSamples, const LayerCLBase *newSamples, int iteration, const LayerCLBase *prevMean, LayerCLBase *nextMean, const LayerCLBase *prevStandardDeviation, LayerCLBase *nextStandardDeviation, const size2_t &amp;workGroupSize, const VECTOR_CLASS&lt; cl::Event &gt; *waitForEvents=nullptr, cl::Event *event=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::RuntimeModuleLoading</name>
    <filename>structinviwo_1_1RuntimeModuleLoading.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::same_extent</name>
    <filename>structinviwo_1_1util_1_1same__extent.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::same_extent&lt; G&lt; T, P &gt;, U &gt;</name>
    <filename>structinviwo_1_1util_1_1same__extent_3_01G_3_01T_00_01P_01_4_00_01U_01_4.html</filename>
    <templarg></templarg>
    <templarg>P</templarg>
    <templarg>G</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::dispatching::filter::Scalars</name>
    <filename>structinviwo_1_1dispatching_1_1filter_1_1Scalars.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::ScalarToStringConverter</name>
    <filename>classinviwo_1_1ScalarToStringConverter.html</filename>
    <templarg></templarg>
    <base>TemplatePropertyConverter&lt; srcProperty, StringProperty &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::ScatterPlotGL</name>
    <filename>classinviwo_1_1plot_1_1ScatterPlotGL.html</filename>
    <class kind="class">inviwo::plot::ScatterPlotGL::Properties</class>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::ScatterPlotMatrixProcessor</name>
    <filename>classinviwo_1_1plot_1_1ScatterPlotMatrixProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1plot_1_1ScatterPlotMatrixProcessor.html</anchorfile>
      <anchor>a17281811bd13c8e93dcd929a8b086325</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::ScatterPlotProcessor</name>
    <filename>classinviwo_1_1plot_1_1ScatterPlotProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1plot_1_1ScatterPlotProcessor.html</anchorfile>
      <anchor>a16f6ed27f57bc2ca1e9efb3ec5478f07</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ScopedClockCL</name>
    <filename>classinviwo_1_1ScopedClockCL.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ScopedClockCPU</name>
    <filename>classinviwo_1_1ScopedClockCPU.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ScopedClockGL</name>
    <filename>classinviwo_1_1ScopedClockGL.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::Seed3Dto4D</name>
    <filename>classinviwo_1_1Seed3Dto4D.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1Seed3Dto4D.html</anchorfile>
      <anchor>a89dc0890ac7f2976fb93cd583daa17ca</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::SeedPointGenerator</name>
    <filename>classinviwo_1_1SeedPointGenerator.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1SeedPointGenerator.html</anchorfile>
      <anchor>ac09f233ceda6ceeff3865fb037dc0e06</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::SeedPointsFromMask</name>
    <filename>classinviwo_1_1SeedPointsFromMask.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1SeedPointsFromMask.html</anchorfile>
      <anchor>aab8d4273fb2107dc07f9ffbf795755f5</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::SeedsFromMaskSequence</name>
    <filename>classinviwo_1_1SeedsFromMaskSequence.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1SeedsFromMaskSequence.html</anchorfile>
      <anchor>ab43a0ef0410463a664fa2040c83659d7</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::hdf5::Handle::Selection</name>
    <filename>structinviwo_1_1hdf5_1_1Handle_1_1Selection.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::SelectionEvent</name>
    <filename>classinviwo_1_1SelectionEvent.html</filename>
    <base>inviwo::BrushingAndLinkingEvent</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::sequence</name>
    <filename>structinviwo_1_1util_1_1sequence.html</filename>
    <templarg></templarg>
    <class kind="struct">inviwo::util::sequence::iterator</class>
  </compound>
  <compound kind="class">
    <name>inviwo::SequenceTimerProperty</name>
    <filename>classinviwo_1_1SequenceTimerProperty.html</filename>
    <base>inviwo::CompositeProperty</base>
  </compound>
  <compound kind="class">
    <name>inviwo::Serializable</name>
    <filename>classinviwo_1_1Serializable.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::SerializationException</name>
    <filename>classinviwo_1_1SerializationException.html</filename>
    <base>inviwo::Exception</base>
    <class kind="struct">inviwo::SerializationException::SerializationExceptionData</class>
  </compound>
  <compound kind="struct">
    <name>inviwo::SerializationException::SerializationExceptionData</name>
    <filename>structinviwo_1_1SerializationException_1_1SerializationExceptionData.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::SerializeBase</name>
    <filename>classinviwo_1_1SerializeBase.html</filename>
    <class kind="struct">inviwo::SerializeBase::ReferenceData</class>
    <class kind="class">inviwo::SerializeBase::ReferenceDataContainer</class>
    <member kind="function">
      <type></type>
      <name>SerializeBase</name>
      <anchorfile>classinviwo_1_1SerializeBase.html</anchorfile>
      <anchor>a3bb3dcf0d06861406d28c362ecda48e3</anchor>
      <arglist>(bool allowReference=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SerializeBase</name>
      <anchorfile>classinviwo_1_1SerializeBase.html</anchorfile>
      <anchor>ae8455f32b9ca1758477a1ffafbaf995e</anchor>
      <arglist>(std::string fileName, bool allowReference=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SerializeBase</name>
      <anchorfile>classinviwo_1_1SerializeBase.html</anchorfile>
      <anchor>a66ae57926aae944cf66d92114247e647</anchor>
      <arglist>(std::istream &amp;stream, const std::string &amp;path, bool allowReference=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getFileName</name>
      <anchorfile>classinviwo_1_1SerializeBase.html</anchorfile>
      <anchor>a73b86dc48eddc54ea3658866eaa5097c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPrimitiveType</name>
      <anchorfile>classinviwo_1_1SerializeBase.html</anchorfile>
      <anchor>a6519c79cb6ca36c39b0b68519927298f</anchor>
      <arglist>(const std::type_info &amp;type) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::SerializeConstants</name>
    <filename>classinviwo_1_1SerializeConstants.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::Serializer</name>
    <filename>classinviwo_1_1Serializer.html</filename>
    <base>inviwo::SerializeBase</base>
    <member kind="function">
      <type></type>
      <name>Serializer</name>
      <anchorfile>classinviwo_1_1Serializer.html</anchorfile>
      <anchor>a3049bbffe46a71c7832f203e17c18969</anchor>
      <arglist>(const std::string &amp;fileName, bool allowReference=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeFile</name>
      <anchorfile>classinviwo_1_1Serializer.html</anchorfile>
      <anchor>a9d4c6a2bb0202db839c85a819b72d051</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeFile</name>
      <anchorfile>classinviwo_1_1Serializer.html</anchorfile>
      <anchor>aaa3f7c110082cff7101918df18800843</anchor>
      <arglist>(std::ostream &amp;stream, bool format=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::Settings</name>
    <filename>classinviwo_1_1Settings.html</filename>
    <base>inviwo::PropertyOwner</base>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classinviwo_1_1Settings.html</anchorfile>
      <anchor>a399a5222d0a245366715317953d24350</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>classinviwo_1_1Settings.html</anchorfile>
      <anchor>a58e660e86fe12e6c7559f2c613d2e1cd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::SettingsWidget</name>
    <filename>classinviwo_1_1SettingsWidget.html</filename>
    <base>inviwo::InviwoDockWidget</base>
    <member kind="variable" protection="protected">
      <type>QScrollArea *</type>
      <name>scrollArea_</name>
      <anchorfile>classinviwo_1_1SettingsWidget.html</anchorfile>
      <anchor>a822a1423700f54362fc97fc123c5b6f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; std::function&lt; void()&gt; &gt;</type>
      <name>onModulesDidRegister_</name>
      <anchorfile>classinviwo_1_1SettingsWidget.html</anchorfile>
      <anchor>a750760255f3cd91ae1e05ee098f2d20d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::Shader</name>
    <filename>classinviwo_1_1Shader.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ShaderManager</name>
    <filename>classinviwo_1_1ShaderManager.html</filename>
    <base>Singleton&lt; ShaderManager &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ShaderObject</name>
    <filename>classinviwo_1_1ShaderObject.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addOutDeclaration</name>
      <anchorfile>classinviwo_1_1ShaderObject.html</anchorfile>
      <anchor>ae7aa113ce50251ea92ead8355a0d904b</anchor>
      <arglist>(std::string name, int location=-1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::ShaderResource</name>
    <filename>classinviwo_1_1ShaderResource.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ShaderType</name>
    <filename>classinviwo_1_1ShaderType.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ShaderWidget</name>
    <filename>classinviwo_1_1ShaderWidget.html</filename>
    <base>inviwo::InviwoDockWidget</base>
  </compound>
  <compound kind="class">
    <name>inviwo::SharedLibrary</name>
    <filename>classinviwo_1_1SharedLibrary.html</filename>
    <member kind="function">
      <type>void *</type>
      <name>findSymbol</name>
      <anchorfile>classinviwo_1_1SharedLibrary.html</anchorfile>
      <anchor>a0311002e757680bc379085b825133ae7</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>findSymbolTyped</name>
      <anchorfile>classinviwo_1_1SharedLibrary.html</anchorfile>
      <anchor>a663ad43936e7135eea2290186297a175</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classinviwo_1_1SharedLibrary.html</anchorfile>
      <anchor>a7bfcc869230ff7546237d043860a5681</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::SharedOpenGLResources</name>
    <filename>classinviwo_1_1SharedOpenGLResources.html</filename>
    <base>Singleton&lt; SharedOpenGLResources &gt;</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::Shower</name>
    <filename>structinviwo_1_1util_1_1detail_1_1Shower.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::SimpleCondition</name>
    <filename>classinviwo_1_1SimpleCondition.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::SimpleGraphicsScene</name>
    <filename>classinviwo_1_1SimpleGraphicsScene.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::SimpleGraphicsView</name>
    <filename>classinviwo_1_1SimpleGraphicsView.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::SimpleLightingProperty</name>
    <filename>classinviwo_1_1SimpleLightingProperty.html</filename>
    <base>inviwo::CompositeProperty</base>
  </compound>
  <compound kind="class">
    <name>inviwo::SimpleMesh</name>
    <filename>classinviwo_1_1SimpleMesh.html</filename>
    <base>inviwo::Mesh</base>
  </compound>
  <compound kind="class">
    <name>inviwo::SimpleMeshCreator</name>
    <filename>classinviwo_1_1SimpleMeshCreator.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::SimpleRaycastingProperty</name>
    <filename>classinviwo_1_1SimpleRaycastingProperty.html</filename>
    <base>inviwo::CompositeProperty</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::SimpleState</name>
    <filename>structinviwo_1_1utilgl_1_1SimpleState.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Entity</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Validator</templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::SimpleWithRectangleLabel</name>
    <filename>classinviwo_1_1SimpleWithRectangleLabel.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::SingleFileObserver</name>
    <filename>classinviwo_1_1SingleFileObserver.html</filename>
    <base>inviwo::FileObserver</base>
    <member kind="function">
      <type></type>
      <name>SingleFileObserver</name>
      <anchorfile>classinviwo_1_1SingleFileObserver.html</anchorfile>
      <anchor>a7d8434eeabbc4194cf5eb16baec3b5e2</anchor>
      <arglist>(std::string filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classinviwo_1_1SingleFileObserver.html</anchorfile>
      <anchor>a764de154170cb244eeec20de28e63a32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classinviwo_1_1SingleFileObserver.html</anchorfile>
      <anchor>af63d2fb496c87e599070d7b4cb54eb05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BaseCallBack *</type>
      <name>onChange</name>
      <anchorfile>classinviwo_1_1SingleFileObserver.html</anchorfile>
      <anchor>ab05662d245eff00d6fb3c15ea440d7ce</anchor>
      <arglist>(std::function&lt; void()&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeOnChange</name>
      <anchorfile>classinviwo_1_1SingleFileObserver.html</anchorfile>
      <anchor>ae28be9b1936617b15b20f2b907d6e666</anchor>
      <arglist>(const BaseCallBack *callback)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::SinglePropertySetting</name>
    <filename>classinviwo_1_1SinglePropertySetting.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::Singleton</name>
    <filename>classinviwo_1_1Singleton.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>Singleton&lt; InviwoApplication &gt;</name>
    <filename>classinviwo_1_1Singleton.html</filename>
  </compound>
  <compound kind="class">
    <name>Singleton&lt; KernelManager &gt;</name>
    <filename>classinviwo_1_1Singleton.html</filename>
  </compound>
  <compound kind="class">
    <name>Singleton&lt; LogCentral &gt;</name>
    <filename>classinviwo_1_1Singleton.html</filename>
  </compound>
  <compound kind="class">
    <name>Singleton&lt; OpenCL &gt;</name>
    <filename>classinviwo_1_1Singleton.html</filename>
  </compound>
  <compound kind="class">
    <name>Singleton&lt; PickingManager &gt;</name>
    <filename>classinviwo_1_1Singleton.html</filename>
  </compound>
  <compound kind="class">
    <name>Singleton&lt; RenderContext &gt;</name>
    <filename>classinviwo_1_1Singleton.html</filename>
  </compound>
  <compound kind="class">
    <name>Singleton&lt; ShaderManager &gt;</name>
    <filename>classinviwo_1_1Singleton.html</filename>
  </compound>
  <compound kind="class">
    <name>Singleton&lt; SharedOpenGLResources &gt;</name>
    <filename>classinviwo_1_1Singleton.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::SingletonException</name>
    <filename>classinviwo_1_1SingletonException.html</filename>
    <base>inviwo::Exception</base>
  </compound>
  <compound kind="class">
    <name>inviwo::SingleVoxel</name>
    <filename>classinviwo_1_1SingleVoxel.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1SingleVoxel.html</anchorfile>
      <anchor>aef157fad780ae49ed1c9ecd0ebceae94</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::SkewedPerspectiveCamera</name>
    <filename>classinviwo_1_1SkewedPerspectiveCamera.html</filename>
    <base>inviwo::Camera</base>
    <member kind="function">
      <type>void</type>
      <name>setFrustum</name>
      <anchorfile>classinviwo_1_1SkewedPerspectiveCamera.html</anchorfile>
      <anchor>a2518c77a85f45b0d45b51a6f4700050b</anchor>
      <arglist>(vec4 val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrustumOffset</name>
      <anchorfile>classinviwo_1_1SkewedPerspectiveCamera.html</anchorfile>
      <anchor>a6771bd8569800f803b58b3d7b9528af2</anchor>
      <arglist>(vec2 val)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual mat4</type>
      <name>calculateProjectionMatrix</name>
      <anchorfile>classinviwo_1_1SkewedPerspectiveCamera.html</anchorfile>
      <anchor>abae75539f6507ac50aee87568cc47933</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::glui::Slider</name>
    <filename>classinviwo_1_1glui_1_1Slider.html</filename>
    <base>inviwo::glui::Element</base>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>convertDeltaToSlider</name>
      <anchorfile>classinviwo_1_1glui_1_1Slider.html</anchorfile>
      <anchor>ad553050b6ecb1e68a6d00ec88063de1c</anchor>
      <arglist>(const dvec2 &amp;delta) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::SliderWidgetQt</name>
    <filename>classinviwo_1_1SliderWidgetQt.html</filename>
    <templarg></templarg>
    <templarg>floatingPoint</templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::SliderWidgetQt&lt; T, false &gt;</name>
    <filename>classinviwo_1_1SliderWidgetQt_3_01T_00_01false_01_4.html</filename>
    <templarg></templarg>
    <base>inviwo::TemplateSliderWidget</base>
  </compound>
  <compound kind="class">
    <name>inviwo::SliderWidgetQt&lt; T, true &gt;</name>
    <filename>classinviwo_1_1SliderWidgetQt_3_01T_00_01true_01_4.html</filename>
    <templarg></templarg>
    <base>inviwo::TemplateSliderWidget</base>
  </compound>
  <compound kind="class">
    <name>inviwo::hdf5::Source</name>
    <filename>classinviwo_1_1hdf5_1_1Source.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1hdf5_1_1Source.html</anchorfile>
      <anchor>ac5ea54d589bf2a043b9c21424ef6b9ff</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::utildoc::TableBuilder::Span_t</name>
    <filename>structinviwo_1_1utildoc_1_1TableBuilder_1_1Span__t.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::Spatial4DSampler</name>
    <filename>classinviwo_1_1Spatial4DSampler.html</filename>
    <templarg>DataDims</templarg>
    <templarg>T</templarg>
    <base>inviwo::Spatial4DSamplerBase</base>
  </compound>
  <compound kind="class">
    <name>Spatial4DSampler&lt; 3, double &gt;</name>
    <filename>classinviwo_1_1Spatial4DSampler.html</filename>
    <base>inviwo::Spatial4DSamplerBase</base>
  </compound>
  <compound kind="class">
    <name>inviwo::Spatial4DSamplerBase</name>
    <filename>classinviwo_1_1Spatial4DSamplerBase.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::SpatialCameraCoordinateTransformer</name>
    <filename>classinviwo_1_1SpatialCameraCoordinateTransformer.html</filename>
    <templarg>N</templarg>
    <base>inviwo::SpatialCoordinateTransformer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix&lt; N+1, float &gt;</type>
      <name>getMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformer.html</anchorfile>
      <anchor>af007189784a15b603ac3569b9ceb5e03</anchor>
      <arglist>(CoordinateSpace from, CoordinateSpace to) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getClipToModelMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformer.html</anchorfile>
      <anchor>aabb605bc13c5b382018ff4f895b1d396</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getClipToDataMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformer.html</anchorfile>
      <anchor>afc3a4c3e092bdf34f379b1a94397f76e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getClipToViewMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformer.html</anchorfile>
      <anchor>ad6304b4a1268b84c8f6aafd9fc0d7acb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getClipToWorldMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformer.html</anchorfile>
      <anchor>a4be712c13df19cc2cf4de5eab7561ec9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToClipMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformer.html</anchorfile>
      <anchor>af5ea803482c732107255f4339732c8ad</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToDataMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformer.html</anchorfile>
      <anchor>ac84f40df2d9876cc3c23c0af20f77f46</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToViewMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformer.html</anchorfile>
      <anchor>ab770b3090619964a3eb47e7844045415</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToWorldMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformer.html</anchorfile>
      <anchor>aa47c7c69b59d9da9f64444cb627d2db2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToClipMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformer.html</anchorfile>
      <anchor>ae66e043ea3d58fc4618c6bd086f3527e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToModelMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformer.html</anchorfile>
      <anchor>a70d98783a92e318ee0c2c318c3bc90ce</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToViewMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformer.html</anchorfile>
      <anchor>a4721a9d0494acc4daf27002f69c9a970</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToWorldMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformer.html</anchorfile>
      <anchor>adf935aa5bdb53b45da7e8384693ba584</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getViewToClipMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformer.html</anchorfile>
      <anchor>a5481f6a8215221af93c453181a66c90f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getViewToModelMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformer.html</anchorfile>
      <anchor>acce2cad5f6cac0de8733f2d3523da140</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getViewToDataMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformer.html</anchorfile>
      <anchor>a36ce412b0bcff0c0a25444672221b03d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getViewToWorldMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformer.html</anchorfile>
      <anchor>ae213b6b36b747725a748ac5653768549</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToClipMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformer.html</anchorfile>
      <anchor>a9e66ad609fadfe600141b7157493acf0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToModelMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformer.html</anchorfile>
      <anchor>a24bb13f7028ef930eacb85f2ecc0c081</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToDataMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformer.html</anchorfile>
      <anchor>a69ff0a3db1d299aa5b597e75a0534d7d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToViewMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformer.html</anchorfile>
      <anchor>aeb4451f1bbf382e2d396799a761f2b76</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::SpatialCameraCoordinateTransformerImpl</name>
    <filename>classinviwo_1_1SpatialCameraCoordinateTransformerImpl.html</filename>
    <templarg>N</templarg>
    <base>inviwo::SpatialCameraCoordinateTransformer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getClipToDataMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a51a16945773bcf6e7eaa72802b630b18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getClipToModelMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a94ebad3d6e7ac0461b6a30ab3f4c4a06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getClipToViewMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a50b013f8b6f1c04839d771662f91c763</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getClipToWorldMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a75aa5976dc378397a4819a0231db5ffa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToClipMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a8651110ecfd5904c0a60849d7d42634d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToModelMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a1c352f96cf40f62e46f3981db69184c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToViewMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>adf388caa2f36e324f95fe15eaac3ebd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToWorldMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>aa85da67529720b8b6b9a9e702038073c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToClipMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>ad55ed5cd8e39a83a261cacd9104532d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToDataMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>aac98e335cbaa75821c3905de5f065b53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToViewMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a00a38b7231d9d2ddb11b867f42381d05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToWorldMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>ac2607f3ad4604f6113ee9d8529b64407</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getViewToClipMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a2ac008076e31808be9942d3e13ad9a79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getViewToDataMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a6395e285568df653893eade2ccc05761</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getViewToModelMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a2dda51f41aae2bbb5ba317535244a4c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getViewToWorldMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a8c120fba22ceac7c1ff948b41052c8a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToClipMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a332adf7422cfd81b79882a29e3bd9838</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToDataMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a8e4e089a6ee4e21e1fea693352e8e34f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToModelMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a10a259acb3cc62d3a162b68d0d1d99cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToViewMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a7d92fec3e1b618953f8d586cefe9849b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::SpatialCoordinateTransformer</name>
    <filename>classinviwo_1_1SpatialCoordinateTransformer.html</filename>
    <templarg>N</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix&lt; N+1, float &gt;</type>
      <name>getMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCoordinateTransformer.html</anchorfile>
      <anchor>a49354d79cf5737d45667b2ea47b6c2a8</anchor>
      <arglist>(CoordinateSpace from, CoordinateSpace to) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToDataMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCoordinateTransformer.html</anchorfile>
      <anchor>a27aacb4aee9825e0fb5acee94e2c843d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToWorldMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCoordinateTransformer.html</anchorfile>
      <anchor>add448aa46022cd1137e1ab55efd4b4c1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToModelMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCoordinateTransformer.html</anchorfile>
      <anchor>a412ad46b6626c72f58a62cd760577386</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToWorldMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCoordinateTransformer.html</anchorfile>
      <anchor>a22660b955a78e005dc47a770ef27812b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToModelMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCoordinateTransformer.html</anchorfile>
      <anchor>aefdde7c75234f97334a586baabe17c91</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToDataMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCoordinateTransformer.html</anchorfile>
      <anchor>a0d1b9d1b3eac55c85bf7b52df56d7635</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::SpatialCoordinateTransformerImpl</name>
    <filename>classinviwo_1_1SpatialCoordinateTransformerImpl.html</filename>
    <templarg>N</templarg>
    <base>inviwo::SpatialCoordinateTransformer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToModelMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCoordinateTransformerImpl.html</anchorfile>
      <anchor>ab273391f3e31137e80a6e5fe7353966f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToWorldMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCoordinateTransformerImpl.html</anchorfile>
      <anchor>a05028693f88fd4895d85090e8a33b2c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToDataMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCoordinateTransformerImpl.html</anchorfile>
      <anchor>a4c17845c13d2aa444817b3a5d93bbdca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToWorldMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCoordinateTransformerImpl.html</anchorfile>
      <anchor>a2483cb31830d6b9fb71b36d2926c5292</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToDataMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCoordinateTransformerImpl.html</anchorfile>
      <anchor>ad837be45d65de532d440a3f009aa4a9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToModelMatrix</name>
      <anchorfile>classinviwo_1_1SpatialCoordinateTransformerImpl.html</anchorfile>
      <anchor>acb8ccbd3c8550b142698e2f542e6d12d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::SpatialEntity</name>
    <filename>classinviwo_1_1SpatialEntity.html</filename>
    <templarg>N</templarg>
  </compound>
  <compound kind="class">
    <name>SpatialEntity&lt; 3 &gt;</name>
    <filename>classinviwo_1_1SpatialEntity.html</filename>
  </compound>
  <compound kind="class">
    <name>SpatialEntity&lt; SpatialDims &gt;</name>
    <filename>classinviwo_1_1SpatialEntity.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::SpatialSampler</name>
    <filename>classinviwo_1_1SpatialSampler.html</filename>
    <templarg>SpatialDims</templarg>
    <templarg>DataDims</templarg>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>SpatialSampler&lt; 2, DataDims, T &gt;</name>
    <filename>classinviwo_1_1SpatialSampler.html</filename>
  </compound>
  <compound kind="class">
    <name>SpatialSampler&lt; 3, 3, double &gt;</name>
    <filename>classinviwo_1_1SpatialSampler.html</filename>
  </compound>
  <compound kind="class">
    <name>SpatialSampler&lt; 3, DataDims, double &gt;</name>
    <filename>classinviwo_1_1SpatialSampler.html</filename>
  </compound>
  <compound kind="class">
    <name>SpatialSampler&lt; 3, DataDims, T &gt;</name>
    <filename>classinviwo_1_1SpatialSampler.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::SphereRenderer</name>
    <filename>classinviwo_1_1SphereRenderer.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1SphereRenderer.html</anchorfile>
      <anchor>a0b09bd3c84805dc1792cd4803868b747</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1SphereRenderer.html</anchorfile>
      <anchor>acd55190c7ab36763ce59d62221f1c691</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::SphericalPropertyTransformer</name>
    <filename>classinviwo_1_1SphericalPropertyTransformer.html</filename>
    <templarg></templarg>
    <base>inviwo::IdentityPropertyTransformer</base>
  </compound>
  <compound kind="class">
    <name>inviwo::SpotLight</name>
    <filename>classinviwo_1_1SpotLight.html</filename>
    <base>inviwo::LightSource</base>
    <member kind="function" virtualness="virtual">
      <type>virtual vec3</type>
      <name>getPower</name>
      <anchorfile>classinviwo_1_1SpotLight.html</anchorfile>
      <anchor>ae38fd477e4e6f11f8181ff600b697667</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>vec3</type>
      <name>getPosition</name>
      <anchorfile>classinviwo_1_1SpotLight.html</anchorfile>
      <anchor>af51f8327adcf98f489b7cac6073a456a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classinviwo_1_1SpotLight.html</anchorfile>
      <anchor>ab282b937949aea075e8e0683d9f1eff3</anchor>
      <arglist>(const vec3 &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>const vec3 &amp;</type>
      <name>getDirection</name>
      <anchorfile>classinviwo_1_1SpotLight.html</anchorfile>
      <anchor>a5458b75d61c6f467f2d7e4f086d73a40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirection</name>
      <anchorfile>classinviwo_1_1SpotLight.html</anchorfile>
      <anchor>ae38d434ef5ac15b11259ba30c561ce6b</anchor>
      <arglist>(const vec3 &amp;direction)</arglist>
    </member>
    <member kind="function">
      <type>const float &amp;</type>
      <name>getConeRadiusAngle</name>
      <anchorfile>classinviwo_1_1SpotLight.html</anchorfile>
      <anchor>a3c30dda079db7cb904541bd9e6dda448</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConeRadiusAngle</name>
      <anchorfile>classinviwo_1_1SpotLight.html</anchorfile>
      <anchor>ade5613e3cb264189d166f8d5f48c0516</anchor>
      <arglist>(const float &amp;angle)</arglist>
    </member>
    <member kind="function">
      <type>const float &amp;</type>
      <name>getConeFallOffAngle</name>
      <anchorfile>classinviwo_1_1SpotLight.html</anchorfile>
      <anchor>a9eba0ab96e840244c8f833f4704e67db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConeFallOffAngle</name>
      <anchorfile>classinviwo_1_1SpotLight.html</anchorfile>
      <anchor>a6673ac89bd2a23c798d22956da379914</anchor>
      <arglist>(const float &amp;angle)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFullVisbilityValue</name>
      <anchorfile>classinviwo_1_1SpotLight.html</anchorfile>
      <anchor>a7bfde18fe4cbf06e25c9e20b877eebdc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getPartialVisbilityValue</name>
      <anchorfile>classinviwo_1_1SpotLight.html</anchorfile>
      <anchor>ae4585e7e224b792f39a4ecd9e1f9fc59</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::SpotLightSourceProcessor</name>
    <filename>classinviwo_1_1SpotLightSourceProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1SpotLightSourceProcessor.html</anchorfile>
      <anchor>a49a392d10147dbcbf965818647d0a3f3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateSpotLightSource</name>
      <anchorfile>classinviwo_1_1SpotLightSourceProcessor.html</anchorfile>
      <anchor>a8d91c4b742c27bbab683e0d2c01cfc6f</anchor>
      <arglist>(SpotLight *lightSource)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::SSAO</name>
    <filename>classinviwo_1_1SSAO.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1SSAO.html</anchorfile>
      <anchor>adb3347102ee3ef48a8a4461c6bbc496b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1SSAO.html</anchorfile>
      <anchor>a96dfef87987dfc1c03f40fef095b4cc0</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::StandardEvaluationErrorHandler</name>
    <filename>structinviwo_1_1StandardEvaluationErrorHandler.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::StandardExceptionHandler</name>
    <filename>structinviwo_1_1StandardExceptionHandler.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::StandardFactory</name>
    <filename>classinviwo_1_1StandardFactory.html</filename>
    <templarg>T</templarg>
    <templarg>M</templarg>
    <templarg>K</templarg>
    <templarg>Args</templarg>
    <base>Factory&lt; T, K, Args... &gt;</base>
    <base>FactoryObservable&lt; M &gt;</base>
  </compound>
  <compound kind="class">
    <name>StandardFactory&lt; Camera, CameraFactoryObject &gt;</name>
    <filename>classinviwo_1_1StandardFactory.html</filename>
    <base>Factory&lt; Camera, const std::string &amp;, Args... &gt;</base>
    <base>FactoryObservable&lt; CameraFactoryObject &gt;</base>
  </compound>
  <compound kind="class">
    <name>StandardFactory&lt; Dialog, DialogFactoryObject &gt;</name>
    <filename>classinviwo_1_1StandardFactory.html</filename>
    <base>Factory&lt; Dialog, const std::string &amp;, Args... &gt;</base>
    <base>FactoryObservable&lt; DialogFactoryObject &gt;</base>
  </compound>
  <compound kind="class">
    <name>StandardFactory&lt; Inport, InportFactoryObject &gt;</name>
    <filename>classinviwo_1_1StandardFactory.html</filename>
    <base>Factory&lt; Inport, const std::string &amp;, Args... &gt;</base>
    <base>FactoryObservable&lt; InportFactoryObject &gt;</base>
  </compound>
  <compound kind="class">
    <name>StandardFactory&lt; Interpolation, InterpolationFactoryObject &gt;</name>
    <filename>classinviwo_1_1StandardFactory.html</filename>
    <base>Factory&lt; Interpolation, const std::string &amp;, Args... &gt;</base>
    <base>FactoryObservable&lt; InterpolationFactoryObject &gt;</base>
  </compound>
  <compound kind="class">
    <name>StandardFactory&lt; Outport, OutportFactoryObject &gt;</name>
    <filename>classinviwo_1_1StandardFactory.html</filename>
    <base>Factory&lt; Outport, const std::string &amp;, Args... &gt;</base>
    <base>FactoryObservable&lt; OutportFactoryObject &gt;</base>
  </compound>
  <compound kind="class">
    <name>StandardFactory&lt; PortInspector, PortInspectorFactoryObject &gt;</name>
    <filename>classinviwo_1_1StandardFactory.html</filename>
    <base>Factory&lt; PortInspector, const std::string &amp;, Args... &gt;</base>
    <base>FactoryObservable&lt; PortInspectorFactoryObject &gt;</base>
  </compound>
  <compound kind="class">
    <name>StandardFactory&lt; Processor, ProcessorFactoryObject, const std::string &amp;, InviwoApplication * &gt;</name>
    <filename>classinviwo_1_1StandardFactory.html</filename>
    <base>Factory&lt; Processor, const std::string &amp;, Args... &gt;</base>
    <base>FactoryObservable&lt; ProcessorFactoryObject &gt;</base>
  </compound>
  <compound kind="class">
    <name>StandardFactory&lt; Property, PropertyFactoryObject, const std::string &amp;, const std::string &amp;, const std::string &amp; &gt;</name>
    <filename>classinviwo_1_1StandardFactory.html</filename>
    <base>Factory&lt; Property, const std::string &amp;, Args... &gt;</base>
    <base>FactoryObservable&lt; PropertyFactoryObject &gt;</base>
  </compound>
  <compound kind="class">
    <name>StandardFactory&lt; Track, TrackFactoryObject &gt;</name>
    <filename>classinviwo_1_1StandardFactory.html</filename>
    <base>Factory&lt; Track, const std::string &amp;, Args... &gt;</base>
    <base>FactoryObservable&lt; TrackFactoryObject &gt;</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::StandardIdentifier</name>
    <filename>structinviwo_1_1StandardIdentifier.html</filename>
    <templarg></templarg>
    <base>inviwo::ElementIdentifier</base>
  </compound>
  <compound kind="class">
    <name>inviwo::StateCoordinator</name>
    <filename>classinviwo_1_1StateCoordinator.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>StateCoordinator</name>
      <anchorfile>classinviwo_1_1StateCoordinator.html</anchorfile>
      <anchor>a421542a479b6e7d6f5456c6e25f306a0</anchor>
      <arglist>(const T &amp;value, std::function&lt; void(const T &amp;)&gt; notifyer, std::function&lt; T()&gt; updater)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classinviwo_1_1StateCoordinator.html</anchorfile>
      <anchor>a7700587711d5f4984c8115464dc19744</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdate</name>
      <anchorfile>classinviwo_1_1StateCoordinator.html</anchorfile>
      <anchor>afb9aa479c960abe2768342778ad112a1</anchor>
      <arglist>(std::function&lt; T()&gt; updater)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNotify</name>
      <anchorfile>classinviwo_1_1StateCoordinator.html</anchorfile>
      <anchor>a1b81aef5bfbd0ace825ba98ec3fd5be8</anchor>
      <arglist>(std::function&lt; void(const T &amp;)&gt; notifier)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T &amp;</name>
      <anchorfile>classinviwo_1_1StateCoordinator.html</anchorfile>
      <anchor>a719f3e744600028cb6c1fae947008e45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get</name>
      <anchorfile>classinviwo_1_1StateCoordinator.html</anchorfile>
      <anchor>a7d7110aa1cafed121b36abcb3e36a1b1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StateCoordinator&lt; bool &gt;</name>
    <filename>classinviwo_1_1StateCoordinator.html</filename>
    <member kind="function">
      <type></type>
      <name>StateCoordinator</name>
      <anchorfile>classinviwo_1_1StateCoordinator.html</anchorfile>
      <anchor>a421542a479b6e7d6f5456c6e25f306a0</anchor>
      <arglist>(const bool &amp;value, std::function&lt; void(const bool &amp;)&gt; notifyer, std::function&lt; bool()&gt; updater)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classinviwo_1_1StateCoordinator.html</anchorfile>
      <anchor>a7700587711d5f4984c8115464dc19744</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdate</name>
      <anchorfile>classinviwo_1_1StateCoordinator.html</anchorfile>
      <anchor>afb9aa479c960abe2768342778ad112a1</anchor>
      <arglist>(std::function&lt; bool()&gt; updater)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNotify</name>
      <anchorfile>classinviwo_1_1StateCoordinator.html</anchorfile>
      <anchor>a1b81aef5bfbd0ace825ba98ec3fd5be8</anchor>
      <arglist>(std::function&lt; void(const bool &amp;)&gt; notifier)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const bool &amp;</name>
      <anchorfile>classinviwo_1_1StateCoordinator.html</anchorfile>
      <anchor>a719f3e744600028cb6c1fae947008e45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const bool &amp;</type>
      <name>get</name>
      <anchorfile>classinviwo_1_1StateCoordinator.html</anchorfile>
      <anchor>a7d7110aa1cafed121b36abcb3e36a1b1</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::NormalizedHistogram::Stats</name>
    <filename>structinviwo_1_1NormalizedHistogram_1_1Stats.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::StdUnorderedMapMetaData</name>
    <filename>classinviwo_1_1StdUnorderedMapMetaData.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>inviwo::MetaData</base>
  </compound>
  <compound kind="class">
    <name>inviwo::StdVectorMetaData</name>
    <filename>classinviwo_1_1StdVectorMetaData.html</filename>
    <templarg></templarg>
    <base>inviwo::MetaData</base>
  </compound>
  <compound kind="class">
    <name>inviwo::StereoCameraSyncer</name>
    <filename>classinviwo_1_1StereoCameraSyncer.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1StereoCameraSyncer.html</anchorfile>
      <anchor>a740e3131787786f11926a10fae0853cc</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::StipplingProperty</name>
    <filename>classinviwo_1_1StipplingProperty.html</filename>
    <base>inviwo::CompositeProperty</base>
  </compound>
  <compound kind="class">
    <name>inviwo::StlWriter</name>
    <filename>classinviwo_1_1StlWriter.html</filename>
    <base>DataWriterType&lt; Mesh &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::StreamLineProperties</name>
    <filename>classinviwo_1_1StreamLineProperties.html</filename>
    <base>inviwo::IntegralLineProperties</base>
  </compound>
  <compound kind="class">
    <name>inviwo::StreamLines</name>
    <filename>classinviwo_1_1StreamLines.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1StreamLines.html</anchorfile>
      <anchor>addc517744eedd55d89363a28a8f3b969</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::StreamLineTracer</name>
    <filename>classinviwo_1_1StreamLineTracer.html</filename>
    <base>inviwo::IntegralLineTracer</base>
  </compound>
  <compound kind="class">
    <name>inviwo::StreamRibbons</name>
    <filename>classinviwo_1_1StreamRibbons.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1StreamRibbons.html</anchorfile>
      <anchor>a566912f369aaea77700603a20c3e54cb</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::StringMultilinePropertyWidgetQt</name>
    <filename>classinviwo_1_1StringMultilinePropertyWidgetQt.html</filename>
    <base>inviwo::PropertyWidgetQt</base>
    <member kind="function">
      <type>void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1StringMultilinePropertyWidgetQt.html</anchorfile>
      <anchor>ac50229832c3d45763fc51b2906d9f44f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::StringProperty</name>
    <filename>classinviwo_1_1StringProperty.html</filename>
    <base>TemplateProperty&lt; std::string &gt;</base>
    <member kind="function">
      <type></type>
      <name>StringProperty</name>
      <anchorfile>classinviwo_1_1StringProperty.html</anchorfile>
      <anchor>a92566787d3d89abfb646ba1a087b60ae</anchor>
      <arglist>(std::string identifier, std::string displayName, std::string value=&quot;&quot;, InvalidationLevel invalidationLevel=InvalidationLevel::InvalidOutput, PropertySemantics semantics=PropertySemantics::Default)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::StringPropertyWidgetQt</name>
    <filename>classinviwo_1_1StringPropertyWidgetQt.html</filename>
    <base>inviwo::PropertyWidgetQt</base>
    <member kind="function">
      <type>void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1StringPropertyWidgetQt.html</anchorfile>
      <anchor>a8eb50b57b2dab60865146dd91233ee4d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::StringShaderResource</name>
    <filename>classinviwo_1_1StringShaderResource.html</filename>
    <base>inviwo::ShaderResource</base>
  </compound>
  <compound kind="class">
    <name>inviwo::StructuredCameraCoordinateTransformer</name>
    <filename>classinviwo_1_1StructuredCameraCoordinateTransformer.html</filename>
    <templarg>N</templarg>
    <base>inviwo::SpatialCameraCoordinateTransformer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix&lt; N+1, float &gt;</type>
      <name>getMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a5af425658cd7750ca132fcc8b03dbb4d</anchor>
      <arglist>(CoordinateSpace from, CoordinateSpace to) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getClipToModelMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a34ede0ed85ae23292ad82d8a5e2d823a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getClipToDataMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a82efa51966517172b4b78571ad1a52db</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getClipToTextureMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a520670b47badcae1f62b6a36fd0d4273</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getClipToViewMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a3ca5684c2e238bec30b55d41b46c8133</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getClipToIndexMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>ac6c8076b6f2678bd636124ef1e413924</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getClipToWorldMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a876f30b0e296252506ac6875e9af5755</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToClipMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a062b3e58cb0e2078b9e908d1c16e70ab</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToDataMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a8f03883dfc2d311f6babaca51ccfa6e8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToTextureMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a2b05a5fc9d5854c75c6c405171c6e0ae</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToViewMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>af5a1b5aeea45e1f18797ddd83b37b9e3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToIndexMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a541107354c9b13736ef02b9dac0ada01</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToWorldMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a1489968fe4ccd84d93b483b882b92017</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToClipMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>af6f33dcdc69e081632ac43932c0a492d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getTextureToClipMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>af555ca1aaff9a26bbf55f4f6d5de380a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToModelMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a442de81a06c95a6f52522b3b1bb9f2c6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getTextureToModelMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a6b8098c0c6832c948d79632b6f42f658</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToViewMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a89776f15053865d7e5785933b57c38f9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getTextureToViewMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>adb84031cf81edbd5b7055ab220c180b1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToIndexMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a87094c9b3fad11291c3a1b088a0d8c20</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getTextureToIndexMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>aeed2f986b6d506d508816027fdfb3e92</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToWorldMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a855932b2dccb3a41776e9d24bfed6ad0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getTextureToWorldMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>adf24d83293605c8f54227532e7652471</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getViewToClipMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a719c7216e01e59245d67bc5fb97de566</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getViewToModelMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a7259e58715db50a64c0007a8875904c9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getViewToDataMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a485dcccd07b1e5c71194416a655d9fab</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getViewToTextureMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a619cb18a9dfb7ce68c7adb32c7322eda</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getViewToIndexMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>ab4cb5fd654c2c7f50667ce0606e7e3d8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getViewToWorldMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a1e050773f4620ca66d298c60da98fad3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getIndexToClipMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>ade8295c62d0558600b51737b130116b3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getIndexToModelMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a577578169489d769a559bf1bf8b1ad97</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getIndexToDataMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a5955b0b8ded08af4b1c99493e2e4a2c4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getIndexToTextureMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a7aa375876a329cab88cad2b47624d427</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getIndexToViewMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a12a0d03e4424c96c14a3ad41db05852a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getIndexToWorldMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a34fccf532c386f8219ac126c69c665f6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToClipMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a4002d2a3c87bb390ee630d4d9b442063</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToModelMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>aa3fdb2d64768e8f97e1f7588d4ff0b75</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToDataMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>ad3cefdf6dbc7e55e3dc469e6722ba9a5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToTextureMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a486dbb6e147498c43da4512fc2508a16</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToViewMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>aeb21e2dfee55bfeebdbc7fb418e879ec</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToIndexMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformer.html</anchorfile>
      <anchor>a721573af588b5c7c00ef7f37927570d9</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::StructuredCameraCoordinateTransformerImpl</name>
    <filename>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</filename>
    <templarg>N</templarg>
    <base>inviwo::StructuredCameraCoordinateTransformer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getClipToDataMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a2c97fa843d4110acd4a0232e3f9f8c40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getClipToIndexMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>ab9db8babdfa0d55492933ea8d5e0da95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getClipToModelMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a6116c9af8d35c6d1604ba57d3c4dbd36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getClipToTextureMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>ad778bd1047c477488b1ea916440d038f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getClipToViewMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>acf07b1ff9d286f3b227a1c04513d4245</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getClipToWorldMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a432382904bd97e146dcd696a20d80b27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToClipMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>ae7867bc3007c062622b951594336f383</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToIndexMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a0ef19596cb1622fc5fed62881c36b7cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToModelMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a6f6afa9d30a95b5088c144b016b78973</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToViewMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a7574276f7a851562b59bd68300623314</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToWorldMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a92dda82ca3379dac34217c1b6006d454</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getIndexToClipMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a5872b1e30595670a6276452b49b57fde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getIndexToDataMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a2c128a653dad7cb1a055e4ed9fb6c413</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getIndexToModelMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a053f950d66acc7279ee45c0146914720</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getIndexToTextureMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>aec73fc037176e7329fb792fe5f8ad3a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getIndexToViewMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>adf8d0152ac5966d2a38e86b0271ce151</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getIndexToWorldMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a56f8f9fc2ed3b7797e51fcf9e274a899</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToClipMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a118611a0ec8b20edc0e1bf9d1785e9d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToDataMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a82098bc1e791785abef3d0bd6436aced</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToIndexMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a8aeb1786d2951907325a258d48dc12d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToTextureMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>ad451681cad3331c0583fc8f47a0e37c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToViewMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>ab2615bd329d0579b0696bc03718ee042</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToWorldMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a88899dc386352353f7631c2f4d5162b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getTextureToClipMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a4e1f6b2942894ac079f6fdb84590bf23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getTextureToIndexMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a6ab31c37fe5dcbabc966bfd246ac54f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getTextureToModelMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a0eb8aa64de0cc0892fdd2af080112aa0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getTextureToViewMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>ae7bf18a2739ecd6231da373041c51b47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getTextureToWorldMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>abc48d705de40a09f2d8472a0697712eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getViewToClipMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>ae0a6eebb2fbfe58a95e34972f12aa8c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getViewToDataMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a7c7f8837f8c8bcf7ca43cffa0fe8e028</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getViewToIndexMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a40089c112854ebc6efe21d6cc431b1f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getViewToModelMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>ae9226af663b4c55263f850b2e7c88ade</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getViewToTextureMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a4e9ffda7b7e23b8e447c4a592bfd370a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getViewToWorldMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>add88eceafe6a6cd18d07e66e07da61f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToClipMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a790d9c4ca79b5996bcfb4f2eb7950e82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToDataMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>ac447409ae7a510477f0f679bab253a56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToIndexMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a25cdc42add5c132bd8a52bf77dba2266</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToModelMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a2c3172a489c71202c749aae5db46e4d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToTextureMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>a3369f75c868a3ed4f5dd7c7ff7dc6d34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToViewMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCameraCoordinateTransformerImpl.html</anchorfile>
      <anchor>ab8e3a5146bf2821c4431a6da6454197b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::StructuredCoordinateTransformer</name>
    <filename>classinviwo_1_1StructuredCoordinateTransformer.html</filename>
    <templarg>N</templarg>
    <base>inviwo::SpatialCoordinateTransformer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix&lt; N+1, float &gt;</type>
      <name>getMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformer.html</anchorfile>
      <anchor>a42a88bf2dca274c03974936b42043c92</anchor>
      <arglist>(CoordinateSpace from, CoordinateSpace to) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToDataMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformer.html</anchorfile>
      <anchor>a62e91b36aea9988a48fae98f19cfd41d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToTextureMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformer.html</anchorfile>
      <anchor>a67ef0f83f41342e59119778e7b08375b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToIndexMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformer.html</anchorfile>
      <anchor>ae0f3a0f7140ace51d7520ecfd5f0ed76</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToWorldMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformer.html</anchorfile>
      <anchor>a692e7ff8302acddd6d74d839920aa684</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToModelMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformer.html</anchorfile>
      <anchor>a6327c25cb4fa128046e709e8163bf501</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getTextureToModelMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformer.html</anchorfile>
      <anchor>a4ff10c17d1535697aff49636570dc12d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToIndexMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformer.html</anchorfile>
      <anchor>a371270ffe47faa776160197174e5027c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getTextureToIndexMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformer.html</anchorfile>
      <anchor>a984ef91392d5e0cb5e62fc9a6b9f65df</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToWorldMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformer.html</anchorfile>
      <anchor>a7a0c1c6ccb93e1f0e8c7d8aea5ad5519</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getTextureToWorldMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformer.html</anchorfile>
      <anchor>a28a51b09cc2ff9d250d9f367b9004276</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getIndexToModelMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformer.html</anchorfile>
      <anchor>aa15482797d129384c66f49e866f2c711</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getIndexToDataMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformer.html</anchorfile>
      <anchor>abdeb16f74dbe1aae6f5011780e9e0ac7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getIndexToTextureMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformer.html</anchorfile>
      <anchor>ab3cbaf7f9d0f48150fa9a203cd9de037</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getIndexToWorldMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformer.html</anchorfile>
      <anchor>a0f2cfe9d5de723f782599a3dfbec7a2c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToModelMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformer.html</anchorfile>
      <anchor>abbbadaa976877c31751c60a975a603b8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToDataMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformer.html</anchorfile>
      <anchor>a51f0c1807625c6fb7441b90a6b9c58ea</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToTextureMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformer.html</anchorfile>
      <anchor>a55ee9684999cd6e405bcebdd16ae630f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToIndexMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformer.html</anchorfile>
      <anchor>a6a0ff8dba29c1622e1e96f811010cd3f</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::StructuredCoordinateTransformerImpl</name>
    <filename>classinviwo_1_1StructuredCoordinateTransformerImpl.html</filename>
    <templarg>N</templarg>
    <base>inviwo::StructuredCoordinateTransformer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToIndexMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformerImpl.html</anchorfile>
      <anchor>acd7b667693c184d3eb1bd7d9600a0390</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToModelMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformerImpl.html</anchorfile>
      <anchor>abbeb56497a3f3a8e3d08bd7a4f8209ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getDataToWorldMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformerImpl.html</anchorfile>
      <anchor>a6feb4aa02ba6637c9944ec0305ccd568</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getIndexToDataMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformerImpl.html</anchorfile>
      <anchor>ac57e79ebbf7029db4fda8b0c1d1fc0d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getIndexToModelMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformerImpl.html</anchorfile>
      <anchor>aa06af51813be93434a8d72b2a92bbc24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getIndexToTextureMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformerImpl.html</anchorfile>
      <anchor>a7ce9bf3a4b94ccb67f8065b0393aa11d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getIndexToWorldMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformerImpl.html</anchorfile>
      <anchor>a9a736185339fe6cd1b0d87879d078b8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToDataMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformerImpl.html</anchorfile>
      <anchor>a1e345be960720c563f0df504e422b1c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToIndexMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformerImpl.html</anchorfile>
      <anchor>af9f6da776f61bf62bd903a1f132fda8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToTextureMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformerImpl.html</anchorfile>
      <anchor>a13ec64608e1e1eba9a05959432392500</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getModelToWorldMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformerImpl.html</anchorfile>
      <anchor>a53ef07fd2a9eb1c07e4e0adfa7f7de9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getTextureToIndexMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformerImpl.html</anchorfile>
      <anchor>a384d32986d0d575c2172ddb0975f9ea9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getTextureToModelMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformerImpl.html</anchorfile>
      <anchor>ad96ce8b5c77e46c3cb2424c787e62b52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getTextureToWorldMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformerImpl.html</anchorfile>
      <anchor>a9423a5aa47c6b7f6264e2320a219036c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToDataMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformerImpl.html</anchorfile>
      <anchor>ac2d55613bb628805bffafd575388f990</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToIndexMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformerImpl.html</anchorfile>
      <anchor>a3bbfd330ce91fb7fa0593860ef9c358d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToModelMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformerImpl.html</anchorfile>
      <anchor>aabede70b59f788f703220243b6ff48f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix&lt; N+1, float &gt;</type>
      <name>getWorldToTextureMatrix</name>
      <anchorfile>classinviwo_1_1StructuredCoordinateTransformerImpl.html</anchorfile>
      <anchor>a40f6e40f17145cb517dd40846f7fae26</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::StructuredGridEntity</name>
    <filename>classinviwo_1_1StructuredGridEntity.html</filename>
    <templarg>N</templarg>
    <base>inviwo::SpatialEntity</base>
    <member kind="function">
      <type>Matrix&lt; N+1, float &gt;</type>
      <name>getIndexMatrix</name>
      <anchorfile>classinviwo_1_1StructuredGridEntity.html</anchorfile>
      <anchor>abbcf9423de53460be5b18f0f05ca3b52</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StructuredGridEntity&lt; 2 &gt;</name>
    <filename>classinviwo_1_1StructuredGridEntity.html</filename>
    <base>inviwo::SpatialEntity</base>
    <member kind="function">
      <type>Matrix&lt; N+1, float &gt;</type>
      <name>getIndexMatrix</name>
      <anchorfile>classinviwo_1_1StructuredGridEntity.html</anchorfile>
      <anchor>abbcf9423de53460be5b18f0f05ca3b52</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StructuredGridEntity&lt; 3 &gt;</name>
    <filename>classinviwo_1_1StructuredGridEntity.html</filename>
    <base>inviwo::SpatialEntity</base>
    <member kind="function">
      <type>Matrix&lt; N+1, float &gt;</type>
      <name>getIndexMatrix</name>
      <anchorfile>classinviwo_1_1StructuredGridEntity.html</anchorfile>
      <anchor>abbcf9423de53460be5b18f0f05ca3b52</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::SurfaceExtraction</name>
    <filename>classinviwo_1_1SurfaceExtraction.html</filename>
    <base>inviwo::Processor</base>
    <base>inviwo::ProgressBarOwner</base>
    <class kind="struct">inviwo::SurfaceExtraction::task</class>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1SurfaceExtraction.html</anchorfile>
      <anchor>a321c539714bf5845a6e8f22462e7978f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>classinviwo_1_1SurfaceExtraction.html</anchorfile>
      <anchor>a173559c80db6b3adfa499c99dedec5e8</anchor>
      <arglist>(InvalidationLevel invalidationLevel, Property *modifiedProperty=nullptr) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::SyncCLGL</name>
    <filename>classinviwo_1_1SyncCLGL.html</filename>
    <member kind="function">
      <type></type>
      <name>SyncCLGL</name>
      <anchorfile>classinviwo_1_1SyncCLGL.html</anchorfile>
      <anchor>a750e03292088f13bba7676153fb0fc63</anchor>
      <arglist>(const cl::Context &amp;context=OpenCL::getPtr() -&gt;getContext(), const cl::CommandQueue &amp;queue=OpenCL::getPtr() -&gt;getQueue())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToAquireGLObjectList</name>
      <anchorfile>classinviwo_1_1SyncCLGL.html</anchorfile>
      <anchor>a4d7ba741cd6790c90748655573aabb10</anchor>
      <arglist>(const BufferCLGL *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToAquireGLObjectList</name>
      <anchorfile>classinviwo_1_1SyncCLGL.html</anchorfile>
      <anchor>a8ac9c79cbc4624e1288b494048ea1a1f</anchor>
      <arglist>(const LayerCLGL *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToAquireGLObjectList</name>
      <anchorfile>classinviwo_1_1SyncCLGL.html</anchorfile>
      <anchor>a54b1526336756d2d89b95aea2419f621</anchor>
      <arglist>(const ImageCLGL *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToAquireGLObjectList</name>
      <anchorfile>classinviwo_1_1SyncCLGL.html</anchorfile>
      <anchor>a7e4416f0cb10bf50f0ed70b030451560</anchor>
      <arglist>(const VolumeCLGL *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>aquireAllObjects</name>
      <anchorfile>classinviwo_1_1SyncCLGL.html</anchorfile>
      <anchor>a34dc82531e6857875992a5d57d88a748</anchor>
      <arglist>(const std::vector&lt; cl::Event &gt; *waitForEvents=nullptr, cl::Event *event=nullptr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseAllGLObjects</name>
      <anchorfile>classinviwo_1_1SyncCLGL.html</anchorfile>
      <anchor>a1c8448e3557def3b03b0828354d07bd0</anchor>
      <arglist>(const std::vector&lt; cl::Event &gt; *waitForEvents=nullptr, cl::Event *event=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::SyntaxFormater</name>
    <filename>classinviwo_1_1SyntaxFormater.html</filename>
    <class kind="struct">inviwo::SyntaxFormater::Result</class>
  </compound>
  <compound kind="class">
    <name>inviwo::SyntaxHighligther</name>
    <filename>classinviwo_1_1SyntaxHighligther.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::SyntheticDataFrame</name>
    <filename>classinviwo_1_1plot_1_1SyntheticDataFrame.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1plot_1_1SyntheticDataFrame.html</anchorfile>
      <anchor>ab1de6568f090c31d4e88a10a4d02be60</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::SystemCapabilities</name>
    <filename>classinviwo_1_1SystemCapabilities.html</filename>
    <base>inviwo::Capabilities</base>
    <class kind="struct">inviwo::SystemCapabilities::CPUInfo</class>
    <class kind="struct">inviwo::SystemCapabilities::DiskInfo</class>
    <class kind="struct">inviwo::SystemCapabilities::MemoryInfo</class>
    <class kind="struct">inviwo::SystemCapabilities::OSInfo</class>
    <class kind="struct">inviwo::SystemCapabilities::ProcessMemoryInfo</class>
  </compound>
  <compound kind="class">
    <name>inviwo::SystemSettings</name>
    <filename>classinviwo_1_1SystemSettings.html</filename>
    <base>inviwo::Settings</base>
  </compound>
  <compound kind="class">
    <name>inviwo::utildoc::TableBuilder</name>
    <filename>classinviwo_1_1utildoc_1_1TableBuilder.html</filename>
    <class kind="struct">inviwo::utildoc::TableBuilder::ArrributeWrapper</class>
    <class kind="struct">inviwo::utildoc::TableBuilder::Header</class>
    <class kind="struct">inviwo::utildoc::TableBuilder::Span_t</class>
    <class kind="struct">inviwo::utildoc::TableBuilder::Wrapper</class>
  </compound>
  <compound kind="class">
    <name>inviwo::Tag</name>
    <filename>classinviwo_1_1Tag.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::Tags</name>
    <filename>classinviwo_1_1Tags.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::SurfaceExtraction::task</name>
    <filename>structinviwo_1_1SurfaceExtraction_1_1task.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::util::TempFileHandle</name>
    <filename>classinviwo_1_1util_1_1TempFileHandle.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::TemplateColumn</name>
    <filename>classinviwo_1_1plot_1_1TemplateColumn.html</filename>
    <templarg>T</templarg>
    <base>inviwo::plot::Column</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classinviwo_1_1plot_1_1TemplateColumn.html</anchorfile>
      <anchor>a0e6dc0002e5f1406227cba57f7a8a120</anchor>
      <arglist>(const std::string &amp;value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; DataPointBase &gt;</type>
      <name>get</name>
      <anchorfile>classinviwo_1_1plot_1_1TemplateColumn.html</anchorfile>
      <anchor>a6a08d56e218ad56f85d53c8c6ad90476</anchor>
      <arglist>(size_t idx, bool getStringsAsStrings) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateColumn&lt; std::uint32_t &gt;</name>
    <filename>classinviwo_1_1plot_1_1TemplateColumn.html</filename>
    <base>inviwo::plot::Column</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classinviwo_1_1plot_1_1TemplateColumn.html</anchorfile>
      <anchor>a0e6dc0002e5f1406227cba57f7a8a120</anchor>
      <arglist>(const std::string &amp;value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; DataPointBase &gt;</type>
      <name>get</name>
      <anchorfile>classinviwo_1_1plot_1_1TemplateColumn.html</anchorfile>
      <anchor>a6a08d56e218ad56f85d53c8c6ad90476</anchor>
      <arglist>(size_t idx, bool getStringsAsStrings) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::TemplateImageSampler</name>
    <filename>classinviwo_1_1TemplateImageSampler.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>T</type>
      <name>sample</name>
      <anchorfile>classinviwo_1_1TemplateImageSampler.html</anchorfile>
      <anchor>add86fe5bc7b4e13f5000aaa2f443fa19</anchor>
      <arglist>(const Vector&lt; 2, P &gt; &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sample</name>
      <anchorfile>classinviwo_1_1TemplateImageSampler.html</anchorfile>
      <anchor>ae26b42878b67401507d44d894b76a8ff</anchor>
      <arglist>(P x, P y)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::TemplateMinMaxPropertySettingsWidgetQt</name>
    <filename>classinviwo_1_1TemplateMinMaxPropertySettingsWidgetQt.html</filename>
    <templarg></templarg>
    <base>inviwo::PropertyWidget</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1TemplateMinMaxPropertySettingsWidgetQt.html</anchorfile>
      <anchor>a6bf41a002ae2bc6824067e3cbd0e47af</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWidget</name>
      <anchorfile>classinviwo_1_1TemplateMinMaxPropertySettingsWidgetQt.html</anchorfile>
      <anchor>aac964f4f3bafd85bbd02979a1e46b414</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWidget</name>
      <anchorfile>classinviwo_1_1TemplateMinMaxPropertySettingsWidgetQt.html</anchorfile>
      <anchor>a4a3428a1e9248b936d89ae72d7cf396d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::TemplateOptionProperty</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <templarg>T</templarg>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const T &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const T &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; AxisRangeMode &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const AxisRangeMode &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const AxisRangeMode &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; BackgroundStyle &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const BackgroundStyle &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const BackgroundStyle &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; BlendMode &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const BlendMode &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const BlendMode &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; BoundaryType &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const BoundaryType &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const BoundaryType &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; CartesianCoordinateAxis &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const CartesianCoordinateAxis &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const CartesianCoordinateAxis &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; ColoringMethod &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const ColoringMethod &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const ColoringMethod &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; ConnectivityType &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const ConnectivityType &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const ConnectivityType &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; CoordinateSpace &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const CoordinateSpace &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const CoordinateSpace &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; DataFormatId &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const DataFormatId &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const DataFormatId &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; DataRangeMode &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const DataRangeMode &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const DataRangeMode &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; double &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const double &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const double &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; DrawType &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const DrawType &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const DrawType &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; glui::BoxLayout::LayoutDirection &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const glui::BoxLayout::LayoutDirection &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const glui::BoxLayout::LayoutDirection &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; GlyphClippingMode &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const GlyphClippingMode &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const GlyphClippingMode &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; GlyphType &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const GlyphType &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const GlyphType &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; InputType &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const InputType &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const InputType &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; int &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const int &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const int &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; inviwo::IntegralLineProperties::Direction &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const inviwo::IntegralLineProperties::Direction &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const inviwo::IntegralLineProperties::Direction &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; inviwo::IntegralLineProperties::IntegrationScheme &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const inviwo::IntegralLineProperties::IntegrationScheme &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const inviwo::IntegralLineProperties::IntegrationScheme &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; inviwo::Shader::OnError &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const inviwo::Shader::OnError &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const inviwo::Shader::OnError &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; inviwo::Shader::UniformWarning &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const inviwo::Shader::UniformWarning &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const inviwo::Shader::UniformWarning &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; LabelPosition &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const LabelPosition &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const LabelPosition &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; LayerType &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const LayerType &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const LayerType &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; Layout &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const Layout &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const Layout &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; LineDrawMode &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const LineDrawMode &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const LineDrawMode &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; Location &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const Location &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const Location &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; MeshType &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const MeshType &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const MeshType &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; Method &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const Method &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const Method &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; Mode &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const Mode &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const Mode &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; NoiseType &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const NoiseType &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const NoiseType &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; Operator &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const Operator &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const Operator &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; Orientation &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const Orientation &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const Orientation &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; OutputType &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const OutputType &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const OutputType &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; Placement &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const Placement &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const Placement &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; Positioning &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const Positioning &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const Positioning &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; RenderMode &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const RenderMode &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const RenderMode &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; size_t &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const size_t &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const size_t &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; std::string &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const std::string &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const std::string &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; TickStyle &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const TickStyle &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const TickStyle &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; Type &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const Type &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const Type &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; UsageMode &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const UsageMode &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const UsageMode &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; util::VolumeLaplacianPostProcessing &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const util::VolumeLaplacianPostProcessing &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const util::VolumeLaplacianPostProcessing &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; utilgl::debug::BreakLevel &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const utilgl::debug::BreakLevel &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const utilgl::debug::BreakLevel &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; utilgl::debug::Mode &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const utilgl::debug::Mode &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const utilgl::debug::Mode &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateOptionProperty&lt; utilgl::debug::Severity &gt;</name>
    <filename>classinviwo_1_1TemplateOptionProperty.html</filename>
    <base>inviwo::BaseOptionProperty</base>
    <member kind="function">
      <type></type>
      <name>operator const utilgl::debug::Severity &amp;</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a4e27106f0b87b6d76620f593067e1c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a431da0f8e33dde6d9effd7d13e04de65</anchor>
      <arglist>(const std::string &amp;identifier, const std::string &amp;displayName, const utilgl::debug::Severity &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a067b975a3343924c522111556d5b268b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>a993af2cbb863fcaacd5a9333f8c3ec56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassIdentifierForWidget</name>
      <anchorfile>classinviwo_1_1TemplateOptionProperty.html</anchorfile>
      <anchor>adceff2bf4715523f2a22db73d312fafc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::TemplateOrdinalEditorWidget</name>
    <filename>classinviwo_1_1TemplateOrdinalEditorWidget.html</filename>
    <templarg>T</templarg>
    <base>inviwo::BaseOrdinalEditorWidget</base>
    <base>inviwo::OrdinalBaseWidget</base>
  </compound>
  <compound kind="class">
    <name>TemplateOrdinalEditorWidget&lt; int &gt;</name>
    <filename>classinviwo_1_1TemplateOrdinalEditorWidget.html</filename>
    <base>inviwo::BaseOrdinalEditorWidget</base>
    <base>OrdinalBaseWidget&lt; int &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::TemplateProperty</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <templarg>T</templarg>
    <base>inviwo::Property</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a86f8af6280465289e484af1522808ee9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a517e9afce7b793a86903cac6dc4c3d5d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; bool &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a86f8af6280465289e484af1522808ee9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a517e9afce7b793a86903cac6dc4c3d5d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; double &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a86f8af6280465289e484af1522808ee9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a517e9afce7b793a86903cac6dc4c3d5d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; dvec2 &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a86f8af6280465289e484af1522808ee9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a517e9afce7b793a86903cac6dc4c3d5d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; dvec3 &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a86f8af6280465289e484af1522808ee9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a517e9afce7b793a86903cac6dc4c3d5d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; dvec4 &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a86f8af6280465289e484af1522808ee9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a517e9afce7b793a86903cac6dc4c3d5d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; float &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a86f8af6280465289e484af1522808ee9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a517e9afce7b793a86903cac6dc4c3d5d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; glm::i64 &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; glm::tvec2&lt; double, glm::defaultp &gt; &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; glm::tvec2&lt; float, glm::defaultp &gt; &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; glm::tvec2&lt; int, glm::defaultp &gt; &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; glm::tvec2&lt; T, glm::defaultp &gt; &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; glm::tvec3&lt; T, glm::defaultp &gt; &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; int &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a86f8af6280465289e484af1522808ee9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a517e9afce7b793a86903cac6dc4c3d5d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; ivec2 &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a86f8af6280465289e484af1522808ee9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a517e9afce7b793a86903cac6dc4c3d5d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; ivec3 &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a86f8af6280465289e484af1522808ee9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a517e9afce7b793a86903cac6dc4c3d5d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; ivec4 &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a86f8af6280465289e484af1522808ee9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a517e9afce7b793a86903cac6dc4c3d5d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; mat3 &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a86f8af6280465289e484af1522808ee9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a517e9afce7b793a86903cac6dc4c3d5d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; mat4 &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a86f8af6280465289e484af1522808ee9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a517e9afce7b793a86903cac6dc4c3d5d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; size2_t &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a86f8af6280465289e484af1522808ee9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a517e9afce7b793a86903cac6dc4c3d5d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; size3_t &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a86f8af6280465289e484af1522808ee9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a517e9afce7b793a86903cac6dc4c3d5d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; size4_t &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a86f8af6280465289e484af1522808ee9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a517e9afce7b793a86903cac6dc4c3d5d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; size_t &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a86f8af6280465289e484af1522808ee9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a517e9afce7b793a86903cac6dc4c3d5d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; std::string &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a86f8af6280465289e484af1522808ee9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a517e9afce7b793a86903cac6dc4c3d5d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; std::vector&lt; std::string &gt; &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a86f8af6280465289e484af1522808ee9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a517e9afce7b793a86903cac6dc4c3d5d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; TransferFunction &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a86f8af6280465289e484af1522808ee9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a517e9afce7b793a86903cac6dc4c3d5d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; vec2 &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a86f8af6280465289e484af1522808ee9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a517e9afce7b793a86903cac6dc4c3d5d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; vec3 &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a86f8af6280465289e484af1522808ee9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a517e9afce7b793a86903cac6dc4c3d5d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TemplateProperty&lt; vec4 &gt;</name>
    <filename>classinviwo_1_1TemplateProperty.html</filename>
    <base>inviwo::Property</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a86f8af6280465289e484af1522808ee9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TemplateProperty.html</anchorfile>
      <anchor>a517e9afce7b793a86903cac6dc4c3d5d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::TemplatePropertyConverter</name>
    <filename>classinviwo_1_1TemplatePropertyConverter.html</filename>
    <templarg>srcProperty</templarg>
    <templarg>dstProperty</templarg>
    <base>inviwo::PropertyConverter</base>
  </compound>
  <compound kind="class">
    <name>TemplatePropertyConverter&lt; srcProperty, StringProperty &gt;</name>
    <filename>classinviwo_1_1TemplatePropertyConverter.html</filename>
    <base>inviwo::PropertyConverter</base>
  </compound>
  <compound kind="class">
    <name>inviwo::TemplatePropertySettingsWidgetQt</name>
    <filename>classinviwo_1_1TemplatePropertySettingsWidgetQt.html</filename>
    <templarg></templarg>
    <base>inviwo::PropertyWidget</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1TemplatePropertySettingsWidgetQt.html</anchorfile>
      <anchor>aa04dd6c20d685cf6d8b2db1a2468e287</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWidget</name>
      <anchorfile>classinviwo_1_1TemplatePropertySettingsWidgetQt.html</anchorfile>
      <anchor>a83440826238a7cbeeba1e199181839f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWidget</name>
      <anchorfile>classinviwo_1_1TemplatePropertySettingsWidgetQt.html</anchorfile>
      <anchor>a284864f2b56894cd3f6cdebcd6ca3dc0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::TemplateSliderWidget</name>
    <filename>classinviwo_1_1TemplateSliderWidget.html</filename>
    <templarg></templarg>
    <base>inviwo::BaseSliderWidgetQt</base>
    <base>inviwo::OrdinalBaseWidget</base>
  </compound>
  <compound kind="class">
    <name>inviwo::TemplateVolumeSampler</name>
    <filename>classinviwo_1_1TemplateVolumeSampler.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>DataDims</templarg>
    <base>SpatialSampler&lt; 3, DataDims, T &gt;</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::TexAtlasEntry</name>
    <filename>structinviwo_1_1TexAtlasEntry.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::TexAtlasRenderInfo</name>
    <filename>structinviwo_1_1TexAtlasRenderInfo.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::TexEnv</name>
    <filename>structinviwo_1_1utilgl_1_1TexEnv.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::TexParameter</name>
    <filename>structinviwo_1_1utilgl_1_1TexParameter.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::TextEditorDockWidget</name>
    <filename>classinviwo_1_1TextEditorDockWidget.html</filename>
    <base>inviwo::PropertyEditorWidgetQt</base>
  </compound>
  <compound kind="class">
    <name>inviwo::TextFileReader</name>
    <filename>classinviwo_1_1TextFileReader.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>read</name>
      <anchorfile>classinviwo_1_1TextFileReader.html</anchorfile>
      <anchor>ae85bd15ccd4d33b1bc8cdb6bfb6d076f</anchor>
      <arglist>(const std::string &amp;filePath)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>read</name>
      <anchorfile>classinviwo_1_1TextFileReader.html</anchorfile>
      <anchor>a5d85a6c7f74a6b75c4faa7b482edf5f5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::TextOverlayGL</name>
    <filename>classinviwo_1_1TextOverlayGL.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1TextOverlayGL.html</anchorfile>
      <anchor>a3b602a8eb4f5a5daf62a77b18a551344</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getString</name>
      <anchorfile>classinviwo_1_1TextOverlayGL.html</anchorfile>
      <anchor>a29d339f12e5023b8ee8448a37feadcf7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::TextRenderer</name>
    <filename>classinviwo_1_1TextRenderer.html</filename>
    <class kind="struct">inviwo::TextRenderer::FontCache</class>
    <class kind="struct">inviwo::TextRenderer::GlyphEntry</class>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classinviwo_1_1TextRenderer.html</anchorfile>
      <anchor>aef0e70efc54a80b6d3eb8c20df447766</anchor>
      <arglist>(const std::string &amp;fontPath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classinviwo_1_1TextRenderer.html</anchorfile>
      <anchor>a320c1c768b293cb16ba0b61f5b1fd82c</anchor>
      <arglist>(const std::string &amp;str, float x, float y, const vec2 &amp;scale, const vec4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renderToTexture</name>
      <anchorfile>classinviwo_1_1TextRenderer.html</anchorfile>
      <anchor>ad2d1525cf5ffdc7b0fe0dca6fcbe7f91</anchor>
      <arglist>(std::shared_ptr&lt; Texture2D &gt; texture, const std::string &amp;str, const vec4 &amp;color, bool clearTexture=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renderToTexture</name>
      <anchorfile>classinviwo_1_1TextRenderer.html</anchorfile>
      <anchor>a7f9876752a8b00eb76bba4a8a15b1970</anchor>
      <arglist>(std::shared_ptr&lt; Texture2D &gt; texture, const size2_t &amp;origin, const size2_t &amp;size, const std::string &amp;str, const vec4 &amp;color, bool clearTexture=true)</arglist>
    </member>
    <member kind="function">
      <type>vec2</type>
      <name>computeTextSize</name>
      <anchorfile>classinviwo_1_1TextRenderer.html</anchorfile>
      <anchor>a8abe4ba940e69670be37b589f93f6095</anchor>
      <arglist>(const std::string &amp;str, const vec2 &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>vec2</type>
      <name>computeTextSize</name>
      <anchorfile>classinviwo_1_1TextRenderer.html</anchorfile>
      <anchor>aae96880333e48b113eef3d16c7fa39a8</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLineSpacing</name>
      <anchorfile>classinviwo_1_1TextRenderer.html</anchorfile>
      <anchor>adc7715714f0a4c50b643ef02d115898d</anchor>
      <arglist>(double lineSpacing)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBaseLineOffset</name>
      <anchorfile>classinviwo_1_1TextRenderer.html</anchorfile>
      <anchor>a325a7d81d2eeec6dcc6b8e4225c29071</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBaseLineDescent</name>
      <anchorfile>classinviwo_1_1TextRenderer.html</anchorfile>
      <anchor>a978b75377411343bd257e24e46a7938a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; bool, GlyphEntry &gt;</type>
      <name>requestGlyph</name>
      <anchorfile>classinviwo_1_1TextRenderer.html</anchorfile>
      <anchor>ae16fb408482d444ac5bfc44423ea702b</anchor>
      <arglist>(FontCache &amp;fc, unsigned int glyph)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>lineSpacing_</name>
      <anchorfile>classinviwo_1_1TextRenderer.html</anchorfile>
      <anchor>ac60efadbceeefbee54d206c31854642d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::TextSelectionDelegate</name>
    <filename>classinviwo_1_1TextSelectionDelegate.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::Texture</name>
    <filename>classinviwo_1_1Texture.html</filename>
    <base>Observable&lt; TextureObserver &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::Texture2D</name>
    <filename>classinviwo_1_1Texture2D.html</filename>
    <base>inviwo::Texture</base>
  </compound>
  <compound kind="class">
    <name>inviwo::Texture2DArray</name>
    <filename>classinviwo_1_1Texture2DArray.html</filename>
    <base>inviwo::Texture</base>
  </compound>
  <compound kind="class">
    <name>inviwo::Texture3D</name>
    <filename>classinviwo_1_1Texture3D.html</filename>
    <base>inviwo::Texture</base>
  </compound>
  <compound kind="class">
    <name>inviwo::util::TextureAtlas</name>
    <filename>classinviwo_1_1util_1_1TextureAtlas.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::TextureObserver</name>
    <filename>classinviwo_1_1TextureObserver.html</filename>
    <base>inviwo::Observer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notifyBeforeTextureInitialization</name>
      <anchorfile>classinviwo_1_1TextureObserver.html</anchorfile>
      <anchor>ad249a53fb5ab3f67099e29a12993b385</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notifyAfterTextureInitialization</name>
      <anchorfile>classinviwo_1_1TextureObserver.html</anchorfile>
      <anchor>ae0df43dec71ab95ff7036dd945c3753d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::TextureQuadRenderer</name>
    <filename>classinviwo_1_1TextureQuadRenderer.html</filename>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classinviwo_1_1TextureQuadRenderer.html</anchorfile>
      <anchor>a448c69c56a53e755fec00c498496edad</anchor>
      <arglist>(const std::shared_ptr&lt; Image &gt; &amp;image, const ivec2 &amp;pos, const size2_t &amp;canvasSize, LayerType layerType=LayerType::Color, const mat4 &amp;transformation=mat4(1), const mat4 &amp;texTransform=mat4(1))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classinviwo_1_1TextureQuadRenderer.html</anchorfile>
      <anchor>ab4b7351df055fa7d231e330cb794afba</anchor>
      <arglist>(const std::shared_ptr&lt; Image &gt; &amp;image, const ivec2 &amp;pos, const size2_t &amp;canvasSize, std::size_t colorLayerIndex, const mat4 &amp;transformation=mat4(1), const mat4 &amp;texTransform=mat4(1))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classinviwo_1_1TextureQuadRenderer.html</anchorfile>
      <anchor>a018197abfe951bacded4b7ad23ee8af5</anchor>
      <arglist>(const std::shared_ptr&lt; Layer &gt; &amp;image, const ivec2 &amp;pos, const size2_t &amp;canvasSize, const mat4 &amp;transformation=mat4(1), const mat4 &amp;texTransform=mat4(1))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classinviwo_1_1TextureQuadRenderer.html</anchorfile>
      <anchor>ac7e02ebbbc5c7df3bd0244267c33e6db</anchor>
      <arglist>(const std::shared_ptr&lt; Texture2D &gt; &amp;texture, const ivec2 &amp;pos, const size2_t &amp;canvasSize, const mat4 &amp;transformation=mat4(1), const mat4 &amp;texTransform=mat4(1))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renderToRect</name>
      <anchorfile>classinviwo_1_1TextureQuadRenderer.html</anchorfile>
      <anchor>a534bbfd7a582bd79ac250c3e82d3c601</anchor>
      <arglist>(const std::shared_ptr&lt; Image &gt; &amp;image, const ivec2 &amp;pos, const ivec2 &amp;extent, const size2_t &amp;canvasSize, LayerType layerType=LayerType::Color, const mat4 &amp;transformation=mat4(1), const mat4 &amp;texTransform=mat4(1))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renderToRect</name>
      <anchorfile>classinviwo_1_1TextureQuadRenderer.html</anchorfile>
      <anchor>a6fdb0cd9c6de68ca3b98076bd2d81af4</anchor>
      <arglist>(const std::shared_ptr&lt; Image &gt; &amp;image, const ivec2 &amp;pos, const ivec2 &amp;extent, const size2_t &amp;canvasSize, std::size_t colorLayerIndex, const mat4 &amp;transformation=mat4(1), const mat4 &amp;texTransform=mat4(1))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renderToRect</name>
      <anchorfile>classinviwo_1_1TextureQuadRenderer.html</anchorfile>
      <anchor>a0d12604c45651e9c00a01f6301239b4d</anchor>
      <arglist>(const std::shared_ptr&lt; Layer &gt; &amp;image, const ivec2 &amp;pos, const ivec2 &amp;extent, const size2_t &amp;canvasSize, const mat4 &amp;transformation=mat4(1), const mat4 &amp;texTransform=mat4(1))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renderToRect</name>
      <anchorfile>classinviwo_1_1TextureQuadRenderer.html</anchorfile>
      <anchor>af49e5bb66ca598b8bb138fb954d4a033</anchor>
      <arglist>(const std::shared_ptr&lt; Texture2D &gt; &amp;texture, const ivec2 &amp;pos, const ivec2 &amp;extent, const size2_t &amp;canvasSize, const mat4 &amp;transformation=mat4(1), const mat4 &amp;texTransform=mat4(1))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renderToRect3D</name>
      <anchorfile>classinviwo_1_1TextureQuadRenderer.html</anchorfile>
      <anchor>a655b5846732d9cb920a9139cfdd6ac01</anchor>
      <arglist>(const Camera &amp;camera, const std::shared_ptr&lt; Texture2D &gt; &amp;texture, const vec3 &amp;pos, const ivec2 &amp;extent, const size2_t &amp;canvasSize, const vec2 &amp;anchor=vec2(-1.0f), const mat4 &amp;transformation=mat4(1), const mat4 &amp;texTransform=mat4(1))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::TextureUnit</name>
    <filename>classinviwo_1_1TextureUnit.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::TextureUnitContainer</name>
    <filename>classinviwo_1_1TextureUnitContainer.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::TFPushButton</name>
    <filename>classinviwo_1_1TFPushButton.html</filename>
    <base>inviwo::IvwPushButton</base>
  </compound>
  <compound kind="class">
    <name>inviwo::ThreadPool</name>
    <filename>classinviwo_1_1ThreadPool.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::TickProperty</name>
    <filename>classinviwo_1_1plot_1_1TickProperty.html</filename>
    <base>inviwo::CompositeProperty</base>
  </compound>
  <compound kind="class">
    <name>inviwo::Timer</name>
    <filename>classinviwo_1_1Timer.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::TimerThread</name>
    <filename>classinviwo_1_1TimerThread.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::TinyDirInterface</name>
    <filename>classinviwo_1_1TinyDirInterface.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>open</name>
      <anchorfile>classinviwo_1_1TinyDirInterface.html</anchorfile>
      <anchor>aff9c54ed282460cba0762ec25bb7bd69</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classinviwo_1_1TinyDirInterface.html</anchorfile>
      <anchor>a0f82ce815887398270daf2aaa222ce79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOpen</name>
      <anchorfile>classinviwo_1_1TinyDirInterface.html</anchorfile>
      <anchor>ae376120e32d8062462eac1e71d74e948</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setListMode</name>
      <anchorfile>classinviwo_1_1TinyDirInterface.html</anchorfile>
      <anchor>ac31d50d861c3db89893b17afe03e5ff2</anchor>
      <arglist>(ListMode mode)</arglist>
    </member>
    <member kind="function">
      <type>ListMode</type>
      <name>getListMode</name>
      <anchorfile>classinviwo_1_1TinyDirInterface.html</anchorfile>
      <anchor>ab2842d2aa574fc6109f8df121e036f94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNextEntryAvailable</name>
      <anchorfile>classinviwo_1_1TinyDirInterface.html</anchorfile>
      <anchor>af6ade4ea8e8d99926cc000a7060f42ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getNextEntry</name>
      <anchorfile>classinviwo_1_1TinyDirInterface.html</anchorfile>
      <anchor>a1872d2c0daf9e38465f93b7913782151</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getNextEntryWithBasePath</name>
      <anchorfile>classinviwo_1_1TinyDirInterface.html</anchorfile>
      <anchor>a6a85bc92f2879f81297f4b52e4afa6a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getContents</name>
      <anchorfile>classinviwo_1_1TinyDirInterface.html</anchorfile>
      <anchor>a0d33501bacdaf5e1d2b40897a1374807</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getContentsWithBasePath</name>
      <anchorfile>classinviwo_1_1TinyDirInterface.html</anchorfile>
      <anchor>a4229607133abe7fd4c5aaf28a684a03d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::TMIP</name>
    <filename>classinviwo_1_1TMIP.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1TMIP.html</anchorfile>
      <anchor>ad085a35340e77aceb14e6cbb0a7ccbfe</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1TMIP.html</anchorfile>
      <anchor>afa74fb260ffffbc243b25c11dd6e9820</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::shuntingyard::Token</name>
    <filename>classinviwo_1_1shuntingyard_1_1Token.html</filename>
    <templarg></templarg>
    <base>inviwo::shuntingyard::TokenBase</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::shuntingyard::TokenBase</name>
    <filename>structinviwo_1_1shuntingyard_1_1TokenBase.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::Tonemapping</name>
    <filename>classinviwo_1_1Tonemapping.html</filename>
    <base>inviwo::ImageGLProcessor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1Tonemapping.html</anchorfile>
      <anchor>a0e2a80252da882d372c3731fac5ccf3c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classinviwo_1_1Tonemapping.html</anchorfile>
      <anchor>ae6e6b9a14a63e66865fe186624d5d386</anchor>
      <arglist>(TextureUnitContainer &amp;cont) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::glui::ToolButton</name>
    <filename>classinviwo_1_1glui_1_1ToolButton.html</filename>
    <base>inviwo::glui::AbstractButton</base>
  </compound>
  <compound kind="class">
    <name>ToolButtonProperty</name>
    <filename>classToolButtonProperty.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::glui::ToolButtonPropertyWidget</name>
    <filename>classinviwo_1_1glui_1_1ToolButtonPropertyWidget.html</filename>
    <base>inviwo::glui::ToolButton</base>
    <base>inviwo::PropertyWidget</base>
    <base>inviwo::PropertyObserver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1glui_1_1ToolButtonPropertyWidget.html</anchorfile>
      <anchor>a81b68917211eec1925d668ae4ebc1619</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::TouchDevice</name>
    <filename>classinviwo_1_1TouchDevice.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>DeviceType</name>
      <anchorfile>classinviwo_1_1TouchDevice.html</anchorfile>
      <anchor>aa2ec655a2ad8a089a1c18f731d4280f7</anchor>
      <arglist></arglist>
      <enumvalue file="classinviwo_1_1TouchDevice.html" anchor="aa2ec655a2ad8a089a1c18f731d4280f7a64a952e5a8456c1030ce54bfa07ebb52">TouchScreen</enumvalue>
      <enumvalue file="classinviwo_1_1TouchDevice.html" anchor="aa2ec655a2ad8a089a1c18f731d4280f7a2817f8d374c20bb60866595401f83f15">TouchPad</enumvalue>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::TouchEvent</name>
    <filename>classinviwo_1_1TouchEvent.html</filename>
    <base>inviwo::InteractionEvent</base>
    <member kind="function">
      <type>dvec2</type>
      <name>centerPoint</name>
      <anchorfile>classinviwo_1_1TouchEvent.html</anchorfile>
      <anchor>a3a9307b61cfedb125b42e92210abf57e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>dvec2</type>
      <name>centerPointNormalized</name>
      <anchorfile>classinviwo_1_1TouchEvent.html</anchorfile>
      <anchor>a8c304d985812af5f7591f662d3c7d548</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>dvec2</type>
      <name>prevCenterPointNormalized</name>
      <anchorfile>classinviwo_1_1TouchEvent.html</anchorfile>
      <anchor>a7885e63390361812da1379659df71d71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>dvec3</type>
      <name>centerNDC</name>
      <anchorfile>classinviwo_1_1TouchEvent.html</anchorfile>
      <anchor>a1b89c0752f88b998a58daf9a9564c10f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>averageDepth</name>
      <anchorfile>classinviwo_1_1TouchEvent.html</anchorfile>
      <anchor>a837a8f13eaecc00960f04cf8ef99336e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TouchDevice *</type>
      <name>getDevice</name>
      <anchorfile>classinviwo_1_1TouchEvent.html</anchorfile>
      <anchor>a0e029889f1395c32fad4e6bb215d44e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; const TouchPoint * &gt;</type>
      <name>findClosestTwoTouchPoints</name>
      <anchorfile>classinviwo_1_1TouchEvent.html</anchorfile>
      <anchor>af5966602997dac9f22aa18fff401b886</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PickingState</type>
      <name>getPickingState</name>
      <anchorfile>classinviwo_1_1TouchEvent.html</anchorfile>
      <anchor>a382a3accf1ed5f497595aad80afb2c98</anchor>
      <arglist>(const std::vector&lt; TouchPoint &gt; &amp;points)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::TouchPoint</name>
    <filename>classinviwo_1_1TouchPoint.html</filename>
    <member kind="function">
      <type></type>
      <name>TouchPoint</name>
      <anchorfile>classinviwo_1_1TouchPoint.html</anchorfile>
      <anchor>a4c2acb1d386f8132b3080931e006c599</anchor>
      <arglist>(int id, TouchState touchState, dvec2 posNormalized, dvec2 prevPosNormalized, dvec2 pressedPosNormalized, uvec2 canvasSize, double pressure, double depth=1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classinviwo_1_1TouchPoint.html</anchorfile>
      <anchor>af3d5b52ea2d344a46e08c5b1ebff068f</anchor>
      <arglist>(const TouchPoint &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classinviwo_1_1TouchPoint.html</anchorfile>
      <anchor>a2023b002393a44630926a70189e3dec1</anchor>
      <arglist>(const TouchPoint &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>classinviwo_1_1TouchPoint.html</anchorfile>
      <anchor>a949e9233a5632cb24903b7f5b39387d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>dvec2</type>
      <name>pos</name>
      <anchorfile>classinviwo_1_1TouchPoint.html</anchorfile>
      <anchor>a8f4e047681ffb66e5ecf6bfe67caba9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>dvec2</type>
      <name>posNormalized</name>
      <anchorfile>classinviwo_1_1TouchPoint.html</anchorfile>
      <anchor>a8a980505e36c1e7721e3c956fdda2026</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>dvec2</type>
      <name>prevPos</name>
      <anchorfile>classinviwo_1_1TouchPoint.html</anchorfile>
      <anchor>a767046de5e7aea66af722b1600e00784</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>dvec2</type>
      <name>prevPosNormalized</name>
      <anchorfile>classinviwo_1_1TouchPoint.html</anchorfile>
      <anchor>a70f1a2789b798a9ae39beb5c7b9f7995</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>dvec2</type>
      <name>pressedPos</name>
      <anchorfile>classinviwo_1_1TouchPoint.html</anchorfile>
      <anchor>a174c1a2d9127d26b9f167ea6e2eeb1f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>dvec2</type>
      <name>pressedPosNormalized</name>
      <anchorfile>classinviwo_1_1TouchPoint.html</anchorfile>
      <anchor>ac69d44f5c4e0201cc728e49b09251dfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>depth</name>
      <anchorfile>classinviwo_1_1TouchPoint.html</anchorfile>
      <anchor>ad9b3fca26215256d1806cbb4133c4c89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pressure</name>
      <anchorfile>classinviwo_1_1TouchPoint.html</anchorfile>
      <anchor>ab043c8317a53445d2e4110ce9b6f88e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>dvec3</type>
      <name>ndc</name>
      <anchorfile>classinviwo_1_1TouchPoint.html</anchorfile>
      <anchor>a9edf2f035c632fde979b6fe6c2ee7473</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::Track</name>
    <filename>classinviwo_1_1animation_1_1Track.html</filename>
    <base>inviwo::Serializable</base>
    <base>inviwo::animation::TrackObservable</base>
    <base>inviwo::animation::KeyframeSequenceObserver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Track</name>
      <anchorfile>classinviwo_1_1animation_1_1Track.html</anchorfile>
      <anchor>aeb00c3039d67ee3af6591142a0ce3437</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classinviwo_1_1animation_1_1Track.html</anchorfile>
      <anchor>a04382e9a119f3efe3657b2facd75acef</anchor>
      <arglist>(const std::string &amp;name)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPriority</name>
      <anchorfile>classinviwo_1_1animation_1_1Track.html</anchorfile>
      <anchor>a8a9b3af54a19561d2c1809158e5f5c0e</anchor>
      <arglist>(size_t priority)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>getPriority</name>
      <anchorfile>classinviwo_1_1animation_1_1Track.html</anchorfile>
      <anchor>a0faa03bd673b36cc528f62a467764644</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>size</name>
      <anchorfile>classinviwo_1_1animation_1_1Track.html</anchorfile>
      <anchor>ab6c92d0080a4eb45c32cdd3a760dea28</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classinviwo_1_1animation_1_1Track.html</anchorfile>
      <anchor>a0083c54eeb0bcaa634844840d63d5a47</anchor>
      <arglist>(const KeyframeSequence &amp;sequence)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>remove</name>
      <anchorfile>classinviwo_1_1animation_1_1Track.html</anchorfile>
      <anchor>ac4ef52f8b0666122cea9e2f560571136</anchor>
      <arglist>(size_t i)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::Trackball</name>
    <filename>classinviwo_1_1Trackball.html</filename>
    <base>inviwo::CompositeProperty</base>
    <member kind="function">
      <type></type>
      <name>Trackball</name>
      <anchorfile>classinviwo_1_1Trackball.html</anchorfile>
      <anchor>a479cfd8accd782b387a1c4fc23a88997</anchor>
      <arglist>(TrackballObject *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLook</name>
      <anchorfile>classinviwo_1_1Trackball.html</anchorfile>
      <anchor>aed15c7b9cc47ca49dacfd5f579cdb205</anchor>
      <arglist>(vec3 lookFrom, vec3 lookTo, vec3 lookUp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>touchGesture</name>
      <anchorfile>classinviwo_1_1Trackball.html</anchorfile>
      <anchor>a755db9bda8e8b4fb27fa07228258970c</anchor>
      <arglist>(Event *event)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BoolProperty</type>
      <name>allowHorizontalPanning_</name>
      <anchorfile>classinviwo_1_1Trackball.html</anchorfile>
      <anchor>ac724c807524617004c405b6fdefce479</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BoolProperty</type>
      <name>allowVerticalPanning_</name>
      <anchorfile>classinviwo_1_1Trackball.html</anchorfile>
      <anchor>a022de8d6c8670d4f4f23ce47ed72322c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BoolProperty</type>
      <name>allowZooming_</name>
      <anchorfile>classinviwo_1_1Trackball.html</anchorfile>
      <anchor>aeef932804ee2baac83ffb2994bbcc566</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FloatProperty</type>
      <name>maxZoomInDistance_</name>
      <anchorfile>classinviwo_1_1Trackball.html</anchorfile>
      <anchor>af3e3be741834f4de76f01667c53674a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BoolProperty</type>
      <name>allowHorizontalRotation_</name>
      <anchorfile>classinviwo_1_1Trackball.html</anchorfile>
      <anchor>a145667a686f01a92fc7b1d59fa88ffce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BoolProperty</type>
      <name>allowVerticalRotation_</name>
      <anchorfile>classinviwo_1_1Trackball.html</anchorfile>
      <anchor>a0ea787b7567dfb55960dc6f509fe4b3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BoolProperty</type>
      <name>allowRecenterView_</name>
      <anchorfile>classinviwo_1_1Trackball.html</anchorfile>
      <anchor>adda05b3f5180334dfccb8b881c1feef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const float</type>
      <name>radius</name>
      <anchorfile>classinviwo_1_1Trackball.html</anchorfile>
      <anchor>a67757c732fd1a9faeac9534d0d2e5585</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::TrackballAction</name>
    <filename>classinviwo_1_1TrackballAction.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::TrackballObject</name>
    <filename>classinviwo_1_1TrackballObject.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::TrackFactory</name>
    <filename>classinviwo_1_1animation_1_1TrackFactory.html</filename>
    <base>StandardFactory&lt; Track, TrackFactoryObject &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::TrackFactoryObject</name>
    <filename>classinviwo_1_1animation_1_1TrackFactoryObject.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::TrackFactoryObjectTemplate</name>
    <filename>classinviwo_1_1animation_1_1TrackFactoryObjectTemplate.html</filename>
    <templarg></templarg>
    <base>inviwo::animation::TrackFactoryObject</base>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::TrackObservable</name>
    <filename>classinviwo_1_1animation_1_1TrackObservable.html</filename>
    <base>Observable&lt; TrackObserver &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::TrackObserver</name>
    <filename>classinviwo_1_1animation_1_1TrackObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::TrackQt</name>
    <filename>classinviwo_1_1animation_1_1TrackQt.html</filename>
    <base>inviwo::animation::TrackObserver</base>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::TrackTyped</name>
    <filename>classinviwo_1_1animation_1_1TrackTyped.html</filename>
    <templarg></templarg>
    <base>inviwo::animation::Track</base>
  </compound>
  <compound kind="class">
    <name>inviwo::TransferFunction</name>
    <filename>classinviwo_1_1TransferFunction.html</filename>
    <base>inviwo::Serializable</base>
    <base>inviwo::TransferFunctionObservable</base>
    <base>inviwo::TransferFunctionPointObserver</base>
    <member kind="function">
      <type>void</type>
      <name>addPoint</name>
      <anchorfile>classinviwo_1_1TransferFunction.html</anchorfile>
      <anchor>a5373189282f8800178ebaabf332f125d</anchor>
      <arglist>(const float &amp;pos, const vec4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPoint</name>
      <anchorfile>classinviwo_1_1TransferFunction.html</anchorfile>
      <anchor>a37e042ccec7c5d9ecb879411f05a913f</anchor>
      <arglist>(const Point &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPoint</name>
      <anchorfile>classinviwo_1_1TransferFunction.html</anchorfile>
      <anchor>a35df185e5ae025681af4181f91c43371</anchor>
      <arglist>(const vec2 &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPoints</name>
      <anchorfile>classinviwo_1_1TransferFunction.html</anchorfile>
      <anchor>a4d44a29588796a76e8945ead5d23b0cc</anchor>
      <arglist>(const std::vector&lt; Point &gt; &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPoint</name>
      <anchorfile>classinviwo_1_1TransferFunction.html</anchorfile>
      <anchor>a54d2067aee153e2f5f274a9fdb2e403e</anchor>
      <arglist>(const vec2 &amp;pos, const vec4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>classinviwo_1_1TransferFunction.html</anchorfile>
      <anchor>afe3d9d262b92d6881212ca2e16730474</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vec4</type>
      <name>sample</name>
      <anchorfile>classinviwo_1_1TransferFunction.html</anchorfile>
      <anchor>ac4848d173ef802a7ec3d1300e04043b6</anchor>
      <arglist>(double v) const </arglist>
    </member>
    <member kind="function">
      <type>vec4</type>
      <name>sample</name>
      <anchorfile>classinviwo_1_1TransferFunction.html</anchorfile>
      <anchor>a01aa1950e5efea4eacd7b69131f09855</anchor>
      <arglist>(float v) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::TransferFunctionControlPointConnection</name>
    <filename>classinviwo_1_1TransferFunctionControlPointConnection.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::TransferFunctionDataPoint</name>
    <filename>classinviwo_1_1TransferFunctionDataPoint.html</filename>
    <base>Observable&lt; TransferFunctionPointObserver &gt;</base>
    <base>inviwo::Serializable</base>
    <class kind="struct">inviwo::TransferFunctionDataPoint::Point</class>
  </compound>
  <compound kind="class">
    <name>inviwo::TransferFunctionEditor</name>
    <filename>classinviwo_1_1TransferFunctionEditor.html</filename>
    <member kind="function">
      <type>float</type>
      <name>getControlPointSize</name>
      <anchorfile>classinviwo_1_1TransferFunctionEditor.html</anchorfile>
      <anchor>a5e4203d325cbf6787b02a604f219459f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setControlPointSize</name>
      <anchorfile>classinviwo_1_1TransferFunctionEditor.html</anchorfile>
      <anchor>aa2436ef690e62ffe7561305f6a94be07</anchor>
      <arglist>(float val)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addControlPoint</name>
      <anchorfile>classinviwo_1_1TransferFunctionEditor.html</anchorfile>
      <anchor>aee74a7593a6a33a9a23c9f794bfd9005</anchor>
      <arglist>(QPointF pos)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::TransferFunctionEditorControlPoint</name>
    <filename>classinviwo_1_1TransferFunctionEditorControlPoint.html</filename>
    <base>inviwo::TransferFunctionPointObserver</base>
  </compound>
  <compound kind="class">
    <name>inviwo::TransferFunctionEditorView</name>
    <filename>classinviwo_1_1TransferFunctionEditorView.html</filename>
    <base>inviwo::TransferFunctionPropertyObserver</base>
  </compound>
  <compound kind="class">
    <name>inviwo::TransferFunctionObservable</name>
    <filename>classinviwo_1_1TransferFunctionObservable.html</filename>
    <base>Observable&lt; TransferFunctionObserver &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::TransferFunctionObserver</name>
    <filename>classinviwo_1_1TransferFunctionObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>inviwo::TransferFunctionPointObserver</name>
    <filename>classinviwo_1_1TransferFunctionPointObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>inviwo::TransferFunctionProperty</name>
    <filename>classinviwo_1_1TransferFunctionProperty.html</filename>
    <base>TemplateProperty&lt; TransferFunction &gt;</base>
    <base>inviwo::TransferFunctionObserver</base>
    <base>inviwo::TransferFunctionPropertyObservable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentStateAsDefault</name>
      <anchorfile>classinviwo_1_1TransferFunctionProperty.html</anchorfile>
      <anchor>aa40535b4885bf6533364092a1ad0eae2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetToDefaultState</name>
      <anchorfile>classinviwo_1_1TransferFunctionProperty.html</anchorfile>
      <anchor>a8a63e8cd7f4131b9098ef279cbb9240b</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::TransferFunctionPropertyDialog</name>
    <filename>classinviwo_1_1TransferFunctionPropertyDialog.html</filename>
    <base>inviwo::PropertyEditorWidgetQt</base>
    <base>inviwo::TransferFunctionObserver</base>
  </compound>
  <compound kind="class">
    <name>inviwo::TransferFunctionPropertyObservable</name>
    <filename>classinviwo_1_1TransferFunctionPropertyObservable.html</filename>
    <base>Observable&lt; TransferFunctionPropertyObserver &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::TransferFunctionPropertyObserver</name>
    <filename>classinviwo_1_1TransferFunctionPropertyObserver.html</filename>
    <base>inviwo::Observer</base>
  </compound>
  <compound kind="class">
    <name>inviwo::TransferFunctionPropertyWidgetQt</name>
    <filename>classinviwo_1_1TransferFunctionPropertyWidgetQt.html</filename>
    <base>inviwo::PropertyWidgetQt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateFromProperty</name>
      <anchorfile>classinviwo_1_1TransferFunctionPropertyWidgetQt.html</anchorfile>
      <anchor>a17ea576f8997a7158103a2192299992e</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::Transformer</name>
    <filename>classinviwo_1_1Transformer.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::Transformer&lt; T, typename std::enable_if&lt; util::is_floating_point&lt; T &gt;::value &gt;::type &gt;</name>
    <filename>classinviwo_1_1Transformer_3_01T_00_01typename_01std_1_1enable__if_3_01util_1_1is__floating__poi8021285cfd2189c6e2886140b1bddf32.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::TraversingVersionConverter</name>
    <filename>classinviwo_1_1TraversingVersionConverter.html</filename>
    <base>inviwo::VersionConverter</base>
  </compound>
  <compound kind="class">
    <name>inviwo::TubeRendering</name>
    <filename>classinviwo_1_1TubeRendering.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1TubeRendering.html</anchorfile>
      <anchor>ae53b88468918d0d88dbbbd0cdbcd037f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1TubeRendering.html</anchorfile>
      <anchor>a0b6348e2b55aaad1d78b6e508f18d2fd</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::tuple_element&lt; N,::inviwo::util::detailzip::proxy&lt; Ts... &gt; &gt;</name>
    <filename>structstd_1_1tuple__element_3_01N_00_1_1inviwo_1_1util_1_1detailzip_1_1proxy_3_01Ts_8_8_8_01_4_01_4.html</filename>
    <templarg>N</templarg>
    <templarg>Ts</templarg>
  </compound>
  <compound kind="struct">
    <name>std::tuple_size&lt;::inviwo::util::detailzip::proxy&lt; Ts... &gt; &gt;</name>
    <filename>structstd_1_1tuple__size_3_1_1inviwo_1_1util_1_1detailzip_1_1proxy_3_01Ts_8_8_8_01_4_01_4.html</filename>
    <templarg>Ts</templarg>
  </compound>
  <compound kind="struct">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; CanvasProcessor * &gt; &gt;</name>
    <filename>structpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01CanvasProcessor_01_5_01_4_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; Layer * &gt; &gt;</name>
    <filename>structpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01Layer_01_5_01_4_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; Processor * &gt; &gt;</name>
    <filename>structpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01Processor_01_5_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; double, 2, 2 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01douac551d055531ad855277666d2b0742c3.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; double, 2, 3 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01dou25465f694e3cd3ad9b311b4df7f1153e.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; double, 2, 4 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01doub99b502615b35ff7453a845f7d66ddd1.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; double, 3, 2 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01dou26a7bbcf16398f6d56fdafaa47b08a44.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; double, 3, 3 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01douab6412929fe54fa6645edd1c46cc9fdc.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; double, 3, 4 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01dou70d07611b8be15b9ee4d22db6a987b04.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; double, 4, 2 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01douf525b41f5246cccef57ee924b0daeab7.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; double, 4, 3 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01doudc1421575524a4ea2e8aec5fda269335.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; double, 4, 4 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01douaed688325ac3f883edb1d14e765e87d7.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; float, 2, 2 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01flod6b7e051287211a55fa3528d28c97748.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; float, 2, 3 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01flo8b51db60c98bd7af548d151f3dd3b53a.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; float, 2, 4 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01flo109fd9997053c65938e4b65490ed4633.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; float, 3, 2 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01floe77e3cb43d2bafb6beda724f0fd9e06a.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; float, 3, 3 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01flo19674b03c67ec1c601bd0c654f0907dc.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; float, 3, 4 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01flod1d2bbc2398b7482290d89d14e47c10a.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; float, 4, 2 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01flocd22b6f1021715073da320061eb354e4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; float, 4, 3 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01floc7c5f50687efb1555f0a7e00270b8bf7.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; float, 4, 4 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01flocb5aa19cb8674a1a99f5526f8471c905.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; int, 2, 2 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01int62d2b87ae5c0e0d4e8ec7a7975002855.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; int, 2, 3 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01int84edd164a4ad834a8c34c1a526a91236.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; int, 2, 4 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01inta356b92bf9cb6dc3fb59c4232ae634e0.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; int, 3, 2 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01int107d2e93d0d84aea18103dc85aa78b1c.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; int, 3, 3 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01int6a41f3a8a8cbabf909955c76870a3967.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; int, 3, 4 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01intf858fc691d47ca654d968f904404e518.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; int, 4, 2 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01int4aa687f815ff0cd52265b194b35440f3.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; int, 4, 3 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01int06668de2bd036c57d4373252ab768ba4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; int, 4, 4 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01intf5cd15352e89294074ede9ec30d0f260.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; unsigned int, 2, 2 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01unsaf97accf5c5f40688c8ec6987ccb3f7f.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; unsigned int, 2, 3 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01uns54f09ec8262e6cdf0a40b71c66137155.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; unsigned int, 2, 4 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01uns3cf6e5a0251256eb865a6782e85c70ce.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; unsigned int, 3, 2 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01unsb66e56fcdafd7b182462779580559806.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; unsigned int, 3, 3 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01uns97b13ba10e8ed79bd2ca2c8bb6fda8d4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; unsigned int, 3, 4 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01unse15da45fced636d6d56a8518382f807f.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; unsigned int, 4, 2 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01unse61aa3e7806fa1773e9c701d81593ef2.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; unsigned int, 4, 3 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01uns2e8f8d6a8fe454d520391b508313b001.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; typename util::glmtype&lt; unsigned int, 4, 4 &gt;::type &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01typename_01util_1_1glmtype_3_01uns7e2caa593361b7a634f8a1a78e272763.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; Vector&lt; 2, double &gt; &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01Vector_3_012_00_01double_01_4_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; Vector&lt; 2, float &gt; &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01Vector_3_012_00_01float_01_4_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; Vector&lt; 2, int &gt; &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01Vector_3_012_00_01int_01_4_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; Vector&lt; 2, size_t &gt; &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01Vector_3_012_00_01size__t_01_4_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; Vector&lt; 2, unsigned int &gt; &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01Vector_3_012_00_01unsigned_01int_01_4_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; Vector&lt; 3, double &gt; &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01Vector_3_013_00_01double_01_4_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; Vector&lt; 3, float &gt; &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01Vector_3_013_00_01float_01_4_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; Vector&lt; 3, int &gt; &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01Vector_3_013_00_01int_01_4_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; Vector&lt; 3, size_t &gt; &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01Vector_3_013_00_01size__t_01_4_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; Vector&lt; 3, unsigned int &gt; &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01Vector_3_013_00_01unsigned_01int_01_4_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; Vector&lt; 4, double &gt; &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01Vector_3_014_00_01double_01_4_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; Vector&lt; 4, float &gt; &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01Vector_3_014_00_01float_01_4_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; Vector&lt; 4, int &gt; &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01Vector_3_014_00_01int_01_4_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; Vector&lt; 4, size_t &gt; &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01Vector_3_014_00_01size__t_01_4_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; std::vector&lt; Vector&lt; 4, unsigned int &gt; &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01std_1_1vector_3_01Vector_3_014_00_01unsigned_01int_01_4_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; double, 2, 2 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01double_00_012_00_012_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; double, 2, 3 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01double_00_012_00_013_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; double, 2, 4 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01double_00_012_00_014_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; double, 3, 2 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01double_00_013_00_012_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; double, 3, 3 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01double_00_013_00_013_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; double, 3, 4 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01double_00_013_00_014_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; double, 4, 2 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01double_00_014_00_012_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; double, 4, 3 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01double_00_014_00_013_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; double, 4, 4 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01double_00_014_00_014_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; float, 2, 2 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01float_00_012_00_012_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; float, 2, 3 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01float_00_012_00_013_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; float, 2, 4 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01float_00_012_00_014_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; float, 3, 2 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01float_00_013_00_012_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; float, 3, 3 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01float_00_013_00_013_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; float, 3, 4 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01float_00_013_00_014_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; float, 4, 2 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01float_00_014_00_012_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; float, 4, 3 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01float_00_014_00_013_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; float, 4, 4 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01float_00_014_00_014_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; int, 2, 2 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01int_00_012_00_012_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; int, 2, 3 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01int_00_012_00_013_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; int, 2, 4 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01int_00_012_00_014_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; int, 3, 2 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01int_00_013_00_012_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; int, 3, 3 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01int_00_013_00_013_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; int, 3, 4 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01int_00_013_00_014_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; int, 4, 2 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01int_00_014_00_012_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; int, 4, 3 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01int_00_014_00_013_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; int, 4, 4 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01int_00_014_00_014_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; unsigned int, 2, 2 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01unsigned_01int_00_012_00_012_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; unsigned int, 2, 3 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01unsigned_01int_00_012_00_013_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; unsigned int, 2, 4 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01unsigned_01int_00_012_00_014_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; unsigned int, 3, 2 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01unsigned_01int_00_013_00_012_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; unsigned int, 3, 3 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01unsigned_01int_00_013_00_013_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; unsigned int, 3, 4 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01unsigned_01int_00_013_00_014_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; unsigned int, 4, 2 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01unsigned_01int_00_014_00_012_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; unsigned int, 4, 3 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01unsigned_01int_00_014_00_013_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; typename util::glmtype&lt; unsigned int, 4, 4 &gt;::type &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01typename_01util_1_1glmtype_3_01unsigned_01int_00_014_00_014_01_4_1_1type_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; Vector&lt; 2, double &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01Vector_3_012_00_01double_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; Vector&lt; 2, float &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01Vector_3_012_00_01float_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; Vector&lt; 2, int &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01Vector_3_012_00_01int_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; Vector&lt; 2, size_t &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01Vector_3_012_00_01size__t_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; Vector&lt; 2, unsigned int &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01Vector_3_012_00_01unsigned_01int_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; Vector&lt; 3, double &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01Vector_3_013_00_01double_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; Vector&lt; 3, float &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01Vector_3_013_00_01float_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; Vector&lt; 3, int &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01Vector_3_013_00_01int_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; Vector&lt; 3, size_t &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01Vector_3_013_00_01size__t_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; Vector&lt; 3, unsigned int &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01Vector_3_013_00_01unsigned_01int_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; Vector&lt; 4, double &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01Vector_3_014_00_01double_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; Vector&lt; 4, float &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01Vector_3_014_00_01float_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; Vector&lt; 4, int &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01Vector_3_014_00_01int_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; Vector&lt; 4, size_t &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01Vector_3_014_00_01size__t_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>pybind11::detail::type_caster&lt; Vector&lt; 4, unsigned int &gt; &gt;</name>
    <filename>classpybind11_1_1detail_1_1type__caster_3_01Vector_3_014_00_01unsigned_01int_01_4_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::TypedResource</name>
    <filename>classinviwo_1_1TypedResource.html</filename>
    <templarg></templarg>
    <base>inviwo::Resource</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::hdf5::TypeMap</name>
    <filename>structinviwo_1_1hdf5_1_1TypeMap.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::hdf5::TypeMap&lt; char &gt;</name>
    <filename>structinviwo_1_1hdf5_1_1TypeMap_3_01char_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::hdf5::TypeMap&lt; double &gt;</name>
    <filename>structinviwo_1_1hdf5_1_1TypeMap_3_01double_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::hdf5::TypeMap&lt; float &gt;</name>
    <filename>structinviwo_1_1hdf5_1_1TypeMap_3_01float_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::hdf5::TypeMap&lt; int &gt;</name>
    <filename>structinviwo_1_1hdf5_1_1TypeMap_3_01int_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::hdf5::TypeMap&lt; long long &gt;</name>
    <filename>structinviwo_1_1hdf5_1_1TypeMap_3_01long_01long_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::hdf5::TypeMap&lt; short &gt;</name>
    <filename>structinviwo_1_1hdf5_1_1TypeMap_3_01short_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::hdf5::TypeMap&lt; unsigned char &gt;</name>
    <filename>structinviwo_1_1hdf5_1_1TypeMap_3_01unsigned_01char_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::hdf5::TypeMap&lt; unsigned int &gt;</name>
    <filename>structinviwo_1_1hdf5_1_1TypeMap_3_01unsigned_01int_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::hdf5::TypeMap&lt; unsigned long long &gt;</name>
    <filename>structinviwo_1_1hdf5_1_1TypeMap_3_01unsigned_01long_01long_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::hdf5::TypeMap&lt; unsigned short &gt;</name>
    <filename>structinviwo_1_1hdf5_1_1TypeMap_3_01unsigned_01short_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::UndoManager</name>
    <filename>classinviwo_1_1UndoManager.html</filename>
    <base>inviwo::ProcessorNetworkObserver</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::UniformSetter</name>
    <filename>structinviwo_1_1utilgl_1_1UniformSetter.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::UniformSetter&lt; bool &gt;</name>
    <filename>structinviwo_1_1utilgl_1_1UniformSetter_3_01bool_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::UniformSetter&lt; BoolProperty &gt;</name>
    <filename>structinviwo_1_1utilgl_1_1UniformSetter_3_01BoolProperty_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::UniformSetter&lt; bvec2 &gt;</name>
    <filename>structinviwo_1_1utilgl_1_1UniformSetter_3_01bvec2_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::UniformSetter&lt; bvec3 &gt;</name>
    <filename>structinviwo_1_1utilgl_1_1UniformSetter_3_01bvec3_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::UniformSetter&lt; bvec4 &gt;</name>
    <filename>structinviwo_1_1utilgl_1_1UniformSetter_3_01bvec4_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::UniformSetter&lt; GLfloat &gt;</name>
    <filename>structinviwo_1_1utilgl_1_1UniformSetter_3_01GLfloat_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::UniformSetter&lt; GLint &gt;</name>
    <filename>structinviwo_1_1utilgl_1_1UniformSetter_3_01GLint_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::UniformSetter&lt; GLuint &gt;</name>
    <filename>structinviwo_1_1utilgl_1_1UniformSetter_3_01GLuint_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::UniformSetter&lt; ivec2 &gt;</name>
    <filename>structinviwo_1_1utilgl_1_1UniformSetter_3_01ivec2_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::UniformSetter&lt; ivec3 &gt;</name>
    <filename>structinviwo_1_1utilgl_1_1UniformSetter_3_01ivec3_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::UniformSetter&lt; ivec4 &gt;</name>
    <filename>structinviwo_1_1utilgl_1_1UniformSetter_3_01ivec4_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::UniformSetter&lt; mat2 &gt;</name>
    <filename>structinviwo_1_1utilgl_1_1UniformSetter_3_01mat2_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::UniformSetter&lt; mat3 &gt;</name>
    <filename>structinviwo_1_1utilgl_1_1UniformSetter_3_01mat3_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::UniformSetter&lt; mat4 &gt;</name>
    <filename>structinviwo_1_1utilgl_1_1UniformSetter_3_01mat4_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::UniformSetter&lt; OrdinalProperty&lt; T &gt; &gt;</name>
    <filename>structinviwo_1_1utilgl_1_1UniformSetter_3_01OrdinalProperty_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::UniformSetter&lt; std::array&lt; bool, N &gt; &gt;</name>
    <filename>structinviwo_1_1utilgl_1_1UniformSetter_3_01std_1_1array_3_01bool_00_01N_01_4_01_4.html</filename>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::UniformSetter&lt; std::array&lt; T, N &gt; &gt;</name>
    <filename>structinviwo_1_1utilgl_1_1UniformSetter_3_01std_1_1array_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::UniformSetter&lt; std::vector&lt; T &gt; &gt;</name>
    <filename>structinviwo_1_1utilgl_1_1UniformSetter_3_01std_1_1vector_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::UniformSetter&lt; TextureUnit &gt;</name>
    <filename>structinviwo_1_1utilgl_1_1UniformSetter_3_01TextureUnit_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::UniformSetter&lt; uvec2 &gt;</name>
    <filename>structinviwo_1_1utilgl_1_1UniformSetter_3_01uvec2_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::UniformSetter&lt; uvec3 &gt;</name>
    <filename>structinviwo_1_1utilgl_1_1UniformSetter_3_01uvec3_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::UniformSetter&lt; uvec4 &gt;</name>
    <filename>structinviwo_1_1utilgl_1_1UniformSetter_3_01uvec4_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::UniformSetter&lt; vec2 &gt;</name>
    <filename>structinviwo_1_1utilgl_1_1UniformSetter_3_01vec2_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::UniformSetter&lt; vec3 &gt;</name>
    <filename>structinviwo_1_1utilgl_1_1UniformSetter_3_01vec3_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::UniformSetter&lt; vec4 &gt;</name>
    <filename>structinviwo_1_1utilgl_1_1UniformSetter_3_01vec4_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::upscale</name>
    <filename>structinviwo_1_1util_1_1detail_1_1upscale.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::UserInterfaceGLModule</name>
    <filename>classinviwo_1_1UserInterfaceGLModule.html</filename>
    <base>inviwo::InviwoModule</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::value_type</name>
    <filename>structinviwo_1_1util_1_1value__type.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::value_type&lt; G&lt; T, P &gt; &gt;</name>
    <filename>structinviwo_1_1util_1_1value__type_3_01G_3_01T_00_01P_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>P</templarg>
    <templarg>G</templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::animation::ValueKeyframe</name>
    <filename>classinviwo_1_1animation_1_1ValueKeyframe.html</filename>
    <templarg></templarg>
    <base>inviwo::animation::Keyframe</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::ValueWrapper</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; bool &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; double &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; dvec2 &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; dvec3 &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; dvec4 &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; float &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; GestureStates &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; GestureTypes &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; glm::i64 &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; glm::tvec2&lt; double, glm::defaultp &gt; &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; glm::tvec2&lt; float, glm::defaultp &gt; &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; glm::tvec2&lt; int, glm::defaultp &gt; &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; glm::tvec2&lt; T, glm::defaultp &gt; &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; glm::tvec3&lt; T, glm::defaultp &gt; &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; HistogramMode &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; int &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; inviwo::PropertySemantics &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; ivec2 &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; ivec3 &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; ivec4 &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; IvwKey &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; KeyModifiers &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; KeyStates &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; mat3 &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; mat4 &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; MouseButtons &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; MouseStates &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; range_type &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; size2_t &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; size3_t &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; size4_t &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; size_t &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; std::string &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; std::vector&lt; std::string &gt; &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; TransferFunction &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; UsageMode &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; vec2 &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; vec3 &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>ValueWrapper&lt; vec4 &gt;</name>
    <filename>structinviwo_1_1ValueWrapper.html</filename>
  </compound>
  <compound kind="class">
    <name>glui::VBoxLayout</name>
    <filename>classglui_1_1VBoxLayout.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::glui::VBoxLayout</name>
    <filename>classinviwo_1_1glui_1_1VBoxLayout.html</filename>
    <base>inviwo::glui::BoxLayout</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::dispatching::filter::Vec2s</name>
    <filename>structinviwo_1_1dispatching_1_1filter_1_1Vec2s.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::dispatching::filter::Vec3s</name>
    <filename>structinviwo_1_1dispatching_1_1filter_1_1Vec3s.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::dispatching::filter::Vec4s</name>
    <filename>structinviwo_1_1dispatching_1_1filter_1_1Vec4s.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>inviwo::dispatching::filter::Vecs</name>
    <filename>structinviwo_1_1dispatching_1_1filter_1_1Vecs.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>inviwo::Vector2DCurl</name>
    <filename>classinviwo_1_1Vector2DCurl.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1Vector2DCurl.html</anchorfile>
      <anchor>a21fd74f70da9fb8a4e5e24c9b01d3932</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::Vector2DDivergence</name>
    <filename>classinviwo_1_1Vector2DDivergence.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1Vector2DDivergence.html</anchorfile>
      <anchor>a1a2f59c69f33d513c2f96310f52cd36d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::Vector2DMagnitude</name>
    <filename>classinviwo_1_1Vector2DMagnitude.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1Vector2DMagnitude.html</anchorfile>
      <anchor>ada35d43f46cf41cc9638a8814b9d997b</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::Vector3DCurl</name>
    <filename>classinviwo_1_1Vector3DCurl.html</filename>
    <base>inviwo::VolumeGLProcessor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>postProcess</name>
      <anchorfile>classinviwo_1_1Vector3DCurl.html</anchorfile>
      <anchor>ad6c31c161b9ff5470aaa45980cd692ab</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::Vector3DDivergence</name>
    <filename>classinviwo_1_1Vector3DDivergence.html</filename>
    <base>inviwo::VolumeGLProcessor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>postProcess</name>
      <anchorfile>classinviwo_1_1Vector3DDivergence.html</anchorfile>
      <anchor>a0f22836e8c88af706c7b932aa095e8a0</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VectorElementSelectorProcessor</name>
    <filename>classinviwo_1_1VectorElementSelectorProcessor.html</filename>
    <templarg>T</templarg>
    <templarg>OutportType</templarg>
    <base>inviwo::Processor</base>
    <member kind="function">
      <type>void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VectorElementSelectorProcessor.html</anchorfile>
      <anchor>abaa6c020291146bfda1b2dc40ec6d8e8</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VectorElementSelectorProcessor&lt; Image, ImageOutport &gt;</name>
    <filename>classinviwo_1_1VectorElementSelectorProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function">
      <type>void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VectorElementSelectorProcessor.html</anchorfile>
      <anchor>abaa6c020291146bfda1b2dc40ec6d8e8</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VectorElementSelectorProcessor&lt; Mesh, MeshOutport &gt;</name>
    <filename>classinviwo_1_1VectorElementSelectorProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function">
      <type>void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VectorElementSelectorProcessor.html</anchorfile>
      <anchor>abaa6c020291146bfda1b2dc40ec6d8e8</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VectorElementSelectorProcessor&lt; Volume &gt;</name>
    <filename>classinviwo_1_1VectorElementSelectorProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function">
      <type>void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VectorElementSelectorProcessor.html</anchorfile>
      <anchor>abaa6c020291146bfda1b2dc40ec6d8e8</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VectorFieldGenerator2D</name>
    <filename>classinviwo_1_1VectorFieldGenerator2D.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1VectorFieldGenerator2D.html</anchorfile>
      <anchor>a1037f5c78506b6ee3d4fb105a610915c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VectorFieldGenerator2D.html</anchorfile>
      <anchor>ae62f7d23c9a4b94e3d34ad6c916777df</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VectorFieldGenerator3D</name>
    <filename>classinviwo_1_1VectorFieldGenerator3D.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1VectorFieldGenerator3D.html</anchorfile>
      <anchor>ab8310eb02120aff492a070ee6baddcdb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VectorFieldGenerator3D.html</anchorfile>
      <anchor>a29c4979468ffc2e5df259ca009b76856</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VectorFieldGenerator4D</name>
    <filename>classinviwo_1_1VectorFieldGenerator4D.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1VectorFieldGenerator4D.html</anchorfile>
      <anchor>a983dc34b7dd99ff4b6b031b638153331</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VectorFieldGenerator4D.html</anchorfile>
      <anchor>a3f5ded522281d212651ad8075138b773</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VectorFieldVisualizationGLModule</name>
    <filename>classinviwo_1_1VectorFieldVisualizationGLModule.html</filename>
    <base>inviwo::InviwoModule</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getVersion</name>
      <anchorfile>classinviwo_1_1VectorFieldVisualizationGLModule.html</anchorfile>
      <anchor>a78ebacd4b5fac10bdd4d9fcad21a5093</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; VersionConverter &gt;</type>
      <name>getConverter</name>
      <anchorfile>classinviwo_1_1VectorFieldVisualizationGLModule.html</anchorfile>
      <anchor>a5e56e4ec8e0801d315b5f10e048fd8b4</anchor>
      <arglist>(int version) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VectorFieldVisualizationModule</name>
    <filename>classinviwo_1_1VectorFieldVisualizationModule.html</filename>
    <base>inviwo::InviwoModule</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getVersion</name>
      <anchorfile>classinviwo_1_1VectorFieldVisualizationModule.html</anchorfile>
      <anchor>aada42e4f66cd6e2cbb6f8eb8b9eab267</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; VersionConverter &gt;</type>
      <name>getConverter</name>
      <anchorfile>classinviwo_1_1VectorFieldVisualizationModule.html</anchorfile>
      <anchor>a647f7a4892f434db0014a9c757133b16</anchor>
      <arglist>(int version) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VectorMagnitudeProcessor</name>
    <filename>classinviwo_1_1VectorMagnitudeProcessor.html</filename>
    <base>inviwo::VolumeGLProcessor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classinviwo_1_1VectorMagnitudeProcessor.html</anchorfile>
      <anchor>a50ee15d3e9d6198bc11ab031fad0fb6a</anchor>
      <arglist>(TextureUnitContainer &amp;cont) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>postProcess</name>
      <anchorfile>classinviwo_1_1VectorMagnitudeProcessor.html</anchorfile>
      <anchor>add73c7df7242a40b94d5d7272c2af3bc</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VectorMetaData</name>
    <filename>classinviwo_1_1VectorMetaData.html</filename>
    <templarg>N</templarg>
    <templarg></templarg>
    <base>inviwo::MetaDataPrimitiveType&lt; T, N, 0 &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::VectorToStringConverter</name>
    <filename>classinviwo_1_1VectorToStringConverter.html</filename>
    <templarg></templarg>
    <base>TemplatePropertyConverter&lt; srcProperty, StringProperty &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::Version</name>
    <filename>classinviwo_1_1Version.html</filename>
    <member kind="function">
      <type></type>
      <name>Version</name>
      <anchorfile>classinviwo_1_1Version.html</anchorfile>
      <anchor>a39740f23f695aea63cd83e23ada488be</anchor>
      <arglist>(std::string versionString)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>semanticVersionEqual</name>
      <anchorfile>classinviwo_1_1Version.html</anchorfile>
      <anchor>a0420abd4556b8b84da83a15e791decb2</anchor>
      <arglist>(const Version &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>major</name>
      <anchorfile>classinviwo_1_1Version.html</anchorfile>
      <anchor>a2b4be0b616c11498bc2ca11e8bba39e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>minor</name>
      <anchorfile>classinviwo_1_1Version.html</anchorfile>
      <anchor>a4bf98c07aa8b010aab4eb2c3f68d078b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>patch</name>
      <anchorfile>classinviwo_1_1Version.html</anchorfile>
      <anchor>a061599d3b0015b25f0786a03a10fe56c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>build</name>
      <anchorfile>classinviwo_1_1Version.html</anchorfile>
      <anchor>aced9a08e069d1249e8e91e9b73f00558</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classinviwo_1_1Version.html</anchorfile>
      <anchor>adc797b5d541f21afc837d22e8391d440</anchor>
      <arglist>(const Version &amp;lhs, const Version &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classinviwo_1_1Version.html</anchorfile>
      <anchor>ab0d57d80b26422325a83a3cb688f1cf2</anchor>
      <arglist>(const Version &amp;lhs, const Version &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VersionConverter</name>
    <filename>classinviwo_1_1VersionConverter.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::BasicMesh::Vertex</name>
    <filename>structinviwo_1_1BasicMesh_1_1Vertex.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::ViewManager::View</name>
    <filename>structinviwo_1_1ViewManager_1_1View.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::ViewManager</name>
    <filename>classinviwo_1_1ViewManager.html</filename>
    <class kind="struct">inviwo::ViewManager::View</class>
    <member kind="function">
      <type>bool</type>
      <name>propagateEvent</name>
      <anchorfile>classinviwo_1_1ViewManager.html</anchorfile>
      <anchor>aa6837a9a61d4c7bfa039c8fef2fb307a</anchor>
      <arglist>(Event *event, Propagator propagator)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; bool, ViewId &gt;</type>
      <name>getSelectedView</name>
      <anchorfile>classinviwo_1_1ViewManager.html</anchorfile>
      <anchor>a179ccb55122717ac12209b57d91dc85b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classinviwo_1_1ViewManager.html</anchorfile>
      <anchor>a03b33d969761141d199e665271cb25f8</anchor>
      <arglist>(View view)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classinviwo_1_1ViewManager.html</anchorfile>
      <anchor>a90612d5f1a1ae588b8891da1f92208f8</anchor>
      <arglist>(View view)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classinviwo_1_1ViewManager.html</anchorfile>
      <anchor>a3fdf9811beced9bf29a3389c3599cb44</anchor>
      <arglist>(ViewId ind)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>classinviwo_1_1ViewManager.html</anchorfile>
      <anchor>a7c25b79905f94aa30551e677d8dfbf20</anchor>
      <arglist>(ViewId ind, View view)</arglist>
    </member>
    <member kind="function">
      <type>View &amp;</type>
      <name>operator[]</name>
      <anchorfile>classinviwo_1_1ViewManager.html</anchorfile>
      <anchor>ac8ab876695de1f877b6906c70652276b</anchor>
      <arglist>(ViewId ind)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::Viewport</name>
    <filename>structinviwo_1_1utilgl_1_1Viewport.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::utilgl::ViewportState</name>
    <filename>structinviwo_1_1utilgl_1_1ViewportState.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::Volume</name>
    <filename>classinviwo_1_1Volume.html</filename>
    <base>Data&lt; Volume, VolumeRepresentation &gt;</base>
    <base>StructuredGridEntity&lt; 3 &gt;</base>
    <base>inviwo::MetaDataOwner</base>
    <member kind="function">
      <type>void</type>
      <name>setDimensions</name>
      <anchorfile>classinviwo_1_1Volume.html</anchorfile>
      <anchor>a0197a8355ff8f336e24a8643f1a795f5</anchor>
      <arglist>(const size3_t &amp;dim) override</arglist>
    </member>
    <member kind="function">
      <type>vec3</type>
      <name>getWorldSpaceGradientSpacing</name>
      <anchorfile>classinviwo_1_1Volume.html</anchorfile>
      <anchor>a216e96e15cbd4c116fc9c86b4cdc649d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::plot::VolumeAxis</name>
    <filename>classinviwo_1_1plot_1_1VolumeAxis.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1plot_1_1VolumeAxis.html</anchorfile>
      <anchor>a4861fe351614166f9a5a2b4b50028fb4</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeBinary</name>
    <filename>classinviwo_1_1VolumeBinary.html</filename>
    <base>inviwo::VolumeGLProcessor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classinviwo_1_1VolumeBinary.html</anchorfile>
      <anchor>a31e32fe924ae4500b61a100068e77573</anchor>
      <arglist>(TextureUnitContainer &amp;cont) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>postProcess</name>
      <anchorfile>classinviwo_1_1VolumeBinary.html</anchorfile>
      <anchor>a423f6f9133e9a90d46bd93b69efb710d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1VolumeBinary.html</anchorfile>
      <anchor>a3a47c341a8b24d64e662e85ead0eef43</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeBorders</name>
    <filename>classinviwo_1_1VolumeBorders.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeBoundingBox</name>
    <filename>classinviwo_1_1VolumeBoundingBox.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VolumeBoundingBox.html</anchorfile>
      <anchor>a4df9f0c9b248f29405223ecbd6663027</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeCL</name>
    <filename>classinviwo_1_1VolumeCL.html</filename>
    <base>inviwo::VolumeCLBase</base>
    <base>inviwo::VolumeRepresentation</base>
    <member kind="function">
      <type>void</type>
      <name>download</name>
      <anchorfile>classinviwo_1_1VolumeCL.html</anchorfile>
      <anchor>abb56eb092606af6ddadf8d77caf32d79</anchor>
      <arglist>(void *data) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeCL2RAMConverter</name>
    <filename>classinviwo_1_1VolumeCL2RAMConverter.html</filename>
    <base>RepresentationConverterType&lt; VolumeRepresentation, VolumeCL, VolumeRAM &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeCLBase</name>
    <filename>classinviwo_1_1VolumeCLBase.html</filename>
    <class kind="struct">inviwo::VolumeCLBase::VolumeParameters</class>
    <member kind="function" virtualness="virtual">
      <type>virtual vec2</type>
      <name>getVolumeDataOffsetAndScaling</name>
      <anchorfile>classinviwo_1_1VolumeCLBase.html</anchorfile>
      <anchor>a7bd582087e7e881b91ecad79c31aa13e</anchor>
      <arglist>(const Volume *volume) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeCLGL</name>
    <filename>classinviwo_1_1VolumeCLGL.html</filename>
    <base>inviwo::VolumeCLBase</base>
    <base>inviwo::VolumeRepresentation</base>
    <base>inviwo::TextureObserver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notifyBeforeTextureInitialization</name>
      <anchorfile>classinviwo_1_1VolumeCLGL.html</anchorfile>
      <anchor>a32b0d472b18e7d3c13ee2388e4aff3ad</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notifyAfterTextureInitialization</name>
      <anchorfile>classinviwo_1_1VolumeCLGL.html</anchorfile>
      <anchor>a1ac6dd1e5edcce1a7e5b9872aee10bbe</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; cl::Image3DGL &gt;</type>
      <name>clImage_</name>
      <anchorfile>classinviwo_1_1VolumeCLGL.html</anchorfile>
      <anchor>ae52d147e90d55a6d48eb04d13064a88d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeCLGL2CLConverter</name>
    <filename>classinviwo_1_1VolumeCLGL2CLConverter.html</filename>
    <base>RepresentationConverterType&lt; VolumeRepresentation, VolumeCLGL, VolumeCL &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeCLGL2GLConverter</name>
    <filename>classinviwo_1_1VolumeCLGL2GLConverter.html</filename>
    <base>RepresentationConverterType&lt; VolumeRepresentation, VolumeCLGL, VolumeGL &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeCLGL2RAMConverter</name>
    <filename>classinviwo_1_1VolumeCLGL2RAMConverter.html</filename>
    <base>RepresentationConverterType&lt; VolumeRepresentation, VolumeCLGL, VolumeRAM &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeCombiner</name>
    <filename>classinviwo_1_1VolumeCombiner.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VolumeCombiner.html</anchorfile>
      <anchor>a8dbc182bdb8c62fbdbaaa5127584d1dd</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeCreator</name>
    <filename>classinviwo_1_1VolumeCreator.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VolumeCreator.html</anchorfile>
      <anchor>aa3b1bbc071d5e1c7429c4b8af1b7571e</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeCurlCPUProcessor</name>
    <filename>classinviwo_1_1VolumeCurlCPUProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VolumeCurlCPUProcessor.html</anchorfile>
      <anchor>a39d132a9b959d0a722dca9fa9e2e53f0</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeDiff</name>
    <filename>classinviwo_1_1VolumeDiff.html</filename>
    <base>inviwo::VolumeGLProcessor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classinviwo_1_1VolumeDiff.html</anchorfile>
      <anchor>a5bdd27d261c458cfb4e396d1b7534d81</anchor>
      <arglist>(TextureUnitContainer &amp;cont) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeDisk</name>
    <filename>classinviwo_1_1VolumeDisk.html</filename>
    <base>inviwo::VolumeRepresentation</base>
    <base>DiskRepresentation&lt; VolumeRepresentation &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeDisk2RAMConverter</name>
    <filename>classinviwo_1_1VolumeDisk2RAMConverter.html</filename>
    <base>RepresentationConverterType&lt; VolumeRepresentation, VolumeDisk, VolumeRAM &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeDivergenceCPUProcessor</name>
    <filename>classinviwo_1_1VolumeDivergenceCPUProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VolumeDivergenceCPUProcessor.html</anchorfile>
      <anchor>aaf86f352c9c8edf3f714ae2b1885a9a3</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeDoubleSampler</name>
    <filename>classinviwo_1_1VolumeDoubleSampler.html</filename>
    <templarg>DataDims</templarg>
    <base>SpatialSampler&lt; 3, DataDims, double &gt;</base>
  </compound>
  <compound kind="class">
    <name>VolumeDoubleSampler&lt; 3 &gt;</name>
    <filename>classinviwo_1_1VolumeDoubleSampler.html</filename>
    <base>SpatialSampler&lt; 3, DataDims, double &gt;</base>
  </compound>
  <compound kind="class">
    <name>VolumeDoubleSampler&lt; 4 &gt;</name>
    <filename>classinviwo_1_1VolumeDoubleSampler.html</filename>
    <base>SpatialSampler&lt; 3, DataDims, double &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeExport</name>
    <filename>classinviwo_1_1VolumeExport.html</filename>
    <base>DataExport&lt; Volume, VolumeInport &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeFirstHitCLProcessor</name>
    <filename>classinviwo_1_1VolumeFirstHitCLProcessor.html</filename>
    <base>inviwo::Processor</base>
    <base>inviwo::ProcessorKernelOwner</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VolumeFirstHitCLProcessor.html</anchorfile>
      <anchor>a550da21f7bd3d8023ce9674e5e82fe36</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeGL</name>
    <filename>classinviwo_1_1VolumeGL.html</filename>
    <base>inviwo::VolumeRepresentation</base>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeGL2CLGLConverter</name>
    <filename>classinviwo_1_1VolumeGL2CLGLConverter.html</filename>
    <base>RepresentationConverterType&lt; VolumeRepresentation, VolumeGL, VolumeCLGL &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeGL2RAMConverter</name>
    <filename>classinviwo_1_1VolumeGL2RAMConverter.html</filename>
    <base>RepresentationConverterType&lt; VolumeRepresentation, VolumeGL, VolumeRAM &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeGLProcessor</name>
    <filename>classinviwo_1_1VolumeGLProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VolumeGLProcessor.html</anchorfile>
      <anchor>a5507063875807fde0d19b43ccc20364f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classinviwo_1_1VolumeGLProcessor.html</anchorfile>
      <anchor>a1f72392c4c48742f3ca6eac7598a31bc</anchor>
      <arglist>(TextureUnitContainer &amp;cont)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>postProcess</name>
      <anchorfile>classinviwo_1_1VolumeGLProcessor.html</anchorfile>
      <anchor>a43a5b600a734275972f4991f966217fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>afterInportChanged</name>
      <anchorfile>classinviwo_1_1VolumeGLProcessor.html</anchorfile>
      <anchor>ada7ed629a5a449696cc32b97bf191c6a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeGradientCPUProcessor</name>
    <filename>classinviwo_1_1VolumeGradientCPUProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VolumeGradientCPUProcessor.html</anchorfile>
      <anchor>a3887ab67772fd8eaad9b2ab530832ea7</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeGradientMagnitude</name>
    <filename>classinviwo_1_1VolumeGradientMagnitude.html</filename>
    <base>inviwo::VolumeGLProcessor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classinviwo_1_1VolumeGradientMagnitude.html</anchorfile>
      <anchor>ad10955589f4ac08aaea3747f136b7a73</anchor>
      <arglist>(TextureUnitContainer &amp;cont) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>postProcess</name>
      <anchorfile>classinviwo_1_1VolumeGradientMagnitude.html</anchorfile>
      <anchor>a35f8cfe0b3f8973072c90a058eaa0d51</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeGradientProcessor</name>
    <filename>classinviwo_1_1VolumeGradientProcessor.html</filename>
    <base>inviwo::VolumeGLProcessor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classinviwo_1_1VolumeGradientProcessor.html</anchorfile>
      <anchor>ab8dcd2ba55c619fb25d01c1c0d67e066</anchor>
      <arglist>(TextureUnitContainer &amp;cont) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>postProcess</name>
      <anchorfile>classinviwo_1_1VolumeGradientProcessor.html</anchorfile>
      <anchor>a4a8c03878ff7e1fe0c8e155209db6119</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1VolumeGradientProcessor.html</anchorfile>
      <anchor>a1d19a36606e276642c1f7ff55e120bbc</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeIndicatorProperty</name>
    <filename>classinviwo_1_1VolumeIndicatorProperty.html</filename>
    <base>inviwo::CompositeProperty</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::hdf5::VolumeInfo</name>
    <filename>structinviwo_1_1hdf5_1_1VolumeInfo.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeInformationProperty</name>
    <filename>classinviwo_1_1VolumeInformationProperty.html</filename>
    <base>inviwo::CompositeProperty</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detail::VolumeLaplacianDispatcher</name>
    <filename>structinviwo_1_1util_1_1detail_1_1VolumeLaplacianDispatcher.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeLaplacianProcessor</name>
    <filename>classinviwo_1_1VolumeLaplacianProcessor.html</filename>
    <base>inviwo::Processor</base>
    <base>inviwo::ActivityIndicatorOwner</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VolumeLaplacianProcessor.html</anchorfile>
      <anchor>aee68b7b3b844d0e5573c1d026db02ac8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>classinviwo_1_1VolumeLaplacianProcessor.html</anchorfile>
      <anchor>a67f88faaebae20e2d8a9a243b3c47ad7</anchor>
      <arglist>(InvalidationLevel invalidationLevel, Property *modifiedProperty=nullptr) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeLowPass</name>
    <filename>classinviwo_1_1VolumeLowPass.html</filename>
    <base>inviwo::VolumeGLProcessor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classinviwo_1_1VolumeLowPass.html</anchorfile>
      <anchor>a8313be664bd76d41a04d353dcb37ff79</anchor>
      <arglist>(TextureUnitContainer &amp;cont) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>postProcess</name>
      <anchorfile>classinviwo_1_1VolumeLowPass.html</anchorfile>
      <anchor>ad228190f6b423c436ac7ba59a5ddcf9d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1VolumeLowPass.html</anchorfile>
      <anchor>a5bbbbb93f4a30dffa70c905f0da614ce</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeMapping</name>
    <filename>classinviwo_1_1VolumeMapping.html</filename>
    <base>inviwo::VolumeGLProcessor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classinviwo_1_1VolumeMapping.html</anchorfile>
      <anchor>aa31d8e975f4f7da6873b88c980f7f133</anchor>
      <arglist>(TextureUnitContainer &amp;cont) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeMaxCLProcessor</name>
    <filename>classinviwo_1_1VolumeMaxCLProcessor.html</filename>
    <base>inviwo::Processor</base>
    <base>inviwo::ProcessorKernelOwner</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VolumeMaxCLProcessor.html</anchorfile>
      <anchor>ae140ea096242d37a9dc86acd7f548871</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeMerger</name>
    <filename>classinviwo_1_1VolumeMerger.html</filename>
    <base>inviwo::VolumeGLProcessor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classinviwo_1_1VolumeMerger.html</anchorfile>
      <anchor>a2afb1686321ac48440bf23d12b0434b6</anchor>
      <arglist>(TextureUnitContainer &amp;cont) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::VolumeCLBase::VolumeParameters</name>
    <filename>structinviwo_1_1VolumeCLBase_1_1VolumeParameters.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeRAM</name>
    <filename>classinviwo_1_1VolumeRAM.html</filename>
    <base>inviwo::VolumeRepresentation</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setData</name>
      <anchorfile>classinviwo_1_1VolumeRAM.html</anchorfile>
      <anchor>a462509c2fbfac098ef575c4ee5a1d995</anchor>
      <arglist>(void *data, size3_t dimensions)=0</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>dispatch</name>
      <anchorfile>classinviwo_1_1VolumeRAM.html</anchorfile>
      <anchor>a3e671cd9baf12ea7cfd4ba5da3679f36</anchor>
      <arglist>(Callable &amp;&amp;callable, Args &amp;&amp;...args) -&gt; Result</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>dispatch</name>
      <anchorfile>classinviwo_1_1VolumeRAM.html</anchorfile>
      <anchor>a35477d0252b02dc7ee34a33a7c1e6f3c</anchor>
      <arglist>(Callable &amp;&amp;callable, Args &amp;&amp;...args) const -&gt; Result</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeRAM2CLConverter</name>
    <filename>classinviwo_1_1VolumeRAM2CLConverter.html</filename>
    <base>RepresentationConverterType&lt; VolumeRepresentation, VolumeRAM, VolumeCL &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeRAM2GLConverter</name>
    <filename>classinviwo_1_1VolumeRAM2GLConverter.html</filename>
    <base>RepresentationConverterType&lt; VolumeRepresentation, VolumeRAM, VolumeGL &gt;</base>
  </compound>
  <compound kind="struct">
    <name>inviwo::detail::VolumeRamConstDispatcher</name>
    <filename>structinviwo_1_1detail_1_1VolumeRamConstDispatcher.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::detail::VolumeRamDispatcher</name>
    <filename>structinviwo_1_1detail_1_1VolumeRamDispatcher.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeRAMPrecision</name>
    <filename>classinviwo_1_1VolumeRAMPrecision.html</filename>
    <templarg></templarg>
    <base>inviwo::VolumeRAM</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setData</name>
      <anchorfile>classinviwo_1_1VolumeRAMPrecision.html</anchorfile>
      <anchor>af87c20e89976b1ea06a7ea740fcb66e3</anchor>
      <arglist>(void *data, size3_t dimensions) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeRAMSubSet</name>
    <filename>classinviwo_1_1VolumeRAMSubSet.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::detail::VolumeRAMSubSetDispatcher</name>
    <filename>structinviwo_1_1detail_1_1VolumeRAMSubSetDispatcher.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeRaycaster</name>
    <filename>classinviwo_1_1VolumeRaycaster.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1VolumeRaycaster.html</anchorfile>
      <anchor>a28effb109aa8efe85f6f1f8a61c9d897</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VolumeRaycaster.html</anchorfile>
      <anchor>a52be4455f6edb6f793ccdd468bbe49dd</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeRaycasterCL</name>
    <filename>classinviwo_1_1VolumeRaycasterCL.html</filename>
    <base>inviwo::KernelOwner</base>
    <member kind="function">
      <type>void</type>
      <name>volumeRaycast</name>
      <anchorfile>classinviwo_1_1VolumeRaycasterCL.html</anchorfile>
      <anchor>aeae9f5f29f77910df0e910db52aa135e</anchor>
      <arglist>(const Volume *volume, const Layer *entryPoints, const Layer *exitPoints, const Layer *transferFunction, Layer *outImage, const VECTOR_CLASS&lt; cl::Event &gt; *waitForEvents=nullptr, cl::Event *event=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackground</name>
      <anchorfile>classinviwo_1_1VolumeRaycasterCL.html</anchorfile>
      <anchor>aed75baf312a8a9c0aa3f3f2c42f133ab</anchor>
      <arglist>(const Layer *val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultBackgroundColor</name>
      <anchorfile>classinviwo_1_1VolumeRaycasterCL.html</anchorfile>
      <anchor>a4b89f379691c4fbf5d5737c0e5abc066</anchor>
      <arglist>(const vec4 color)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notifyObserversKernelCompiled</name>
      <anchorfile>classinviwo_1_1VolumeRaycasterCL.html</anchorfile>
      <anchor>ab597e273a1028d4d14f948787391dded</anchor>
      <arglist>(const cl::Kernel *kernel)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeRaycasterCLProcessor</name>
    <filename>classinviwo_1_1VolumeRaycasterCLProcessor.html</filename>
    <base>inviwo::Processor</base>
    <base>inviwo::KernelObserver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VolumeRaycasterCLProcessor.html</anchorfile>
      <anchor>ac7782b4815c14908f6f8d18311129db0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onKernelCompiled</name>
      <anchorfile>classinviwo_1_1VolumeRaycasterCLProcessor.html</anchorfile>
      <anchor>a064d28722b81eb4ae2fa7e85cce4ba99</anchor>
      <arglist>(const cl::Kernel *) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeRepresentation</name>
    <filename>classinviwo_1_1VolumeRepresentation.html</filename>
    <base>DataRepresentation&lt; Volume &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeSequenceElementSelectorProcessor</name>
    <filename>classinviwo_1_1VolumeSequenceElementSelectorProcessor.html</filename>
    <base>VectorElementSelectorProcessor&lt; Volume &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeSequenceSampler</name>
    <filename>classinviwo_1_1VolumeSequenceSampler.html</filename>
    <base>Spatial4DSampler&lt; 3, double &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeSequenceSingleTimestepSampler</name>
    <filename>classinviwo_1_1VolumeSequenceSingleTimestepSampler.html</filename>
    <base>SpatialSampler&lt; 3, 3, double &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeSequenceSingleTimestepSamplerProcessor</name>
    <filename>classinviwo_1_1VolumeSequenceSingleTimestepSamplerProcessor.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VolumeSequenceSingleTimestepSamplerProcessor.html</anchorfile>
      <anchor>ab6d3f1c363d3d92235a9e4498c323ee2</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeSequenceSource</name>
    <filename>classinviwo_1_1VolumeSequenceSource.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VolumeSequenceSource.html</anchorfile>
      <anchor>afcf4463d54f54f3bbb951a56098c4a44</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeSequenceToSpatial4DSampler</name>
    <filename>classinviwo_1_1VolumeSequenceToSpatial4DSampler.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VolumeSequenceToSpatial4DSampler.html</anchorfile>
      <anchor>a9e2fe2a8e3a34eca65cf04fc6cc307d8</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeShader</name>
    <filename>classinviwo_1_1VolumeShader.html</filename>
    <base>inviwo::VolumeGLProcessor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1VolumeShader.html</anchorfile>
      <anchor>a421fd26aa5695fd711c41b33174cca3a</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeSlice</name>
    <filename>classinviwo_1_1VolumeSlice.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VolumeSlice.html</anchorfile>
      <anchor>ae64705acb0d04c28e1b00d7ab0753e6b</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeSliceGL</name>
    <filename>classinviwo_1_1VolumeSliceGL.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeResources</name>
      <anchorfile>classinviwo_1_1VolumeSliceGL.html</anchorfile>
      <anchor>a133d1b6fa8688c520c3cbf6531df49e8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VolumeSliceGL.html</anchorfile>
      <anchor>a3f5847e4f3b3b1bdb35c98b9fb4ae3a5</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeSource</name>
    <filename>classinviwo_1_1VolumeSource.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VolumeSource.html</anchorfile>
      <anchor>a70d9f501425073f62117f47736275ac0</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeSubsample</name>
    <filename>classinviwo_1_1VolumeSubsample.html</filename>
    <base>inviwo::Processor</base>
    <base>inviwo::ActivityIndicatorOwner</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VolumeSubsample.html</anchorfile>
      <anchor>a14683856f3028b96ad6ef969780e06da</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>classinviwo_1_1VolumeSubsample.html</anchorfile>
      <anchor>ad66d7eab97997f8f3c699b3b0e63d0c1</anchor>
      <arglist>(InvalidationLevel invalidationLevel, Property *modifiedProperty=nullptr) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeSubset</name>
    <filename>classinviwo_1_1VolumeSubset.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VolumeSubset.html</anchorfile>
      <anchor>ae590210f1e298f1f144bbe72d7e25009</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::VolumeToSpatialSampler</name>
    <filename>classinviwo_1_1VolumeToSpatialSampler.html</filename>
    <base>inviwo::Processor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1VolumeToSpatialSampler.html</anchorfile>
      <anchor>aaa1ba69e0a61e6914340cd19d572030a</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::WaveFrontWriter</name>
    <filename>classinviwo_1_1WaveFrontWriter.html</filename>
    <base>DataWriterType&lt; Mesh &gt;</base>
  </compound>
  <compound kind="class">
    <name>inviwo::WheelEvent</name>
    <filename>classinviwo_1_1WheelEvent.html</filename>
    <base>inviwo::MouseInteractionEvent</base>
  </compound>
  <compound kind="class">
    <name>inviwo::WheelEventMatcher</name>
    <filename>classinviwo_1_1WheelEventMatcher.html</filename>
    <base>inviwo::EventMatcher</base>
  </compound>
  <compound kind="class">
    <name>inviwo::WildCardArg</name>
    <filename>classinviwo_1_1WildCardArg.html</filename>
  </compound>
  <compound kind="class">
    <name>inviwo::WorkspaceManager</name>
    <filename>classinviwo_1_1WorkspaceManager.html</filename>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classinviwo_1_1WorkspaceManager.html</anchorfile>
      <anchor>ac5e78843cabc51f309835afc39277fdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>classinviwo_1_1WorkspaceManager.html</anchorfile>
      <anchor>a08e6cd52b795053b57f133a97ca56db7</anchor>
      <arglist>(std::ostream &amp;stream, const std::string &amp;refPath, const ExceptionHandler &amp;exceptionHandler=StandardExceptionHandler())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>classinviwo_1_1WorkspaceManager.html</anchorfile>
      <anchor>acae4ec5bfad7ff2d23ab1210ef55b1b2</anchor>
      <arglist>(const std::string &amp;path, const ExceptionHandler &amp;exceptionHandler=StandardExceptionHandler())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classinviwo_1_1WorkspaceManager.html</anchorfile>
      <anchor>ab182ff97f8927cece02ab09b160dd26e</anchor>
      <arglist>(std::istream &amp;stream, const std::string &amp;refPath, const ExceptionHandler &amp;exceptionHandler=StandardExceptionHandler())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classinviwo_1_1WorkspaceManager.html</anchorfile>
      <anchor>aa5eb1e6f8aa6c4f94856ec85ac3c686b</anchor>
      <arglist>(const std::string &amp;path, const ExceptionHandler &amp;exceptionHandler=StandardExceptionHandler())</arglist>
    </member>
    <member kind="function">
      <type>ClearHandle</type>
      <name>onClear</name>
      <anchorfile>classinviwo_1_1WorkspaceManager.html</anchorfile>
      <anchor>a6c3673a561ef9aefa66a8cdf92902f69</anchor>
      <arglist>(const ClearCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>SerializationHandle</type>
      <name>onSave</name>
      <anchorfile>classinviwo_1_1WorkspaceManager.html</anchorfile>
      <anchor>ade68da914bc55d1a65b92c507ab2e449</anchor>
      <arglist>(const SerializationCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>DeserializationHandle</type>
      <name>onLoad</name>
      <anchorfile>classinviwo_1_1WorkspaceManager.html</anchorfile>
      <anchor>ad63095cda583b85b7dd7c937b758ab6a</anchor>
      <arglist>(const DeserializationCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerFactory</name>
      <anchorfile>classinviwo_1_1WorkspaceManager.html</anchorfile>
      <anchor>a37c01880a5705834847dadb6ef7ab545</anchor>
      <arglist>(FactoryBase *factory)</arglist>
    </member>
    <member kind="function">
      <type>Deserializer</type>
      <name>createWorkspaceDeserializer</name>
      <anchorfile>classinviwo_1_1WorkspaceManager.html</anchorfile>
      <anchor>af8300b4710a0a5a750822f74addc7ff8</anchor>
      <arglist>(std::istream &amp;stream, const std::string &amp;refPath) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>inviwo::WorldTransform</name>
    <filename>classinviwo_1_1WorldTransform.html</filename>
    <templarg></templarg>
    <base>inviwo::Processor</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>classinviwo_1_1WorldTransform.html</anchorfile>
      <anchor>a3587b650959b163f3e649bba6961764d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::utildoc::TableBuilder::Wrapper</name>
    <filename>structinviwo_1_1utildoc_1_1TableBuilder_1_1Wrapper.html</filename>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detailzip::zipIterator</name>
    <filename>structinviwo_1_1util_1_1detailzip_1_1zipIterator.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structinviwo_1_1util_1_1detailzip_1_1zipIterator.html</anchorfile>
      <anchor>a027d88cb072071ba23deb874560bacd9</anchor>
      <arglist>(const zipIterator &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structinviwo_1_1util_1_1detailzip_1_1zipIterator.html</anchorfile>
      <anchor>a38e623a0e8a4b72196447c398111c3c5</anchor>
      <arglist>(const zipIterator &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inviwo::util::detailzip::zipper</name>
    <filename>structinviwo_1_1util_1_1detailzip_1_1zipper.html</filename>
    <templarg>Iterable</templarg>
  </compound>
  <compound kind="namespace">
    <name>cl</name>
    <filename>namespacecl.html</filename>
    <member kind="typedef">
      <type>std::string</type>
      <name>STRING_CLASS</name>
      <anchorfile>namespacecl.html</anchorfile>
      <anchor>ad3ff55c5fe80ec84842876af323559c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>cl_int</type>
      <name>copy</name>
      <anchorfile>namespacecl.html</anchorfile>
      <anchor>a1197a833cdd6664f206b079f2bebd2eb</anchor>
      <arglist>(IteratorType startIterator, IteratorType endIterator, cl::Buffer &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>cl_int</type>
      <name>copy</name>
      <anchorfile>namespacecl.html</anchorfile>
      <anchor>a05791e9d5da23b21abd6e319fb262c9f</anchor>
      <arglist>(const cl::Buffer &amp;buffer, IteratorType startIterator, IteratorType endIterator)</arglist>
    </member>
    <member kind="function">
      <type>cl_int</type>
      <name>copy</name>
      <anchorfile>namespacecl.html</anchorfile>
      <anchor>a2f71ed9a316daf59c03c0f3ba62f1bd3</anchor>
      <arglist>(const CommandQueue &amp;queue, IteratorType startIterator, IteratorType endIterator, cl::Buffer &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>cl_int</type>
      <name>copy</name>
      <anchorfile>namespacecl.html</anchorfile>
      <anchor>a02c4368c6ce7a1a99132eafd5dc96fa9</anchor>
      <arglist>(const CommandQueue &amp;queue, const cl::Buffer &amp;buffer, IteratorType startIterator, IteratorType endIterator)</arglist>
    </member>
    <member kind="function">
      <type>CL_EXT_PREFIX__VERSION_1_1_DEPRECATED LocalSpaceArg</type>
      <name>__local</name>
      <anchorfile>namespacecl.html</anchorfile>
      <anchor>a8c0bd8b2f6874ca5a62e2f25e5116c64</anchor>
      <arglist>(::size_t size) CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>LocalSpaceArg</type>
      <name>Local</name>
      <anchorfile>namespacecl.html</anchorfile>
      <anchor>a861d36f255ea512d3aba2c40ce952e44</anchor>
      <arglist>(::size_t size)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>inviwo</name>
    <filename>namespaceinviwo.html</filename>
    <namespace>inviwo::cimgutil</namespace>
    <namespace>inviwo::color</namespace>
    <namespace>inviwo::colorbrewer</namespace>
    <namespace>inviwo::eigenutil</namespace>
    <namespace>inviwo::filesystem</namespace>
    <namespace>inviwo::inviwopy</namespace>
    <namespace>inviwo::meshutil</namespace>
    <namespace>inviwo::plot</namespace>
    <namespace>inviwo::pyutil</namespace>
    <namespace>inviwo::statsutil</namespace>
    <namespace>inviwo::swizzlemasks</namespace>
    <namespace>inviwo::util</namespace>
    <namespace>inviwo::utilcl</namespace>
    <namespace>inviwo::utildoc</namespace>
    <namespace>inviwo::utilgl</namespace>
    <namespace>inviwo::utilqt</namespace>
    <class kind="class">inviwo::AbortException</class>
    <class kind="class">inviwo::ABufferGeometryGLProcessor</class>
    <class kind="class">inviwo::ABufferGLCompositeProperty</class>
    <class kind="class">inviwo::ABufferGLModule</class>
    <class kind="class">inviwo::ActivityIndicator</class>
    <class kind="class">inviwo::ActivityIndicatorObserver</class>
    <class kind="class">inviwo::ActivityIndicatorOwner</class>
    <class kind="class">inviwo::AdvancedMaterialProperty</class>
    <class kind="class">inviwo::AnglePropertyWidgetQt</class>
    <class kind="class">inviwo::AngleRadiusWidget</class>
    <class kind="class">inviwo::AnimationModule</class>
    <class kind="class">inviwo::AnimationQtModule</class>
    <class kind="class">inviwo::AssimpModule</class>
    <class kind="class">inviwo::AssimpReader</class>
    <class kind="class">inviwo::AutoLinker</class>
    <class kind="class">inviwo::AxisAlignedCutPlane</class>
    <class kind="class">inviwo::Background</class>
    <class kind="class">inviwo::BaseCLModule</class>
    <class kind="class">inviwo::BaseGLModule</class>
    <class kind="class">inviwo::BaseImageInport</class>
    <class kind="class">inviwo::BaseModule</class>
    <class kind="class">inviwo::BaseModuleCallback</class>
    <class kind="class">inviwo::BaseOptionProperty</class>
    <class kind="class">inviwo::BaseOrdinalAnimationProperty</class>
    <class kind="class">inviwo::BaseOrdinalEditorWidget</class>
    <class kind="class">inviwo::BaseRepresentationConverter</class>
    <class kind="class">inviwo::BaseRepresentationConverterFactory</class>
    <class kind="class">inviwo::BaseSliderWidgetQt</class>
    <class kind="class">inviwo::BasicMesh</class>
    <class kind="class">inviwo::BasisProperty</class>
    <class kind="class">inviwo::BasisTransform</class>
    <class kind="class">inviwo::BinarySTLWriter</class>
    <class kind="class">inviwo::BoolCompositeProperty</class>
    <class kind="class">inviwo::BoolCompositePropertyWidgetQt</class>
    <class kind="class">inviwo::BoolProperty</class>
    <class kind="class">inviwo::BoolPropertyWidgetQt</class>
    <class kind="class">inviwo::BrushingAndLinkingEvent</class>
    <class kind="class">inviwo::BrushingAndLinkingInport</class>
    <class kind="class">inviwo::BrushingAndLinkingManager</class>
    <class kind="class">inviwo::BrushingAndLinkingModule</class>
    <class kind="class">inviwo::BrushingAndLinkingOutport</class>
    <class kind="class">inviwo::BrushingAndLinkingProcessor</class>
    <class kind="class">inviwo::Buffer</class>
    <class kind="class">inviwo::BufferBase</class>
    <class kind="class">inviwo::BufferCL</class>
    <class kind="class">inviwo::BufferCL2RAMConverter</class>
    <class kind="class">inviwo::BufferCLBase</class>
    <class kind="class">inviwo::BufferCLGL</class>
    <class kind="class">inviwo::BufferCLGL2CLConverter</class>
    <class kind="class">inviwo::BufferCLGL2GLConverter</class>
    <class kind="class">inviwo::BufferCLGL2RAMConverter</class>
    <class kind="class">inviwo::BufferGL</class>
    <class kind="class">inviwo::BufferGL2CLGLConverter</class>
    <class kind="class">inviwo::BufferGL2RAMConverter</class>
    <class kind="class">inviwo::BufferGLObjectId</class>
    <class kind="class">inviwo::BufferObject</class>
    <class kind="class">inviwo::BufferObjectArray</class>
    <class kind="class">inviwo::BufferObjectObserver</class>
    <class kind="class">inviwo::BufferRAM</class>
    <class kind="class">inviwo::BufferRAM2CLConverter</class>
    <class kind="class">inviwo::BufferRAM2GLConverter</class>
    <class kind="class">inviwo::BufferRAMPrecision</class>
    <class kind="class">inviwo::BufferRepresentation</class>
    <class kind="class">inviwo::BufferToMeshProcessor</class>
    <class kind="class">inviwo::ButtonProperty</class>
    <class kind="class">inviwo::ButtonPropertyWidgetQt</class>
    <class kind="class">inviwo::CallBackList</class>
    <class kind="class">inviwo::CallbackWithSingleArgument</class>
    <class kind="class">inviwo::Camera</class>
    <class kind="class">inviwo::CameraFactory</class>
    <class kind="class">inviwo::CameraFactoryObject</class>
    <class kind="class">inviwo::CameraFactoryObjectTemplate</class>
    <class kind="class">inviwo::CameraFrustum</class>
    <class kind="class">inviwo::CameraProperty</class>
    <class kind="class">inviwo::CameraTrackball</class>
    <class kind="class">inviwo::CameraWidget</class>
    <class kind="class">inviwo::Canvas</class>
    <class kind="class">inviwo::CanvasGL</class>
    <class kind="class">inviwo::CanvasGLFW</class>
    <class kind="class">inviwo::CanvasProcessor</class>
    <class kind="class">inviwo::CanvasProcessorGL</class>
    <class kind="class">inviwo::CanvasProcessorWidget</class>
    <class kind="class">inviwo::CanvasProcessorWidgetGLFW</class>
    <class kind="class">inviwo::CanvasProcessorWidgetQt</class>
    <class kind="class">inviwo::CanvasQGLWidget</class>
    <class kind="class">inviwo::CanvasQOpenGLWidget</class>
    <class kind="class">inviwo::CanvasQtBase</class>
    <class kind="class">inviwo::CanvasQWindow</class>
    <class kind="class">inviwo::Capabilities</class>
    <class kind="struct">inviwo::CaseInsensitiveCompare</class>
    <class kind="class">inviwo::CheckableQComboBox</class>
    <class kind="class">inviwo::CImgLayerRAMLoader</class>
    <class kind="class">inviwo::CImgLayerReader</class>
    <class kind="class">inviwo::CImgLayerWriter</class>
    <class kind="class">inviwo::CImgModule</class>
    <class kind="class">inviwo::CImgVolumeRAMLoader</class>
    <class kind="class">inviwo::CImgVolumeReader</class>
    <class kind="class">inviwo::CLFormats</class>
    <class kind="class">inviwo::Clock</class>
    <class kind="class">inviwo::ClockGL</class>
    <class kind="class">inviwo::CloningFactory</class>
    <class kind="class">inviwo::CollapsibleGroupBoxWidgetQt</class>
    <class kind="class">inviwo::ColorPropertyWidgetQt</class>
    <class kind="class">inviwo::ColorWheel</class>
    <class kind="class">inviwo::CommandLineParser</class>
    <class kind="class">inviwo::ComparePointers</class>
    <class kind="struct">inviwo::comparePtr</class>
    <class kind="class">inviwo::CompositeProcessor</class>
    <class kind="class">inviwo::CompositeProcessorFactoryObject</class>
    <class kind="class">inviwo::CompositeProperty</class>
    <class kind="class">inviwo::CompositePropertyObservable</class>
    <class kind="class">inviwo::CompositePropertyObserver</class>
    <class kind="class">inviwo::CompositePropertyWidgetQt</class>
    <class kind="class">inviwo::CompositeSink</class>
    <class kind="class">inviwo::CompositeSinkBase</class>
    <class kind="class">inviwo::CompositeSource</class>
    <class kind="class">inviwo::CompositeSourceBase</class>
    <class kind="class">inviwo::ConnectionDragGraphicsItem</class>
    <class kind="class">inviwo::ConnectionGraphicsItem</class>
    <class kind="class">inviwo::ConsoleLogger</class>
    <class kind="class">inviwo::ConsoleWidget</class>
    <class kind="class">inviwo::ContainerWrapper</class>
    <class kind="class">inviwo::ConverterException</class>
    <class kind="class">inviwo::ConvexHull2DProcessor</class>
    <class kind="class">inviwo::CropWidget</class>
    <class kind="class">inviwo::CSVDataReaderException</class>
    <class kind="class">inviwo::CSVReader</class>
    <class kind="class">inviwo::CubeProxyGeometry</class>
    <class kind="class">inviwo::CubeRenderer</class>
    <class kind="class">inviwo::CurveGraphicsItem</class>
    <class kind="class">inviwo::CustomDoubleSpinBoxQt</class>
    <class kind="class">inviwo::Data</class>
    <class kind="class">inviwo::DataExport</class>
    <class kind="class">inviwo::DataFormat</class>
    <class kind="class">inviwo::DataFormatBase</class>
    <class kind="class">inviwo::DataFormatException</class>
    <class kind="class">inviwo::DataGroup</class>
    <class kind="class">inviwo::DataGroupRepresentation</class>
    <class kind="class">inviwo::DataInport</class>
    <class kind="class">inviwo::DataMapper</class>
    <class kind="class">inviwo::DataOutport</class>
    <class kind="class">inviwo::DataReader</class>
    <class kind="class">inviwo::DataReaderDialog</class>
    <class kind="class">inviwo::DataReaderException</class>
    <class kind="class">inviwo::DataReaderFactory</class>
    <class kind="class">inviwo::DataReaderType</class>
    <class kind="class">inviwo::DataRepresentation</class>
    <class kind="class">inviwo::DataSource</class>
    <class kind="class">inviwo::DataTraits</class>
    <class kind="struct">inviwo::DataTraits&lt; BrushingAndLinkingManager &gt;</class>
    <class kind="struct">inviwo::DataTraits&lt; Eigen::MatrixXf &gt;</class>
    <class kind="struct">inviwo::DataTraits&lt; IntegralLineSet &gt;</class>
    <class kind="struct">inviwo::DataTraits&lt; plot::DataFrame &gt;</class>
    <class kind="struct">inviwo::DataTraits&lt; Spatial4DSampler&lt; DataDims, T &gt; &gt;</class>
    <class kind="struct">inviwo::DataTraits&lt; SpatialSampler&lt; SpatialDims, DataDims, T &gt; &gt;</class>
    <class kind="struct">inviwo::DataTraits&lt; std::vector&lt; std::shared_ptr&lt; T &gt;, A &gt; &gt;</class>
    <class kind="struct">inviwo::DataTraits&lt; std::vector&lt; std::unique_ptr&lt; T, D &gt;, A &gt; &gt;</class>
    <class kind="struct">inviwo::DataTraits&lt; std::vector&lt; T *, A &gt; &gt;</class>
    <class kind="struct">inviwo::DataTraits&lt; std::vector&lt; T, A &gt; &gt;</class>
    <class kind="struct">inviwo::DataTraits&lt; T, std::enable_if_t&lt; util::HasDataFormat&lt; T &gt;::value &gt; &gt;</class>
    <class kind="class">inviwo::DataWriter</class>
    <class kind="class">inviwo::DataWriterException</class>
    <class kind="class">inviwo::DataWriterFactory</class>
    <class kind="class">inviwo::DataWriterType</class>
    <class kind="class">inviwo::DatVolumeSequenceReader</class>
    <class kind="class">inviwo::DatVolumeWriter</class>
    <class kind="struct">inviwo::Defaultvalues</class>
    <class kind="class">inviwo::Delay</class>
    <class kind="class">inviwo::DepthDarkening</class>
    <class kind="class">inviwo::DeserializationErrorHandle</class>
    <class kind="class">inviwo::Deserializer</class>
    <class kind="class">inviwo::Dialog</class>
    <class kind="class">inviwo::DialogConnectionGraphicsItem</class>
    <class kind="class">inviwo::DialogCurveGraphicsItem</class>
    <class kind="class">inviwo::DialogFactory</class>
    <class kind="class">inviwo::DialogFactoryObject</class>
    <class kind="class">inviwo::DialogFactoryObjectTemplate</class>
    <class kind="class">inviwo::DiffuseLight</class>
    <class kind="class">inviwo::DiffuseLightSourceProcessor</class>
    <class kind="class">inviwo::DirectionalLight</class>
    <class kind="class">inviwo::DirectionalLightSourceProcessor</class>
    <class kind="class">inviwo::DirectoryProperty</class>
    <class kind="class">inviwo::DiscardShortLines</class>
    <class kind="class">inviwo::DisjointSets</class>
    <class kind="class">inviwo::DiskRepresentation</class>
    <class kind="class">inviwo::DiskRepresentationLoader</class>
    <class kind="class">inviwo::Dispatcher</class>
    <class kind="class">inviwo::DistanceTransformRAM</class>
    <class kind="class">inviwo::Document</class>
    <class kind="class">inviwo::DrawLines</class>
    <class kind="class">inviwo::DrawPoints</class>
    <class kind="class">inviwo::Edge</class>
    <class kind="class">inviwo::EdgeDataFormat</class>
    <class kind="class">inviwo::EditableLabelQt</class>
    <class kind="class">inviwo::EditorGraphicsItem</class>
    <class kind="class">inviwo::EigenMatrixToImage</class>
    <class kind="class">inviwo::EigenMix</class>
    <class kind="class">inviwo::EigenNormalize</class>
    <class kind="class">inviwo::EigenUtilsModule</class>
    <class kind="struct">inviwo::ElementIdentifier</class>
    <class kind="class">inviwo::EntryExitPoints</class>
    <class kind="class">inviwo::EntryExitPointsCLProcessor</class>
    <class kind="struct">inviwo::equalPtr</class>
    <class kind="class">inviwo::Event</class>
    <class kind="class">inviwo::EventHandler</class>
    <class kind="class">inviwo::EventListener</class>
    <class kind="class">inviwo::EventMatcher</class>
    <class kind="class">inviwo::EventPropagator</class>
    <class kind="class">inviwo::EventProperty</class>
    <class kind="class">inviwo::EventPropertyWidgetQt</class>
    <class kind="class">inviwo::Exception</class>
    <class kind="struct">inviwo::ExceptionContext</class>
    <class kind="class">inviwo::Factory</class>
    <class kind="class">inviwo::FactoryBase</class>
    <class kind="class">inviwo::FactoryObservable</class>
    <class kind="class">inviwo::FactoryObserver</class>
    <class kind="class">inviwo::FileDialog</class>
    <class kind="class">inviwo::FileException</class>
    <class kind="class">inviwo::FileExtension</class>
    <class kind="class">inviwo::FileLogger</class>
    <class kind="class">inviwo::FileObserver</class>
    <class kind="class">inviwo::FilePathLineEditQt</class>
    <class kind="class">inviwo::FilePatternProperty</class>
    <class kind="class">inviwo::FileProperty</class>
    <class kind="class">inviwo::FilePropertyWidgetQt</class>
    <class kind="class">inviwo::FileRequestable</class>
    <class kind="class">inviwo::FileShaderResource</class>
    <class kind="class">inviwo::FilteringEvent</class>
    <class kind="class">inviwo::FindEdges</class>
    <class kind="class">inviwo::FirstIvwProcessor</class>
    <class kind="class">inviwo::Fog</class>
    <class kind="class">inviwo::FontProperty</class>
    <class kind="class">inviwo::FontRenderingModule</class>
    <class kind="class">inviwo::FontSizePropertyWidgetQt</class>
    <class kind="class">inviwo::FrameBufferObject</class>
    <class kind="class">inviwo::FXAA</class>
    <class kind="class">inviwo::Gaussian1DProperty</class>
    <class kind="class">inviwo::Gaussian2DProperty</class>
    <class kind="class">inviwo::GaussianProperty</class>
    <class kind="class">inviwo::GeneralEventMatcher</class>
    <class kind="class">inviwo::GestureEvent</class>
    <class kind="class">inviwo::GestureEventMatcher</class>
    <class kind="class">inviwo::GLFormats</class>
    <class kind="class">inviwo::GLFWException</class>
    <class kind="class">inviwo::GLFWInitException</class>
    <class kind="class">inviwo::GLFWModule</class>
    <class kind="class">inviwo::GLUITestProcessor</class>
    <class kind="class">inviwo::GraphicsItemData</class>
    <class kind="class">inviwo::GrayscaleCLProcessor</class>
    <class kind="struct">inviwo::HasOwnerDeleter</class>
    <class kind="class">inviwo::HDF5Module</class>
    <class kind="class">inviwo::HdrBloom</class>
    <class kind="class">inviwo::HedgeHog2D</class>
    <class kind="class">inviwo::HeightFieldMapper</class>
    <class kind="class">inviwo::HeightFieldProcessor</class>
    <class kind="class">inviwo::HelpWidget</class>
    <class kind="class">inviwo::HiddenCanvasQt</class>
    <class kind="class">inviwo::HistogramContainer</class>
    <class kind="class">inviwo::IdentityPropertyTransformer</class>
    <class kind="class">inviwo::IgnoreException</class>
    <class kind="class">inviwo::Image</class>
    <class kind="class">inviwo::ImageBinary</class>
    <class kind="class">inviwo::ImageBrightnessContrast</class>
    <class kind="class">inviwo::ImageCache</class>
    <class kind="class">inviwo::ImageCL</class>
    <class kind="class">inviwo::ImageCLGL</class>
    <class kind="class">inviwo::ImageCompositeProcessorGL</class>
    <class kind="class">inviwo::ImageCompositor</class>
    <class kind="class">inviwo::ImageContour</class>
    <class kind="class">inviwo::ImageContourProcessor</class>
    <class kind="class">inviwo::ImageConvolution</class>
    <class kind="class">inviwo::ImageEdgeDarken</class>
    <class kind="class">inviwo::ImageEditorProperty</class>
    <class kind="class">inviwo::ImageEditorWidgetQt</class>
    <class kind="class">inviwo::ImageExport</class>
    <class kind="class">inviwo::ImageGamma</class>
    <class kind="class">inviwo::ImageGL</class>
    <class kind="class">inviwo::ImageGLProcessor</class>
    <class kind="class">inviwo::ImageGradient</class>
    <class kind="class">inviwo::ImageGrayscale</class>
    <class kind="class">inviwo::ImageHighPass</class>
    <class kind="class">inviwo::ImageHueSaturationLuminance</class>
    <class kind="class">inviwo::ImageInvert</class>
    <class kind="class">inviwo::ImageLabel</class>
    <class kind="class">inviwo::ImageLabelWidget</class>
    <class kind="class">inviwo::ImageLayoutGL</class>
    <class kind="class">inviwo::ImageLowPass</class>
    <class kind="class">inviwo::ImageMapping</class>
    <class kind="class">inviwo::ImageMixer</class>
    <class kind="class">inviwo::ImageNormalizationProcessor</class>
    <class kind="class">inviwo::ImageOpacity</class>
    <class kind="class">inviwo::ImageOutport</class>
    <class kind="class">inviwo::ImageOverlayGL</class>
    <class kind="class">inviwo::ImagePortBase</class>
    <class kind="class">inviwo::ImageRAM</class>
    <class kind="class">inviwo::ImageRAMCustomPrecision</class>
    <class kind="class">inviwo::ImageRAMPrecision</class>
    <class kind="class">inviwo::ImageRepresentation</class>
    <class kind="class">inviwo::ImageResample</class>
    <class kind="class">inviwo::ImageReuseCache</class>
    <class kind="class">inviwo::ImageScaling</class>
    <class kind="class">inviwo::ImageSequenceElementSelectorProcessor</class>
    <class kind="class">inviwo::ImageSharpen</class>
    <class kind="class">inviwo::ImageSnapshot</class>
    <class kind="class">inviwo::ImageSource</class>
    <class kind="class">inviwo::ImageSourceSeries</class>
    <class kind="class">inviwo::ImageSpatialSampler</class>
    <class kind="class">inviwo::ImageToSpatialSampler</class>
    <class kind="struct">inviwo::ImgRect</class>
    <class kind="class">inviwo::IndexList</class>
    <class kind="class">inviwo::Inport</class>
    <class kind="class">inviwo::InportFactory</class>
    <class kind="class">inviwo::InportFactoryObject</class>
    <class kind="class">inviwo::InportFactoryObjectTemplate</class>
    <class kind="class">inviwo::InportIterable</class>
    <class kind="class">inviwo::InportIterable&lt; T, false &gt;</class>
    <class kind="class">inviwo::InputSelector</class>
    <class kind="class">inviwo::IntegralLine</class>
    <class kind="class">inviwo::IntegralLineProperties</class>
    <class kind="class">inviwo::IntegralLineSet</class>
    <class kind="class">inviwo::IntegralLineTracer</class>
    <class kind="class">inviwo::IntegralLineVectorToMesh</class>
    <class kind="class">inviwo::InteractionEvent</class>
    <class kind="class">inviwo::InteractionHandler</class>
    <class kind="class">inviwo::Interpolation</class>
    <class kind="struct">inviwo::IntersectionResult</class>
    <class kind="class">inviwo::InvalidConversion</class>
    <class kind="class">inviwo::Inviwo_ABufferGL4</class>
    <class kind="class">inviwo::Inviwo_ABufferGL4_LinkedList</class>
    <class kind="class">inviwo::InviwoAboutWindow</class>
    <class kind="class">inviwo::InviwoApplication</class>
    <class kind="class">inviwo::InviwoApplicationQt</class>
    <class kind="class">inviwo::InviwoCore</class>
    <class kind="class">inviwo::InviwoDockWidget</class>
    <class kind="class">inviwo::InviwoDockWidgetTitleBar</class>
    <class kind="class">inviwo::InviwoEditMenu</class>
    <class kind="class">inviwo::InviwoFileDialog</class>
    <class kind="class">inviwo::InviwoMainWindow</class>
    <class kind="class">inviwo::InviwoModule</class>
    <class kind="class">inviwo::InviwoModuleFactoryObject</class>
    <class kind="class">inviwo::InviwoModuleFactoryObjectTemplate</class>
    <class kind="class">inviwo::InviwoModuleLibraryObserver</class>
    <class kind="class">inviwo::InviwoQtEvent</class>
    <class kind="struct">inviwo::InviwoSetupInfo</class>
    <class kind="class">inviwo::InviwoSplashScreen</class>
    <class kind="class">inviwo::ISORaycaster</class>
    <class kind="class">inviwo::IvfSequenceVolumeReader</class>
    <class kind="class">inviwo::IvfSequenceVolumeWriter</class>
    <class kind="class">inviwo::IvfVolumeReader</class>
    <class kind="class">inviwo::IvfVolumeWriter</class>
    <class kind="class">inviwo::IvwComboBox</class>
    <class kind="class">inviwo::IvwLineEdit</class>
    <class kind="class">inviwo::IvwPushButton</class>
    <class kind="class">inviwo::Jacobian2D</class>
    <class kind="class">inviwo::KDNode</class>
    <class kind="struct">inviwo::KDNodeDistWrapper</class>
    <class kind="class">inviwo::KDTree</class>
    <class kind="class">inviwo::KDTreeGlm</class>
    <class kind="class">inviwo::KernelManager</class>
    <class kind="class">inviwo::KernelObservable</class>
    <class kind="class">inviwo::KernelObserver</class>
    <class kind="class">inviwo::KernelOwner</class>
    <class kind="class">inviwo::KeyboardEvent</class>
    <class kind="class">inviwo::KeyboardEventMatcher</class>
    <class kind="class">inviwo::LabelGraphicsItem</class>
    <class kind="class">inviwo::LabelGraphicsItemObservable</class>
    <class kind="class">inviwo::LabelGraphicsItemObserver</class>
    <class kind="class">inviwo::Layer</class>
    <class kind="class">inviwo::LayerCL</class>
    <class kind="class">inviwo::LayerCL2RAMConverter</class>
    <class kind="class">inviwo::LayerCLBase</class>
    <class kind="class">inviwo::LayerCLGL</class>
    <class kind="class">inviwo::LayerCLGL2CLConverter</class>
    <class kind="class">inviwo::LayerCLGL2GLConverter</class>
    <class kind="class">inviwo::LayerCLGL2RAMConverter</class>
    <class kind="class">inviwo::LayerCLResizer</class>
    <class kind="class">inviwo::LayerDisk</class>
    <class kind="class">inviwo::LayerDisk2RAMConverter</class>
    <class kind="class">inviwo::LayerDistanceTransformRAM</class>
    <class kind="class">inviwo::LayerGL</class>
    <class kind="class">inviwo::LayerGL2CLGLConverter</class>
    <class kind="class">inviwo::LayerGL2RAMConverter</class>
    <class kind="class">inviwo::LayerRAM</class>
    <class kind="class">inviwo::LayerRAM2CLConverter</class>
    <class kind="class">inviwo::LayerRAM2GLConverter</class>
    <class kind="class">inviwo::LayerRAMPrecision</class>
    <class kind="class">inviwo::LayerRepresentation</class>
    <class kind="class">inviwo::LibrarySearchDirs</class>
    <class kind="class">inviwo::LIC2D</class>
    <class kind="class">inviwo::LIC3D</class>
    <class kind="class">inviwo::LicenseInfo</class>
    <class kind="class">inviwo::LightingRaycaster</class>
    <class kind="class">inviwo::LightPositionWidgetQt</class>
    <class kind="class">inviwo::LightPropertyWidgetQt</class>
    <class kind="class">inviwo::LightSource</class>
    <class kind="class">inviwo::LightVolumeGL</class>
    <class kind="class">inviwo::LineEditQt</class>
    <class kind="class">inviwo::LineRenderer</class>
    <class kind="class">inviwo::LinkConnectionDragGraphicsItem</class>
    <class kind="class">inviwo::LinkConnectionGraphicsItem</class>
    <class kind="class">inviwo::LinkDialog</class>
    <class kind="class">inviwo::LinkDialogGraphicsScene</class>
    <class kind="class">inviwo::LinkDialogGraphicsView</class>
    <class kind="class">inviwo::LinkDialogProcessorGraphicsItem</class>
    <class kind="class">inviwo::LinkDialogPropertyGraphicsItem</class>
    <class kind="class">inviwo::LinkDialogTreeItem</class>
    <class kind="class">inviwo::LinkEvaluator</class>
    <class kind="class">inviwo::LinkGraphicsItem</class>
    <class kind="class">inviwo::LinkSettings</class>
    <class kind="class">inviwo::LogCentral</class>
    <class kind="class">inviwo::LogErrorCounter</class>
    <class kind="class">inviwo::Logger</class>
    <class kind="class">inviwo::LogModel</class>
    <class kind="class">inviwo::LogTableModel</class>
    <class kind="struct">inviwo::LogTableModelEntry</class>
    <class kind="class">inviwo::LorenzSystem</class>
    <class kind="class">inviwo::MarchingTetrahedron</class>
    <class kind="class">inviwo::MatrixMetaData</class>
    <class kind="class">inviwo::MenuItem</class>
    <class kind="class">inviwo::Mesh</class>
    <class kind="class">inviwo::Mesh2DRenderProcessorGL</class>
    <class kind="class">inviwo::MeshClipping</class>
    <class kind="class">inviwo::MeshCreator</class>
    <class kind="class">inviwo::MeshDrawer</class>
    <class kind="class">inviwo::MeshDrawerFactory</class>
    <class kind="class">inviwo::MeshDrawerGL</class>
    <class kind="class">inviwo::MeshEntryExitPointsCL</class>
    <class kind="class">inviwo::MeshExport</class>
    <class kind="class">inviwo::MeshGL</class>
    <class kind="class">inviwo::MeshMapping</class>
    <class kind="class">inviwo::MeshPicking</class>
    <class kind="class">inviwo::MeshRAM</class>
    <class kind="class">inviwo::MeshRenderProcessorGL</class>
    <class kind="class">inviwo::MeshRepresentation</class>
    <class kind="class">inviwo::MeshSequenceElementSelectorProcessor</class>
    <class kind="class">inviwo::MeshSource</class>
    <class kind="class">inviwo::MetaData</class>
    <class kind="class">inviwo::MetaDataFactory</class>
    <class kind="class">inviwo::MetaDataMap</class>
    <class kind="class">inviwo::MetaDataOwner</class>
    <class kind="class">inviwo::MetaDataPrimitiveType</class>
    <class kind="class">inviwo::MetaDataPrimitiveType&lt; T, 0, 0 &gt;</class>
    <class kind="class">inviwo::MetaDataPrimitiveType&lt; T, N, 0 &gt;</class>
    <class kind="class">inviwo::MetaDataPrimitiveType&lt; T, N, N &gt;</class>
    <class kind="struct">inviwo::MinMaxHelper</class>
    <class kind="class">inviwo::MinMaxProperty</class>
    <class kind="class">inviwo::ModuleCallback</class>
    <class kind="class">inviwo::ModuleCallbackAction</class>
    <class kind="class">inviwo::ModuleInitException</class>
    <class kind="class">inviwo::ModuleManager</class>
    <class kind="class">inviwo::MouseEvent</class>
    <class kind="class">inviwo::MouseEventMatcher</class>
    <class kind="class">inviwo::MouseInteractionEvent</class>
    <class kind="class">inviwo::MPVMVolumeReader</class>
    <class kind="class">inviwo::MultichannelRaycaster</class>
    <class kind="class">inviwo::MultiFileProperty</class>
    <class kind="class">inviwo::MultiFilePropertyWidgetQt</class>
    <class kind="class">inviwo::MultilineTextEdit</class>
    <class kind="class">inviwo::NetworkEditor</class>
    <class kind="class">inviwo::NetworkEditorObserver</class>
    <class kind="class">inviwo::NetworkEditorView</class>
    <class kind="struct">inviwo::NetworkLock</class>
    <class kind="class">inviwo::NetworkSearch</class>
    <class kind="class">inviwo::NiftiModule</class>
    <class kind="class">inviwo::NiftiReader</class>
    <class kind="class">inviwo::NiftiVolumeRAMLoader</class>
    <class kind="struct">inviwo::NodeDebugger</class>
    <class kind="class">inviwo::NodeSwitch</class>
    <class kind="class">inviwo::NodeVersionConverter</class>
    <class kind="class">inviwo::NoiseProcessor</class>
    <class kind="class">inviwo::NoiseVolumeProcessor</class>
    <class kind="class">inviwo::NormalizedHistogram</class>
    <class kind="class">inviwo::NullPointerException</class>
    <class kind="class">inviwo::NumpyMandelbrot</class>
    <class kind="class">inviwo::NumPyMeshCreateTest</class>
    <class kind="class">inviwo::NumPyVolume</class>
    <class kind="class">inviwo::Observable</class>
    <class kind="class">inviwo::ObservableInterface</class>
    <class kind="class">inviwo::Observer</class>
    <class kind="class">inviwo::OpenCL</class>
    <class kind="class">inviwo::OpenCLCapabilities</class>
    <class kind="class">inviwo::OpenCLException</class>
    <class kind="class">inviwo::OpenCLFormatException</class>
    <class kind="class">inviwo::OpenCLModule</class>
    <class kind="class">inviwo::OpenCLSettings</class>
    <class kind="class">inviwo::OpenGLCapabilities</class>
    <class kind="class">inviwo::OpenGLException</class>
    <class kind="class">inviwo::OpenGLInitException</class>
    <class kind="class">inviwo::OpenGLModule</class>
    <class kind="class">inviwo::OpenGLQtCapabilities</class>
    <class kind="class">inviwo::OpenGLQtMenu</class>
    <class kind="class">inviwo::OpenGLQtModule</class>
    <class kind="class">inviwo::OpenGLSettings</class>
    <class kind="struct">inviwo::OptionPropertyHelper</class>
    <class kind="class">inviwo::OptionPropertyOption</class>
    <class kind="class">inviwo::OptionPropertyWidgetQt</class>
    <class kind="class">inviwo::OrdinalAnimationProperty</class>
    <class kind="class">inviwo::OrdinalBaseWidget</class>
    <class kind="class">inviwo::OrdinalEditorWidget</class>
    <class kind="class">inviwo::OrdinalEditorWidget&lt; int &gt;</class>
    <class kind="class">inviwo::OrdinalMinMaxPropertyWidgetQt</class>
    <class kind="class">inviwo::OrdinalMinMaxTextPropertyWidgetQt</class>
    <class kind="class">inviwo::OrdinalProperty</class>
    <class kind="class">inviwo::OrdinalPropertyAnimator</class>
    <class kind="class">inviwo::OrdinalPropertyConverter</class>
    <class kind="struct">inviwo::OrdinalPropertyHelper</class>
    <class kind="struct">inviwo::OrdinalPropertyIterator</class>
    <class kind="class">inviwo::OrdinalPropertyWidgetQt</class>
    <class kind="class">inviwo::OrientationIndicator</class>
    <class kind="class">inviwo::OrthographicCamera</class>
    <class kind="class">inviwo::Outport</class>
    <class kind="class">inviwo::OutportFactory</class>
    <class kind="class">inviwo::OutportFactoryObject</class>
    <class kind="class">inviwo::OutportFactoryObjectTemplate</class>
    <class kind="struct">inviwo::OutportIterable</class>
    <class kind="struct">inviwo::OutportIterableImpl</class>
    <class kind="struct">inviwo::OutportIterableImpl&lt; std::vector&lt; std::shared_ptr&lt; T &gt;, Alloc &gt; &gt;</class>
    <class kind="struct">inviwo::OutportIterableImpl&lt; std::vector&lt; std::unique_ptr&lt; T &gt;, Alloc &gt; &gt;</class>
    <class kind="struct">inviwo::OutportIterableImpl&lt; std::vector&lt; T *, Alloc &gt; &gt;</class>
    <class kind="struct">inviwo::OutportIterableImpl&lt; std::vector&lt; T, Alloc &gt; &gt;</class>
    <class kind="class">inviwo::OverlayProperty</class>
    <class kind="class">inviwo::PackedLightSource</class>
    <class kind="struct">inviwo::ParseWrapper</class>
    <class kind="class">inviwo::PartiallyMatchingIdCondition</class>
    <class kind="class">inviwo::PathLineProperties</class>
    <class kind="class">inviwo::PathLines</class>
    <class kind="class">inviwo::PathLineTracer</class>
    <class kind="class">inviwo::PerspectiveCamera</class>
    <class kind="class">inviwo::PickingAction</class>
    <class kind="class">inviwo::PickingController</class>
    <class kind="class">inviwo::PickingEvent</class>
    <class kind="class">inviwo::PickingManager</class>
    <class kind="class">inviwo::PickingMapper</class>
    <class kind="class">inviwo::PixelToBufferProcessor</class>
    <class kind="class">inviwo::PixelValue</class>
    <class kind="class">inviwo::Plane</class>
    <class kind="class">inviwo::PlaneProperty</class>
    <class kind="class">inviwo::PlottingGLModule</class>
    <class kind="class">inviwo::PlottingModule</class>
    <class kind="class">inviwo::PointLight</class>
    <class kind="class">inviwo::PointLightInteractionHandler</class>
    <class kind="class">inviwo::PointLightSourceProcessor</class>
    <class kind="class">inviwo::PointLightTrackball</class>
    <class kind="class">inviwo::PointRenderer</class>
    <class kind="class">inviwo::Polygon</class>
    <class kind="class">inviwo::Port</class>
    <class kind="class">inviwo::PortConnection</class>
    <class kind="class">inviwo::PortInspector</class>
    <class kind="class">inviwo::PortInspectorFactory</class>
    <class kind="class">inviwo::PortInspectorFactoryObject</class>
    <class kind="class">inviwo::PortInspectorManager</class>
    <class kind="class">inviwo::PortTraits</class>
    <class kind="struct">inviwo::PortTraits&lt; BaseImageInport&lt; 0 &gt; &gt;</class>
    <class kind="struct">inviwo::PortTraits&lt; BaseImageInport&lt; 1 &gt; &gt;</class>
    <class kind="struct">inviwo::PortTraits&lt; BrushingAndLinkingInport &gt;</class>
    <class kind="struct">inviwo::PortTraits&lt; BrushingAndLinkingOutport &gt;</class>
    <class kind="struct">inviwo::PortTraits&lt; DataInport&lt; T, N, Flat &gt; &gt;</class>
    <class kind="struct">inviwo::PortTraits&lt; DataOutport&lt; T &gt; &gt;</class>
    <class kind="struct">inviwo::PortTraits&lt; ImageOutport &gt;</class>
    <class kind="class">inviwo::PositionMetaData</class>
    <class kind="class">inviwo::PositionProperty</class>
    <class kind="class">inviwo::PostProcessingModule</class>
    <class kind="class">inviwo::PresentationProcessor</class>
    <class kind="class">inviwo::Processor</class>
    <class kind="struct">inviwo::processorDelete</class>
    <class kind="class">inviwo::ProcessorDockWidgetQt</class>
    <class kind="class">inviwo::ProcessorDragObject</class>
    <class kind="class">inviwo::ProcessorFactory</class>
    <class kind="class">inviwo::ProcessorFactoryObject</class>
    <class kind="class">inviwo::ProcessorFactoryObjectTemplate</class>
    <class kind="class">inviwo::ProcessorGraphicsItem</class>
    <class kind="class">inviwo::ProcessorInfo</class>
    <class kind="class">inviwo::ProcessorInportGraphicsItem</class>
    <class kind="class">inviwo::ProcessorKernelOwner</class>
    <class kind="class">inviwo::ProcessorLinkGraphicsItem</class>
    <class kind="class">inviwo::ProcessorMetaData</class>
    <class kind="class">inviwo::ProcessorMetaDataObserver</class>
    <class kind="class">inviwo::ProcessorNetwork</class>
    <class kind="class">inviwo::ProcessorNetworkConverter</class>
    <class kind="class">inviwo::ProcessorNetworkEvaluationObservable</class>
    <class kind="class">inviwo::ProcessorNetworkEvaluationObserver</class>
    <class kind="class">inviwo::ProcessorNetworkEvaluator</class>
    <class kind="class">inviwo::ProcessorNetworkObservable</class>
    <class kind="class">inviwo::ProcessorNetworkObserver</class>
    <class kind="class">inviwo::ProcessorObservable</class>
    <class kind="class">inviwo::ProcessorObserver</class>
    <class kind="class">inviwo::ProcessorOutportGraphicsItem</class>
    <class kind="class">inviwo::ProcessorPair</class>
    <class kind="class">inviwo::ProcessorPortConnectionIndicator</class>
    <class kind="class">inviwo::ProcessorPortGraphicsItem</class>
    <class kind="class">inviwo::ProcessorProgressGraphicsItem</class>
    <class kind="class">inviwo::ProcessorStatusGraphicsItem</class>
    <class kind="class">inviwo::ProcessorTraits</class>
    <class kind="struct">inviwo::ProcessorTraits&lt; BasisTransform&lt; Mesh &gt; &gt;</class>
    <class kind="struct">inviwo::ProcessorTraits&lt; BasisTransform&lt; Volume &gt; &gt;</class>
    <class kind="struct">inviwo::ProcessorTraits&lt; CompositeSink&lt; InportType, OutportType &gt; &gt;</class>
    <class kind="struct">inviwo::ProcessorTraits&lt; CompositeSource&lt; InportType, OutportType &gt; &gt;</class>
    <class kind="struct">inviwo::ProcessorTraits&lt; InputSelector&lt; Inport, Outport &gt; &gt;</class>
    <class kind="struct">inviwo::ProcessorTraits&lt; WorldTransform&lt; Mesh &gt; &gt;</class>
    <class kind="struct">inviwo::ProcessorTraits&lt; WorldTransform&lt; Volume &gt; &gt;</class>
    <class kind="class">inviwo::ProcessorTree</class>
    <class kind="class">inviwo::ProcessorTreeItem</class>
    <class kind="class">inviwo::ProcessorTreeWidget</class>
    <class kind="class">inviwo::ProcessorWidget</class>
    <class kind="class">inviwo::ProcessorWidgetFactory</class>
    <class kind="class">inviwo::ProcessorWidgetFactoryObject</class>
    <class kind="class">inviwo::ProcessorWidgetFactoryObjectTemplate</class>
    <class kind="class">inviwo::ProcessorWidgetMetaData</class>
    <class kind="class">inviwo::ProcessorWidgetMetaDataObserver</class>
    <class kind="class">inviwo::ProcessorWidgetObservable</class>
    <class kind="class">inviwo::ProcessorWidgetObserver</class>
    <class kind="class">inviwo::ProcessorWidgetQt</class>
    <class kind="class">inviwo::ProgressBar</class>
    <class kind="class">inviwo::ProgressBarObservable</class>
    <class kind="class">inviwo::ProgressBarObserver</class>
    <class kind="class">inviwo::ProgressBarOwner</class>
    <class kind="class">inviwo::Property</class>
    <class kind="class">inviwo::PropertyConverter</class>
    <class kind="class">inviwo::PropertyConverterManager</class>
    <class kind="class">inviwo::PropertyEditorWidget</class>
    <class kind="class">inviwo::PropertyEditorWidgetQt</class>
    <class kind="class">inviwo::PropertyFactory</class>
    <class kind="class">inviwo::PropertyFactoryObject</class>
    <class kind="class">inviwo::PropertyFactoryObjectTemplate</class>
    <class kind="class">inviwo::PropertyLink</class>
    <class kind="class">inviwo::PropertyListEvent</class>
    <class kind="class">inviwo::PropertyListFrame</class>
    <class kind="class">inviwo::PropertyListWidget</class>
    <class kind="class">inviwo::PropertyObservable</class>
    <class kind="class">inviwo::PropertyObserver</class>
    <class kind="class">inviwo::PropertyOwner</class>
    <class kind="class">inviwo::PropertyOwnerObservable</class>
    <class kind="class">inviwo::PropertyOwnerObserver</class>
    <class kind="class">inviwo::PropertyPresetManager</class>
    <class kind="class">inviwo::PropertySelectionTree</class>
    <class kind="class">inviwo::PropertySelectionTreeDialog</class>
    <class kind="class">inviwo::PropertySelectionTreeWidget</class>
    <class kind="class">inviwo::PropertySemantics</class>
    <class kind="class">inviwo::PropertyTransformer</class>
    <class kind="class">inviwo::PropertyWidget</class>
    <class kind="class">inviwo::PropertyWidgetFactory</class>
    <class kind="class">inviwo::PropertyWidgetFactoryObject</class>
    <class kind="class">inviwo::PropertyWidgetFactoryObjectTemplate</class>
    <class kind="class">inviwo::PropertyWidgetQt</class>
    <class kind="class">inviwo::PVMModule</class>
    <class kind="class">inviwo::PVMVolumeReader</class>
    <class kind="class">inviwo::PVMVolumeWriter</class>
    <class kind="class">inviwo::Python3Module</class>
    <class kind="class">inviwo::Python3QtModule</class>
    <class kind="class">inviwo::PythonEditorWidget</class>
    <class kind="class">inviwo::PythonExecutionOutputObeserver</class>
    <class kind="class">inviwo::PythonExecutionOutputObservable</class>
    <class kind="class">inviwo::PythonInterpreter</class>
    <class kind="class">inviwo::PythonLogger</class>
    <class kind="class">inviwo::PythonMenu</class>
    <class kind="class">inviwo::PythonScript</class>
    <class kind="class">inviwo::PythonScriptDisk</class>
    <class kind="class">inviwo::PythonTextEditor</class>
    <class kind="class">inviwo::QStringHelper</class>
    <class kind="class">inviwo::QStringHelper&lt; long int &gt;</class>
    <class kind="class">inviwo::QStringHelper&lt; unsigned long int &gt;</class>
    <class kind="class">inviwo::QtWidgetsModule</class>
    <class kind="class">inviwo::QtWidgetsSettings</class>
    <class kind="class">inviwo::RandomMeshGenerator</class>
    <class kind="class">inviwo::RandomSphereGenerator</class>
    <class kind="class">inviwo::RangeException</class>
    <class kind="class">inviwo::RangeSliderQt</class>
    <class kind="class">inviwo::RawDataReaderDialogQt</class>
    <class kind="class">inviwo::RawVolumeRAMLoader</class>
    <class kind="class">inviwo::RawVolumeReader</class>
    <class kind="class">inviwo::RBFVectorFieldGenerator2D</class>
    <class kind="class">inviwo::RBFVectorFieldGenerator3D</class>
    <class kind="class">inviwo::RedGreenProcessor</class>
    <class kind="class">inviwo::RenderBufferObject</class>
    <class kind="class">inviwo::RenderContext</class>
    <class kind="class">inviwo::representation_traits</class>
    <class kind="struct">inviwo::representation_traits&lt; Volume, kind::Base &gt;</class>
    <class kind="struct">inviwo::representation_traits&lt; Volume, kind::Disk &gt;</class>
    <class kind="struct">inviwo::representation_traits&lt; Volume, kind::GL &gt;</class>
    <class kind="struct">inviwo::representation_traits&lt; Volume, kind::RAM &gt;</class>
    <class kind="class">inviwo::RepresentationConverter</class>
    <class kind="class">inviwo::RepresentationConverterFactory</class>
    <class kind="class">inviwo::RepresentationConverterMetaFactory</class>
    <class kind="class">inviwo::RepresentationConverterPackage</class>
    <class kind="class">inviwo::RepresentationConverterType</class>
    <class kind="class">inviwo::ResizeEvent</class>
    <class kind="class">inviwo::Resource</class>
    <class kind="class">inviwo::ResourceException</class>
    <class kind="class">inviwo::ResourceManager</class>
    <class kind="class">inviwo::ResourceManagerDockWidget</class>
    <class kind="class">inviwo::ResourceManagerObservable</class>
    <class kind="class">inviwo::ResourceManagerObserver</class>
    <class kind="class">inviwo::RunningImageMeanAndStandardDeviationCL</class>
    <class kind="struct">inviwo::RuntimeModuleLoading</class>
    <class kind="class">inviwo::ScalarToStringConverter</class>
    <class kind="class">inviwo::ScopedClockCL</class>
    <class kind="class">inviwo::ScopedClockCPU</class>
    <class kind="class">inviwo::ScopedClockGL</class>
    <class kind="class">inviwo::Seed3Dto4D</class>
    <class kind="class">inviwo::SeedPointGenerator</class>
    <class kind="class">inviwo::SeedPointsFromMask</class>
    <class kind="class">inviwo::SeedsFromMaskSequence</class>
    <class kind="class">inviwo::SelectionEvent</class>
    <class kind="class">inviwo::SequenceTimerProperty</class>
    <class kind="class">inviwo::Serializable</class>
    <class kind="class">inviwo::SerializationException</class>
    <class kind="class">inviwo::SerializeBase</class>
    <class kind="class">inviwo::SerializeConstants</class>
    <class kind="class">inviwo::Serializer</class>
    <class kind="class">inviwo::Settings</class>
    <class kind="class">inviwo::SettingsWidget</class>
    <class kind="class">inviwo::Shader</class>
    <class kind="class">inviwo::ShaderManager</class>
    <class kind="class">inviwo::ShaderObject</class>
    <class kind="class">inviwo::ShaderResource</class>
    <class kind="class">inviwo::ShaderType</class>
    <class kind="class">inviwo::ShaderWidget</class>
    <class kind="class">inviwo::SharedLibrary</class>
    <class kind="class">inviwo::SharedOpenGLResources</class>
    <class kind="class">inviwo::SimpleCondition</class>
    <class kind="class">inviwo::SimpleGraphicsScene</class>
    <class kind="class">inviwo::SimpleGraphicsView</class>
    <class kind="class">inviwo::SimpleLightingProperty</class>
    <class kind="class">inviwo::SimpleMesh</class>
    <class kind="class">inviwo::SimpleMeshCreator</class>
    <class kind="class">inviwo::SimpleRaycastingProperty</class>
    <class kind="class">inviwo::SimpleWithRectangleLabel</class>
    <class kind="class">inviwo::SingleFileObserver</class>
    <class kind="class">inviwo::SinglePropertySetting</class>
    <class kind="class">inviwo::Singleton</class>
    <class kind="class">inviwo::SingletonException</class>
    <class kind="class">inviwo::SingleVoxel</class>
    <class kind="class">inviwo::SkewedPerspectiveCamera</class>
    <class kind="class">inviwo::SliderWidgetQt</class>
    <class kind="class">inviwo::SliderWidgetQt&lt; T, false &gt;</class>
    <class kind="class">inviwo::SliderWidgetQt&lt; T, true &gt;</class>
    <class kind="class">inviwo::Spatial4DSampler</class>
    <class kind="class">inviwo::Spatial4DSamplerBase</class>
    <class kind="class">inviwo::SpatialCameraCoordinateTransformer</class>
    <class kind="class">inviwo::SpatialCameraCoordinateTransformerImpl</class>
    <class kind="class">inviwo::SpatialCoordinateTransformer</class>
    <class kind="class">inviwo::SpatialCoordinateTransformerImpl</class>
    <class kind="class">inviwo::SpatialEntity</class>
    <class kind="class">inviwo::SpatialSampler</class>
    <class kind="class">inviwo::SphereRenderer</class>
    <class kind="class">inviwo::SphericalPropertyTransformer</class>
    <class kind="class">inviwo::SpotLight</class>
    <class kind="class">inviwo::SpotLightSourceProcessor</class>
    <class kind="class">inviwo::SSAO</class>
    <class kind="struct">inviwo::StandardEvaluationErrorHandler</class>
    <class kind="struct">inviwo::StandardExceptionHandler</class>
    <class kind="class">inviwo::StandardFactory</class>
    <class kind="struct">inviwo::StandardIdentifier</class>
    <class kind="class">inviwo::StateCoordinator</class>
    <class kind="class">inviwo::StdUnorderedMapMetaData</class>
    <class kind="class">inviwo::StdVectorMetaData</class>
    <class kind="class">inviwo::StereoCameraSyncer</class>
    <class kind="class">inviwo::StipplingProperty</class>
    <class kind="class">inviwo::StlWriter</class>
    <class kind="class">inviwo::StreamLineProperties</class>
    <class kind="class">inviwo::StreamLines</class>
    <class kind="class">inviwo::StreamLineTracer</class>
    <class kind="class">inviwo::StreamRibbons</class>
    <class kind="class">inviwo::StringMultilinePropertyWidgetQt</class>
    <class kind="class">inviwo::StringProperty</class>
    <class kind="class">inviwo::StringPropertyWidgetQt</class>
    <class kind="class">inviwo::StringShaderResource</class>
    <class kind="class">inviwo::StructuredCameraCoordinateTransformer</class>
    <class kind="class">inviwo::StructuredCameraCoordinateTransformerImpl</class>
    <class kind="class">inviwo::StructuredCoordinateTransformer</class>
    <class kind="class">inviwo::StructuredCoordinateTransformerImpl</class>
    <class kind="class">inviwo::StructuredGridEntity</class>
    <class kind="class">inviwo::SurfaceExtraction</class>
    <class kind="class">inviwo::SyncCLGL</class>
    <class kind="class">inviwo::SyntaxFormater</class>
    <class kind="class">inviwo::SyntaxHighligther</class>
    <class kind="class">inviwo::SystemCapabilities</class>
    <class kind="class">inviwo::SystemSettings</class>
    <class kind="class">inviwo::Tag</class>
    <class kind="class">inviwo::Tags</class>
    <class kind="class">inviwo::TemplateImageSampler</class>
    <class kind="class">inviwo::TemplateMinMaxPropertySettingsWidgetQt</class>
    <class kind="class">inviwo::TemplateOptionProperty</class>
    <class kind="class">inviwo::TemplateOrdinalEditorWidget</class>
    <class kind="class">inviwo::TemplateProperty</class>
    <class kind="class">inviwo::TemplatePropertyConverter</class>
    <class kind="class">inviwo::TemplatePropertySettingsWidgetQt</class>
    <class kind="class">inviwo::TemplateSliderWidget</class>
    <class kind="class">inviwo::TemplateVolumeSampler</class>
    <class kind="struct">inviwo::TexAtlasEntry</class>
    <class kind="struct">inviwo::TexAtlasRenderInfo</class>
    <class kind="class">inviwo::TextEditorDockWidget</class>
    <class kind="class">inviwo::TextFileReader</class>
    <class kind="class">inviwo::TextOverlayGL</class>
    <class kind="class">inviwo::TextRenderer</class>
    <class kind="class">inviwo::TextSelectionDelegate</class>
    <class kind="class">inviwo::Texture</class>
    <class kind="class">inviwo::Texture2D</class>
    <class kind="class">inviwo::Texture2DArray</class>
    <class kind="class">inviwo::Texture3D</class>
    <class kind="class">inviwo::TextureObserver</class>
    <class kind="class">inviwo::TextureQuadRenderer</class>
    <class kind="class">inviwo::TextureUnit</class>
    <class kind="class">inviwo::TextureUnitContainer</class>
    <class kind="class">inviwo::TFPushButton</class>
    <class kind="class">inviwo::ThreadPool</class>
    <class kind="class">inviwo::Timer</class>
    <class kind="class">inviwo::TimerThread</class>
    <class kind="class">inviwo::TinyDirInterface</class>
    <class kind="class">inviwo::TMIP</class>
    <class kind="class">inviwo::Tonemapping</class>
    <class kind="class">inviwo::TouchDevice</class>
    <class kind="class">inviwo::TouchEvent</class>
    <class kind="class">inviwo::TouchPoint</class>
    <class kind="class">inviwo::Trackball</class>
    <class kind="class">inviwo::TrackballAction</class>
    <class kind="class">inviwo::TrackballObject</class>
    <class kind="class">inviwo::TransferFunction</class>
    <class kind="class">inviwo::TransferFunctionControlPointConnection</class>
    <class kind="class">inviwo::TransferFunctionDataPoint</class>
    <class kind="class">inviwo::TransferFunctionEditor</class>
    <class kind="class">inviwo::TransferFunctionEditorControlPoint</class>
    <class kind="class">inviwo::TransferFunctionEditorView</class>
    <class kind="class">inviwo::TransferFunctionObservable</class>
    <class kind="class">inviwo::TransferFunctionObserver</class>
    <class kind="class">inviwo::TransferFunctionPointObserver</class>
    <class kind="class">inviwo::TransferFunctionProperty</class>
    <class kind="class">inviwo::TransferFunctionPropertyDialog</class>
    <class kind="class">inviwo::TransferFunctionPropertyObservable</class>
    <class kind="class">inviwo::TransferFunctionPropertyObserver</class>
    <class kind="class">inviwo::TransferFunctionPropertyWidgetQt</class>
    <class kind="class">inviwo::Transformer</class>
    <class kind="class">inviwo::Transformer&lt; T, typename std::enable_if&lt; util::is_floating_point&lt; T &gt;::value &gt;::type &gt;</class>
    <class kind="class">inviwo::TraversingVersionConverter</class>
    <class kind="class">inviwo::TubeRendering</class>
    <class kind="class">inviwo::TypedResource</class>
    <class kind="class">inviwo::UndoManager</class>
    <class kind="class">inviwo::UserInterfaceGLModule</class>
    <class kind="struct">inviwo::ValueWrapper</class>
    <class kind="class">inviwo::Vector2DCurl</class>
    <class kind="class">inviwo::Vector2DDivergence</class>
    <class kind="class">inviwo::Vector2DMagnitude</class>
    <class kind="class">inviwo::Vector3DCurl</class>
    <class kind="class">inviwo::Vector3DDivergence</class>
    <class kind="class">inviwo::VectorElementSelectorProcessor</class>
    <class kind="class">inviwo::VectorFieldGenerator2D</class>
    <class kind="class">inviwo::VectorFieldGenerator3D</class>
    <class kind="class">inviwo::VectorFieldGenerator4D</class>
    <class kind="class">inviwo::VectorFieldVisualizationGLModule</class>
    <class kind="class">inviwo::VectorFieldVisualizationModule</class>
    <class kind="class">inviwo::VectorMagnitudeProcessor</class>
    <class kind="class">inviwo::VectorMetaData</class>
    <class kind="class">inviwo::VectorToStringConverter</class>
    <class kind="class">inviwo::Version</class>
    <class kind="class">inviwo::VersionConverter</class>
    <class kind="class">inviwo::ViewManager</class>
    <class kind="class">inviwo::Volume</class>
    <class kind="class">inviwo::VolumeBinary</class>
    <class kind="class">inviwo::VolumeBorders</class>
    <class kind="class">inviwo::VolumeBoundingBox</class>
    <class kind="class">inviwo::VolumeCL</class>
    <class kind="class">inviwo::VolumeCL2RAMConverter</class>
    <class kind="class">inviwo::VolumeCLBase</class>
    <class kind="class">inviwo::VolumeCLGL</class>
    <class kind="class">inviwo::VolumeCLGL2CLConverter</class>
    <class kind="class">inviwo::VolumeCLGL2GLConverter</class>
    <class kind="class">inviwo::VolumeCLGL2RAMConverter</class>
    <class kind="class">inviwo::VolumeCombiner</class>
    <class kind="class">inviwo::VolumeCreator</class>
    <class kind="class">inviwo::VolumeCurlCPUProcessor</class>
    <class kind="class">inviwo::VolumeDiff</class>
    <class kind="class">inviwo::VolumeDisk</class>
    <class kind="class">inviwo::VolumeDisk2RAMConverter</class>
    <class kind="class">inviwo::VolumeDivergenceCPUProcessor</class>
    <class kind="class">inviwo::VolumeDoubleSampler</class>
    <class kind="class">inviwo::VolumeExport</class>
    <class kind="class">inviwo::VolumeFirstHitCLProcessor</class>
    <class kind="class">inviwo::VolumeGL</class>
    <class kind="class">inviwo::VolumeGL2CLGLConverter</class>
    <class kind="class">inviwo::VolumeGL2RAMConverter</class>
    <class kind="class">inviwo::VolumeGLProcessor</class>
    <class kind="class">inviwo::VolumeGradientCPUProcessor</class>
    <class kind="class">inviwo::VolumeGradientMagnitude</class>
    <class kind="class">inviwo::VolumeGradientProcessor</class>
    <class kind="class">inviwo::VolumeIndicatorProperty</class>
    <class kind="class">inviwo::VolumeInformationProperty</class>
    <class kind="class">inviwo::VolumeLaplacianProcessor</class>
    <class kind="class">inviwo::VolumeLowPass</class>
    <class kind="class">inviwo::VolumeMapping</class>
    <class kind="class">inviwo::VolumeMaxCLProcessor</class>
    <class kind="class">inviwo::VolumeMerger</class>
    <class kind="class">inviwo::VolumeRAM</class>
    <class kind="class">inviwo::VolumeRAM2CLConverter</class>
    <class kind="class">inviwo::VolumeRAM2GLConverter</class>
    <class kind="class">inviwo::VolumeRAMPrecision</class>
    <class kind="class">inviwo::VolumeRAMSubSet</class>
    <class kind="class">inviwo::VolumeRaycaster</class>
    <class kind="class">inviwo::VolumeRaycasterCL</class>
    <class kind="class">inviwo::VolumeRaycasterCLProcessor</class>
    <class kind="class">inviwo::VolumeRepresentation</class>
    <class kind="class">inviwo::VolumeSequenceElementSelectorProcessor</class>
    <class kind="class">inviwo::VolumeSequenceSampler</class>
    <class kind="class">inviwo::VolumeSequenceSingleTimestepSampler</class>
    <class kind="class">inviwo::VolumeSequenceSingleTimestepSamplerProcessor</class>
    <class kind="class">inviwo::VolumeSequenceSource</class>
    <class kind="class">inviwo::VolumeSequenceToSpatial4DSampler</class>
    <class kind="class">inviwo::VolumeShader</class>
    <class kind="class">inviwo::VolumeSlice</class>
    <class kind="class">inviwo::VolumeSliceGL</class>
    <class kind="class">inviwo::VolumeSource</class>
    <class kind="class">inviwo::VolumeSubsample</class>
    <class kind="class">inviwo::VolumeSubset</class>
    <class kind="class">inviwo::VolumeToSpatialSampler</class>
    <class kind="class">inviwo::WaveFrontWriter</class>
    <class kind="class">inviwo::WheelEvent</class>
    <class kind="class">inviwo::WheelEventMatcher</class>
    <class kind="class">inviwo::WildCardArg</class>
    <class kind="class">inviwo::WorkspaceManager</class>
    <class kind="class">inviwo::WorldTransform</class>
    <member kind="enumeration">
      <type></type>
      <name>InvalidationLevel</name>
      <anchorfile>namespaceinviwo.html</anchorfile>
      <anchor>ae0b7ff1e08626f6ee58e561ef4c9ffba</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceinviwo.html" anchor="ae0b7ff1e08626f6ee58e561ef4c9ffbaa3ac705f2acd51a4613f9188c05c91d0d">Valid</enumvalue>
      <enumvalue file="namespaceinviwo.html" anchor="ae0b7ff1e08626f6ee58e561ef4c9ffbaa65509c169dc385a6a9776c83f150f4cc">InvalidOutput</enumvalue>
      <enumvalue file="namespaceinviwo.html" anchor="ae0b7ff1e08626f6ee58e561ef4c9ffbaadc391f3a51c67f8140a303c8ee01f5bd">InvalidResources</enumvalue>
    </member>
    <member kind="function">
      <type>IVW_CORE_API void</type>
      <name>topologicalModuleFactoryObjectSort</name>
      <anchorfile>namespaceinviwo.html</anchorfile>
      <anchor>a292d5afbf442dbfc9e591a15a05d4893</anchor>
      <arglist>(std::vector&lt; std::unique_ptr&lt; InviwoModuleFactoryObject &gt;&gt;::iterator start, std::vector&lt; std::unique_ptr&lt; InviwoModuleFactoryObject &gt;&gt;::iterator end)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::shared_ptr&lt; BufferRAM &gt;</type>
      <name>createBufferRAM</name>
      <anchorfile>namespaceinviwo.html</anchorfile>
      <anchor>a3f84d9d2b3fd8c04d6c91853ccf4744d</anchor>
      <arglist>(size_t size, const DataFormatBase *format, BufferUsage usage, BufferTarget target=BufferTarget::Data)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::shared_ptr&lt; LayerRAM &gt;</type>
      <name>createLayerRAM</name>
      <anchorfile>namespaceinviwo.html</anchorfile>
      <anchor>adde4c72138fa37115bab74bfb36f2760</anchor>
      <arglist>(const size2_t &amp;dimensions, LayerType type, const DataFormatBase *format, const SwizzleMask &amp;swizzleMask=swizzlemasks::rgba)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API mat4</type>
      <name>getLightTransformationMatrix</name>
      <anchorfile>namespaceinviwo.html</anchorfile>
      <anchor>adce6eb16d0e83e4708cca77ac9f53d9c</anchor>
      <arglist>(vec3 pos, vec3 dir)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::shared_ptr&lt; VolumeRAM &gt;</type>
      <name>createVolumeRAM</name>
      <anchorfile>namespaceinviwo.html</anchorfile>
      <anchor>a7e11caff7590c1768718432a4f86bd1f</anchor>
      <arglist>(const size3_t &amp;dimensions, const DataFormatBase *format, void *dataPtr=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; bool, T &gt;</type>
      <name>rayPlaneIntersection</name>
      <anchorfile>namespaceinviwo.html</anchorfile>
      <anchor>a3141c6f6ede44bc236fecaffb4372a23</anchor>
      <arglist>(const glm::tvec3&lt; T, P &gt; &amp;planePos, const glm::tvec3&lt; T, P &gt; &amp;planeNormal, const glm::tvec3&lt; T, P &gt; &amp;origin, const glm::tvec3&lt; T, P &gt; &amp;direction, const T t0, const T t1)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; bool, float &gt;</type>
      <name>raySphereIntersection</name>
      <anchorfile>namespaceinviwo.html</anchorfile>
      <anchor>aec86ee3a757aab5dc071ebb712f38acb</anchor>
      <arglist>(const glm::tvec3&lt; T, P &gt; &amp;sphereCenter, const T radius, const glm::tvec3&lt; T, P &gt; &amp;origin, const glm::tvec3&lt; T, P &gt; &amp;direction, const T t0, const T t1)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::vector&lt; std::string &gt;</type>
      <name>splitString</name>
      <anchorfile>namespaceinviwo.html</anchorfile>
      <anchor>a74fba6eb1476051dcc724f0bd5512a12</anchor>
      <arglist>(const std::string &amp;str, char delimeter= &apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API bool</type>
      <name>iCaseCmp</name>
      <anchorfile>namespaceinviwo.html</anchorfile>
      <anchor>ab8b61dd953b0b390b7e6fd1ba865255f</anchor>
      <arglist>(const std::string &amp;l, const std::string &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API bool</type>
      <name>iCaseLess</name>
      <anchorfile>namespaceinviwo.html</anchorfile>
      <anchor>ad9b9fe20a59af8d5dae77ee640811a2f</anchor>
      <arglist>(const std::string &amp;l, const std::string &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::string</type>
      <name>msToString</name>
      <anchorfile>namespaceinviwo.html</anchorfile>
      <anchor>a138c5c8deaa5ecf1db3cf0257ba89554</anchor>
      <arglist>(double ms, bool includeZeros=true, bool spacing=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>durationToString</name>
      <anchorfile>namespaceinviwo.html</anchorfile>
      <anchor>a7f4cb99e275fa3b26314080624a3fe0f</anchor>
      <arglist>(std::chrono::duration&lt; Rep, Period &gt; duration, bool includeZeros=true, bool spacing=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recursiveTopologicalModuleFactoryObjectSort</name>
      <anchorfile>namespaceinviwo.html</anchorfile>
      <anchor>a06650e2d6c281b25458bf887050ce0dd</anchor>
      <arglist>(std::vector&lt; std::unique_ptr&lt; InviwoModuleFactoryObject &gt;&gt;::iterator start, std::vector&lt; std::unique_ptr&lt; InviwoModuleFactoryObject &gt;&gt;::iterator end, const std::string &amp;lname, std::unordered_set&lt; std::string &gt; &amp;visited, std::unordered_set&lt; std::string &gt; &amp;tmpVisited, std::vector&lt; std::string &gt; &amp;sorted)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceinviwo.html</anchorfile>
      <anchor>aeb4dc92ca596e30329c7ffab57ed367c</anchor>
      <arglist>(const Version &amp;lhs, const Version &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceinviwo.html</anchorfile>
      <anchor>a885acd5f1ed9cfb23a76a38d39f53e6e</anchor>
      <arglist>(const Version &amp;lhs, const Version &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getGLErrorString</name>
      <anchorfile>namespaceinviwo.html</anchorfile>
      <anchor>a9c96a6b82bd29a80377dbb831cb9f1e5</anchor>
      <arglist>(GLenum err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LogGLError</name>
      <anchorfile>namespaceinviwo.html</anchorfile>
      <anchor>a9d8be1efd52c9025342d51456ef5169e</anchor>
      <arglist>(const char *fileName, const char *functionName, int lineNumber)</arglist>
    </member>
    <member kind="function">
      <type>cl::ImageFormat</type>
      <name>dataFormatToCLImageFormat</name>
      <anchorfile>namespaceinviwo.html</anchorfile>
      <anchor>a7029d3e4b598bae28078d47b579046ca</anchor>
      <arglist>(inviwo::DataFormatId format)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LogOpenCLError</name>
      <anchorfile>namespaceinviwo.html</anchorfile>
      <anchor>ac6c2d580c177a69e5c7696b883001019</anchor>
      <arglist>(cl_int err, const char *message)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>errorCodeToString</name>
      <anchorfile>namespaceinviwo.html</anchorfile>
      <anchor>ad9a88755d6f46280cf5bd467fc11832f</anchor>
      <arglist>(cl_int err)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getCLErrorResolveHint</name>
      <anchorfile>namespaceinviwo.html</anchorfile>
      <anchor>aa38d432221fa54b61e38a2e81024aaa0</anchor>
      <arglist>(cl_int err)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getCLErrorString</name>
      <anchorfile>namespaceinviwo.html</anchorfile>
      <anchor>aed344b10dacca5c4d59d601558dbb87f</anchor>
      <arglist>(const cl::Error &amp;err)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getGlobalWorkGroupSize</name>
      <anchorfile>namespaceinviwo.html</anchorfile>
      <anchor>a50e2ff895653cf3c3d096f912dc7bf41</anchor>
      <arglist>(size_t nItems, size_t localWorkGroupSize)</arglist>
    </member>
    <member kind="function">
      <type>PackedLightSource</type>
      <name>baseLightToPackedLight</name>
      <anchorfile>namespaceinviwo.html</anchorfile>
      <anchor>a829a966309b1540d75307de569f663a5</anchor>
      <arglist>(const LightSource *lightsource, float radianceScale, const mat4 &amp;transformLightMat)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>deviceInfoToString</name>
      <anchorfile>namespaceinviwo.html</anchorfile>
      <anchor>a90d1082182a83ebfe99b87981e8b3cc5</anchor>
      <arglist>(cl_device_info info, const T &amp;value, bool is_cl_bool)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>inviwo::cimgutil</name>
    <filename>namespaceinviwo_1_1cimgutil.html</filename>
    <member kind="function">
      <type>void *</type>
      <name>loadLayerData</name>
      <anchorfile>namespaceinviwo_1_1cimgutil.html</anchorfile>
      <anchor>a5ea81716ed684009cfc24c2ac0622d4e</anchor>
      <arglist>(void *dst, const std::string &amp;filePath, uvec2 &amp;dimensions, DataFormatId &amp;formatId, bool rescaleToDim)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>loadVolumeData</name>
      <anchorfile>namespaceinviwo_1_1cimgutil.html</anchorfile>
      <anchor>ae9f800a6f11275c29c69c9a0e06c0a56</anchor>
      <arglist>(void *dst, const std::string &amp;filePath, size3_t &amp;dimensions, DataFormatId &amp;formatId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveLayer</name>
      <anchorfile>namespaceinviwo_1_1cimgutil.html</anchorfile>
      <anchor>a9cb553b3e038618ea44b89cbe72d6362</anchor>
      <arglist>(const std::string &amp;filePath, const Layer *inputLayer)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; std::vector&lt; unsigned char &gt; &gt;</type>
      <name>saveLayerToBuffer</name>
      <anchorfile>namespaceinviwo_1_1cimgutil.html</anchorfile>
      <anchor>a551313625af057ede1dec5ea64e35f27</anchor>
      <arglist>(const std::string &amp;extension, const Layer *inputLayer)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>rescaleLayer</name>
      <anchorfile>namespaceinviwo_1_1cimgutil.html</anchorfile>
      <anchor>a6f3ae6409e87566dddd776f05eba9b96</anchor>
      <arglist>(const Layer *inputLayer, uvec2 dst_dim)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>rescaleLayerRAM</name>
      <anchorfile>namespaceinviwo_1_1cimgutil.html</anchorfile>
      <anchor>a16062ddaeed618d4797f51cdd9e97371</anchor>
      <arglist>(const LayerRAM *layerRam, uvec2 dst_dim)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>inviwo::color</name>
    <filename>namespaceinviwo_1_1color.html</filename>
    <member kind="function">
      <type>IVW_CORE_API vec3</type>
      <name>getD65WhitePoint</name>
      <anchorfile>namespaceinviwo_1_1color.html</anchorfile>
      <anchor>aa1f60c1c17488d3020027a524b0eeefd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API vec3</type>
      <name>hsv2rgb</name>
      <anchorfile>namespaceinviwo_1_1color.html</anchorfile>
      <anchor>a267f8e07ac6e3fc0830752454cab3a07</anchor>
      <arglist>(vec3 hsv)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API vec3</type>
      <name>rgb2hsv</name>
      <anchorfile>namespaceinviwo_1_1color.html</anchorfile>
      <anchor>a4efb7b5406ab5ef1efba5e12099b5c03</anchor>
      <arglist>(vec3 rgb)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API vec3</type>
      <name>XYZ2lab</name>
      <anchorfile>namespaceinviwo_1_1color.html</anchorfile>
      <anchor>ab84284e9992bb68f41705d2c36ea5823</anchor>
      <arglist>(vec3 xyz, vec3 whitePoint=getD65WhitePoint())</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API vec3</type>
      <name>lab2XYZ</name>
      <anchorfile>namespaceinviwo_1_1color.html</anchorfile>
      <anchor>ab0e4f5a690f5568c47604fb627751453</anchor>
      <arglist>(vec3 lab, const vec3 whitePoint=getD65WhitePoint())</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API vec3</type>
      <name>rgb2XYZ</name>
      <anchorfile>namespaceinviwo_1_1color.html</anchorfile>
      <anchor>a5840f5de8128a024d41884d90682d5c7</anchor>
      <arglist>(const vec3 rgb)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API vec3</type>
      <name>XYZ2rgb</name>
      <anchorfile>namespaceinviwo_1_1color.html</anchorfile>
      <anchor>a17a63ca3449f5e9c899ae86226739810</anchor>
      <arglist>(vec3 xyz)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API vec3</type>
      <name>XYZ2xyY</name>
      <anchorfile>namespaceinviwo_1_1color.html</anchorfile>
      <anchor>ac56667f48bbcf2bb33e21ac5fc0d0ba6</anchor>
      <arglist>(vec3 xyz)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API vec3</type>
      <name>xyY2XYZ</name>
      <anchorfile>namespaceinviwo_1_1color.html</anchorfile>
      <anchor>add55dfbe15605e5fbe81944f12e9ec4e</anchor>
      <arglist>(vec3 xyY)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API vec3</type>
      <name>rgb2lab</name>
      <anchorfile>namespaceinviwo_1_1color.html</anchorfile>
      <anchor>af7c7d84c4160c050fccab52542549fcb</anchor>
      <arglist>(vec3 rgb)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API vec3</type>
      <name>lab2rgb</name>
      <anchorfile>namespaceinviwo_1_1color.html</anchorfile>
      <anchor>a87f194129b6dd1e11ccdd364bba5da5a</anchor>
      <arglist>(vec3 lab)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API vec3</type>
      <name>rgb2ycbcr</name>
      <anchorfile>namespaceinviwo_1_1color.html</anchorfile>
      <anchor>afd42119f3a73ad6285201d9d827e4391</anchor>
      <arglist>(const vec3 &amp;rgb)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API vec3</type>
      <name>ycbcr2rgb</name>
      <anchorfile>namespaceinviwo_1_1color.html</anchorfile>
      <anchor>a537f5869837bf60b8ca19f9a30812cab</anchor>
      <arglist>(const vec3 &amp;ycbcr)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API vec3</type>
      <name>LuvChromaticity2rgb</name>
      <anchorfile>namespaceinviwo_1_1color.html</anchorfile>
      <anchor>aa73ed27f29bc931a34bcce15f7505bc0</anchor>
      <arglist>(const vec3 &amp;LuvChroma, bool clamp=false, vec3 whitePointXYZ=getD65WhitePoint())</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API vec3</type>
      <name>rgb2LuvChromaticity</name>
      <anchorfile>namespaceinviwo_1_1color.html</anchorfile>
      <anchor>ae847f3c03ad08b5758c83dc20fcf1f4e</anchor>
      <arglist>(const vec3 &amp;rgb, vec3 whitePointXYZ=getD65WhitePoint())</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API vec3</type>
      <name>LuvChromaticity2XYZ</name>
      <anchorfile>namespaceinviwo_1_1color.html</anchorfile>
      <anchor>adabd6ea90f83baba658737c481e20fc1</anchor>
      <arglist>(const vec3 &amp;LuvChroma, vec3 whitePointXYZ=getD65WhitePoint())</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API vec3</type>
      <name>XYZ2LuvChromaticity</name>
      <anchorfile>namespaceinviwo_1_1color.html</anchorfile>
      <anchor>aa4a6fd1aa6750e7d23a59707844c1776</anchor>
      <arglist>(const vec3 &amp;XYZ, vec3 whitePointXYZ=getD65WhitePoint())</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API vec3</type>
      <name>XYZ2Luv</name>
      <anchorfile>namespaceinviwo_1_1color.html</anchorfile>
      <anchor>a763c4e497df3d86ba47decf304ac5d13</anchor>
      <arglist>(const vec3 &amp;XYZ, vec3 whitePointXYZ=getD65WhitePoint())</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API vec3</type>
      <name>Luv2XYZ</name>
      <anchorfile>namespaceinviwo_1_1color.html</anchorfile>
      <anchor>abb4bc5c217e4f27f08f8eba71b474a7a</anchor>
      <arglist>(const vec3 &amp;Luv, vec3 whitePointXYZ=getD65WhitePoint())</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>inviwo::colorbrewer</name>
    <filename>namespaceinviwo_1_1colorbrewer.html</filename>
    <class kind="class">inviwo::colorbrewer::ColorBrewerException</class>
    <class kind="class">inviwo::colorbrewer::ColorBrewerTooFewException</class>
    <class kind="class">inviwo::colorbrewer::ColorBrewerTooManyException</class>
    <member kind="function">
      <type>IVW_CORE_API const std::vector&lt; dvec4 &gt; &amp;</type>
      <name>getColormap</name>
      <anchorfile>namespaceinviwo_1_1colorbrewer.html</anchorfile>
      <anchor>a1a583de15279ffae65eab08eed81304d</anchor>
      <arglist>(Colormap colormap)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API const std::vector&lt; dvec4 &gt; &amp;</type>
      <name>getColormap</name>
      <anchorfile>namespaceinviwo_1_1colorbrewer.html</anchorfile>
      <anchor>a689ea6e9106425ebea64c36151f090f6</anchor>
      <arglist>(const Family &amp;family, glm::uint8 numberOfColors)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::vector&lt; std::vector&lt; dvec4 &gt; &gt;</type>
      <name>getColormaps</name>
      <anchorfile>namespaceinviwo_1_1colorbrewer.html</anchorfile>
      <anchor>ab8ca5032d004963951e3fd746136abc0</anchor>
      <arglist>(const Family &amp;family)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::map&lt; Family, std::vector&lt; std::vector&lt; dvec4 &gt; &gt; &gt;</type>
      <name>getColormaps</name>
      <anchorfile>namespaceinviwo_1_1colorbrewer.html</anchorfile>
      <anchor>ae3bbed7acd0c0b6e747b09cc09738c3e</anchor>
      <arglist>(const Category &amp;category)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::map&lt; Family, std::vector&lt; dvec4 &gt; &gt;</type>
      <name>getColormaps</name>
      <anchorfile>namespaceinviwo_1_1colorbrewer.html</anchorfile>
      <anchor>add2770239984ad25d971afcef4796b30</anchor>
      <arglist>(const Category &amp;category, glm::uint8 numberOfColors)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API glm::uint8</type>
      <name>getMinNumberOfColorsForFamily</name>
      <anchorfile>namespaceinviwo_1_1colorbrewer.html</anchorfile>
      <anchor>a2725ea6c05a7c9f744bafeedbfd435e4</anchor>
      <arglist>(const Family &amp;family)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API glm::uint8</type>
      <name>getMaxNumberOfColorsForFamily</name>
      <anchorfile>namespaceinviwo_1_1colorbrewer.html</anchorfile>
      <anchor>a584035171f2b1c3874c056e9762b51d7</anchor>
      <arglist>(const Family &amp;family)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::vector&lt; Family &gt;</type>
      <name>getFamiliesForCategory</name>
      <anchorfile>namespaceinviwo_1_1colorbrewer.html</anchorfile>
      <anchor>a95b6329252116e47fd84a31e656f7e80</anchor>
      <arglist>(const Category &amp;category)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>inviwo::dispatching::filter</name>
    <filename>namespaceinviwo_1_1dispatching_1_1filter.html</filename>
    <class kind="struct">inviwo::dispatching::filter::All</class>
    <class kind="struct">inviwo::dispatching::filter::Float1s</class>
    <class kind="struct">inviwo::dispatching::filter::Float2s</class>
    <class kind="struct">inviwo::dispatching::filter::Float3s</class>
    <class kind="struct">inviwo::dispatching::filter::Float4s</class>
    <class kind="struct">inviwo::dispatching::filter::Floats</class>
    <class kind="struct">inviwo::dispatching::filter::Integers</class>
    <class kind="struct">inviwo::dispatching::filter::Scalars</class>
    <class kind="struct">inviwo::dispatching::filter::Vec2s</class>
    <class kind="struct">inviwo::dispatching::filter::Vec3s</class>
    <class kind="struct">inviwo::dispatching::filter::Vec4s</class>
    <class kind="struct">inviwo::dispatching::filter::Vecs</class>
  </compound>
  <compound kind="namespace">
    <name>inviwo::eigenutil</name>
    <filename>namespaceinviwo_1_1eigenutil.html</filename>
  </compound>
  <compound kind="namespace">
    <name>inviwo::filesystem</name>
    <filename>namespaceinviwo_1_1filesystem.html</filename>
    <member kind="function">
      <type>IVW_CORE_API std::fstream</type>
      <name>fstream</name>
      <anchorfile>namespaceinviwo_1_1filesystem.html</anchorfile>
      <anchor>af87faeea57012c1cb1828b4936caa4bf</anchor>
      <arglist>(const std::string &amp;filename, std::ios_base::openmode mode=std::ios_base::in|std::ios_base::out)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::ifstream</type>
      <name>ifstream</name>
      <anchorfile>namespaceinviwo_1_1filesystem.html</anchorfile>
      <anchor>a6a4930c5bc2b74e29ad6dcc636edfbc8</anchor>
      <arglist>(const std::string &amp;filename, std::ios_base::openmode mode=std::ios_base::in)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::ofstream</type>
      <name>ofstream</name>
      <anchorfile>namespaceinviwo_1_1filesystem.html</anchorfile>
      <anchor>ad963d84651ad6f7aa25b7315cb972e0e</anchor>
      <arglist>(const std::string &amp;filename, std::ios_base::openmode mode=std::ios_base::out)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::string</type>
      <name>getWorkingDirectory</name>
      <anchorfile>namespaceinviwo_1_1filesystem.html</anchorfile>
      <anchor>a74c65574282df36d20194ee298773e20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::string</type>
      <name>getExecutablePath</name>
      <anchorfile>namespaceinviwo_1_1filesystem.html</anchorfile>
      <anchor>aafc557a8fb51cbee03aba2e248b59f15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::string</type>
      <name>getInviwoUserSettingsPath</name>
      <anchorfile>namespaceinviwo_1_1filesystem.html</anchorfile>
      <anchor>a54e16d7258e91f65875101ea780ce232</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API bool</type>
      <name>fileExists</name>
      <anchorfile>namespaceinviwo_1_1filesystem.html</anchorfile>
      <anchor>a9924a7fd5356cfcb9b943b80c715e407</anchor>
      <arglist>(const std::string &amp;filePath)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API bool</type>
      <name>directoryExists</name>
      <anchorfile>namespaceinviwo_1_1filesystem.html</anchorfile>
      <anchor>a356499917cba4afc24a314ae1f4cbb71</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::time_t</type>
      <name>fileModificationTime</name>
      <anchorfile>namespaceinviwo_1_1filesystem.html</anchorfile>
      <anchor>ae554a4a0d290146e7b9a1b0aa12a28c3</anchor>
      <arglist>(const std::string &amp;filePath)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API bool</type>
      <name>copyFile</name>
      <anchorfile>namespaceinviwo_1_1filesystem.html</anchorfile>
      <anchor>a168a311ba7050122b7b2e2dab169572d</anchor>
      <arglist>(const std::string &amp;src, const std::string &amp;dst)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::vector&lt; std::string &gt;</type>
      <name>getDirectoryContents</name>
      <anchorfile>namespaceinviwo_1_1filesystem.html</anchorfile>
      <anchor>ab69b173a11fc79451fe9259e44c0b972</anchor>
      <arglist>(const std::string &amp;path, ListMode mode=ListMode::Files)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::vector&lt; std::string &gt;</type>
      <name>getDirectoryContentsRecursively</name>
      <anchorfile>namespaceinviwo_1_1filesystem.html</anchorfile>
      <anchor>a6f3ba607e670366126a2e369dd870fe2</anchor>
      <arglist>(const std::string &amp;path, ListMode mode=ListMode::Files)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API bool</type>
      <name>wildcardStringMatch</name>
      <anchorfile>namespaceinviwo_1_1filesystem.html</anchorfile>
      <anchor>a21c16b5f1aee05ccaa426bd1cf144348</anchor>
      <arglist>(const std::string &amp;pattern, const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API bool</type>
      <name>wildcardStringMatchDigits</name>
      <anchorfile>namespaceinviwo_1_1filesystem.html</anchorfile>
      <anchor>aacaefc581e9b1dcfdb3ebf572e2acbe2</anchor>
      <arglist>(const std::string &amp;pattern, const std::string &amp;str, int &amp;index, bool matchLess=false, bool matchMore=true)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::string</type>
      <name>getParentFolderWithChildren</name>
      <anchorfile>namespaceinviwo_1_1filesystem.html</anchorfile>
      <anchor>a5c8a74200722c17d2c05f5dd95191648</anchor>
      <arglist>(const std::string &amp;path, const std::vector&lt; std::string &gt; &amp;childFolders)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::string</type>
      <name>findBasePath</name>
      <anchorfile>namespaceinviwo_1_1filesystem.html</anchorfile>
      <anchor>a0395a6569abf62d1e25b3b4561923034</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::string</type>
      <name>getPath</name>
      <anchorfile>namespaceinviwo_1_1filesystem.html</anchorfile>
      <anchor>a20b7ec4f23cb9624f2ae6f96c4f073e4</anchor>
      <arglist>(PathType pathType, const std::string &amp;suffix=&quot;&quot;, const bool createFolder=false)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::string</type>
      <name>addBasePath</name>
      <anchorfile>namespaceinviwo_1_1filesystem.html</anchorfile>
      <anchor>a898ed8a1c02866f8489ce2dcafd1ab49</anchor>
      <arglist>(const std::string &amp;url)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::string</type>
      <name>replaceFileExtension</name>
      <anchorfile>namespaceinviwo_1_1filesystem.html</anchorfile>
      <anchor>a2ba368be952fe5033c0af66140273433</anchor>
      <arglist>(const std::string &amp;url, const std::string &amp;newFileExtension)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::string</type>
      <name>getRelativePath</name>
      <anchorfile>namespaceinviwo_1_1filesystem.html</anchorfile>
      <anchor>ab8e2475eec55735082c7f4df26e248f2</anchor>
      <arglist>(const std::string &amp;basePath, const std::string &amp;absolutePath)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API bool</type>
      <name>sameDrive</name>
      <anchorfile>namespaceinviwo_1_1filesystem.html</anchorfile>
      <anchor>affca786359ed7e2b4b0abefc9f728c17</anchor>
      <arglist>(const std::string &amp;refPath, const std::string &amp;queryPath)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::string</type>
      <name>cleanupPath</name>
      <anchorfile>namespaceinviwo_1_1filesystem.html</anchorfile>
      <anchor>a09c1c94afd86134befcd07fc1fb09538</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>inviwo::inviwopy</name>
    <filename>namespaceinviwo_1_1inviwopy.html</filename>
  </compound>
  <compound kind="namespace">
    <name>inviwo::meshutil</name>
    <filename>namespaceinviwo_1_1meshutil.html</filename>
  </compound>
  <compound kind="namespace">
    <name>inviwo::plot</name>
    <filename>namespaceinviwo_1_1plot.html</filename>
    <class kind="class">inviwo::plot::AxisProperty</class>
    <class kind="class">inviwo::plot::AxisRenderer</class>
    <class kind="class">inviwo::plot::AxisRenderer3D</class>
    <class kind="class">inviwo::plot::AxisRendererBase</class>
    <class kind="class">inviwo::plot::AxisRenderProcessor</class>
    <class kind="class">inviwo::plot::CategoricalColumn</class>
    <class kind="class">inviwo::plot::Column</class>
    <class kind="class">inviwo::plot::CSVSource</class>
    <class kind="class">inviwo::plot::DataFrame</class>
    <class kind="class">inviwo::plot::DataFrameColumnProperty</class>
    <class kind="class">inviwo::plot::DataFrameColumnToColorVector</class>
    <class kind="class">inviwo::plot::DataPoint</class>
    <class kind="class">inviwo::plot::DataPointBase</class>
    <class kind="class">inviwo::plot::DataTypeMismatch</class>
    <class kind="class">inviwo::plot::InvalidColCount</class>
    <class kind="class">inviwo::plot::MajorTickProperty</class>
    <class kind="class">inviwo::plot::MarginProperty</class>
    <class kind="class">inviwo::plot::MinorTickProperty</class>
    <class kind="class">inviwo::plot::NoColumns</class>
    <class kind="class">inviwo::plot::ParallelCoordinates</class>
    <class kind="class">inviwo::plot::PlotTextProperty</class>
    <class kind="class">inviwo::plot::ScatterPlotGL</class>
    <class kind="class">inviwo::plot::ScatterPlotMatrixProcessor</class>
    <class kind="class">inviwo::plot::ScatterPlotProcessor</class>
    <class kind="class">inviwo::plot::SyntheticDataFrame</class>
    <class kind="class">inviwo::plot::TemplateColumn</class>
    <class kind="class">inviwo::plot::TickProperty</class>
    <class kind="class">inviwo::plot::VolumeAxis</class>
    <member kind="function">
      <type>std::shared_ptr&lt; DataFrame &gt;</type>
      <name>createDataFrame</name>
      <anchorfile>namespaceinviwo_1_1plot.html</anchorfile>
      <anchor>a5a358c56a5fc187e620b505136cfe2fc</anchor>
      <arglist>(const std::vector&lt; std::vector&lt; std::string &gt;&gt; &amp;exampleRows, const std::vector&lt; std::string &gt; &amp;colHeaders={})</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>getMajorTickPositions</name>
      <anchorfile>namespaceinviwo_1_1plot.html</anchorfile>
      <anchor>a1870abc01e731298566264f907a36d15</anchor>
      <arglist>(const AxisProperty &amp;property)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Mesh &gt;</type>
      <name>generateTicksMesh</name>
      <anchorfile>namespaceinviwo_1_1plot.html</anchorfile>
      <anchor>ad588c6bd49c7c5a9572bdd7f8c25904e</anchor>
      <arglist>(const std::vector&lt; double &gt; tickMarks, dvec2 axisRange, const vec3 &amp;startPos, const vec3 &amp;endPos, const vec3 &amp;tickDirection, float tickLength, TickStyle style, const vec4 &amp;color, bool flip)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Mesh &gt;</type>
      <name>generateMajorTicksMesh</name>
      <anchorfile>namespaceinviwo_1_1plot.html</anchorfile>
      <anchor>aff7130b5bbd95ff80ad773416aafadf4</anchor>
      <arglist>(const AxisProperty &amp;property, const vec2 &amp;startPos, const vec2 &amp;endPos)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>inviwo::pyutil</name>
    <filename>namespaceinviwo_1_1pyutil.html</filename>
  </compound>
  <compound kind="namespace">
    <name>inviwo::statsutil</name>
    <filename>namespaceinviwo_1_1statsutil.html</filename>
  </compound>
  <compound kind="namespace">
    <name>inviwo::swizzlemasks</name>
    <filename>namespaceinviwo_1_1swizzlemasks.html</filename>
  </compound>
  <compound kind="namespace">
    <name>inviwo::util</name>
    <filename>namespaceinviwo_1_1util.html</filename>
    <class kind="struct">inviwo::util::BufferDispatcher</class>
    <class kind="struct">inviwo::util::BuildInfo</class>
    <class kind="class">inviwo::util::Camera2D</class>
    <class kind="struct">inviwo::util::cameratype</class>
    <class kind="struct">inviwo::util::cameratype&lt; 2 &gt;</class>
    <class kind="struct">inviwo::util::cameratype&lt; 3 &gt;</class>
    <class kind="class">inviwo::util::cloneable_ptr</class>
    <class kind="struct">inviwo::util::extent</class>
    <class kind="struct">inviwo::util::extent&lt; const T, N &gt;</class>
    <class kind="struct">inviwo::util::flat_extent</class>
    <class kind="struct">inviwo::util::flat_extent_impl</class>
    <class kind="struct">inviwo::util::flat_extent_impl&lt; T, 0 &gt;</class>
    <class kind="struct">inviwo::util::for_each_type</class>
    <class kind="struct">inviwo::util::for_each_type&lt; std::tuple&lt; T &gt; &gt;</class>
    <class kind="struct">inviwo::util::for_each_type&lt; std::tuple&lt; T, Types... &gt; &gt;</class>
    <class kind="struct">inviwo::util::for_each_type_pair</class>
    <class kind="struct">inviwo::util::for_each_type_pair&lt; std::tuple&lt; ATypes... &gt;, std::tuple&lt; BTypes... &gt; &gt;</class>
    <class kind="struct">inviwo::util::glmtype</class>
    <class kind="struct">inviwo::util::glmtype&lt; T, 1, 1, P &gt;</class>
    <class kind="struct">inviwo::util::glmtype&lt; T, 2, 1, P &gt;</class>
    <class kind="struct">inviwo::util::glmtype&lt; T, 2, 2, P &gt;</class>
    <class kind="struct">inviwo::util::glmtype&lt; T, 2, 3, P &gt;</class>
    <class kind="struct">inviwo::util::glmtype&lt; T, 2, 4, P &gt;</class>
    <class kind="struct">inviwo::util::glmtype&lt; T, 3, 1, P &gt;</class>
    <class kind="struct">inviwo::util::glmtype&lt; T, 3, 2, P &gt;</class>
    <class kind="struct">inviwo::util::glmtype&lt; T, 3, 3, P &gt;</class>
    <class kind="struct">inviwo::util::glmtype&lt; T, 3, 4, P &gt;</class>
    <class kind="struct">inviwo::util::glmtype&lt; T, 4, 1, P &gt;</class>
    <class kind="struct">inviwo::util::glmtype&lt; T, 4, 2, P &gt;</class>
    <class kind="struct">inviwo::util::glmtype&lt; T, 4, 3, P &gt;</class>
    <class kind="struct">inviwo::util::glmtype&lt; T, 4, 4, P &gt;</class>
    <class kind="class">inviwo::util::HasClassIdentifier</class>
    <class kind="class">inviwo::util::HasClassIdentifierLower</class>
    <class kind="class">inviwo::util::HasClassIdentifierUpper</class>
    <class kind="class">inviwo::util::HasColorCode</class>
    <class kind="class">inviwo::util::HasColorCodeLower</class>
    <class kind="class">inviwo::util::HasColorCodeUpper</class>
    <class kind="struct">inviwo::util::HasDataFormat</class>
    <class kind="class">inviwo::util::HasDataInfo</class>
    <class kind="class">inviwo::util::HasDataName</class>
    <class kind="class">inviwo::util::HasInfo</class>
    <class kind="class">inviwo::util::IdentifiedDeserializer</class>
    <class kind="class">inviwo::util::IndexedDeserializer</class>
    <class kind="struct">inviwo::util::IndexMapper</class>
    <class kind="struct">inviwo::util::IndexMapper&lt; 2, IndexType &gt;</class>
    <class kind="struct">inviwo::util::IndexMapper&lt; 3, IndexType &gt;</class>
    <class kind="struct">inviwo::util::is_constructible</class>
    <class kind="class">inviwo::util::is_container</class>
    <class kind="struct">inviwo::util::is_dereferenceable</class>
    <class kind="struct">inviwo::util::is_dereferenceable&lt; T, void_t&lt; decltype(*std::declval&lt; T &gt;())&gt;</class>
    <class kind="struct">inviwo::util::is_floating_point</class>
    <class kind="struct">inviwo::util::is_floating_point&lt; half_float::half &gt;</class>
    <class kind="class">inviwo::util::is_stream_insertable</class>
    <class kind="struct">inviwo::util::is_string</class>
    <class kind="struct">inviwo::util::iter_range</class>
    <class kind="class">inviwo::util::KeepTrueWhileInScope</class>
    <class kind="class">inviwo::util::MapDeserializer</class>
    <class kind="class">inviwo::util::MemoryFileHandle</class>
    <class kind="class">inviwo::util::NotificationBlocker</class>
    <class kind="struct">inviwo::util::OnScopeExit</class>
    <class kind="class">inviwo::util::ostream_joiner</class>
    <class kind="struct">inviwo::util::PropertyDistanceSorter</class>
    <class kind="struct">inviwo::util::rank</class>
    <class kind="struct">inviwo::util::rank&lt; const T &gt;</class>
    <class kind="struct">inviwo::util::rank&lt; half_float::half &gt;</class>
    <class kind="struct">inviwo::util::same_extent</class>
    <class kind="struct">inviwo::util::same_extent&lt; G&lt; T, P &gt;, U &gt;</class>
    <class kind="struct">inviwo::util::sequence</class>
    <class kind="class">inviwo::util::TempFileHandle</class>
    <class kind="class">inviwo::util::TextureAtlas</class>
    <class kind="struct">inviwo::util::value_type</class>
    <class kind="struct">inviwo::util::value_type&lt; G&lt; T, P &gt; &gt;</class>
    <member kind="typedef">
      <type>typename std::remove_pointer&lt; typename std::remove_const&lt; T &gt;::type &gt;::type</type>
      <name>PrecsionType</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>ade565d10867e0dc26e164bd60ff9ef6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename PrecsionType&lt; T &gt;::type</type>
      <name>PrecsionValueType</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>accdae1f9f37726cbb9ea49087f03ca79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API InviwoApplication *</type>
      <name>getInviwoApplication</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a0a83c9f2374441d3698563e90c35a115</anchor>
      <arglist>(ProcessorNetwork *)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API InviwoApplication *</type>
      <name>getInviwoApplication</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>abf13843c2e4fd0df7921e8c9365b044f</anchor>
      <arglist>(Processor *)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API InviwoApplication *</type>
      <name>getInviwoApplication</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>ad9d5b9648bb957bd76d93b52beddfc4b</anchor>
      <arglist>(PropertyOwner *)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API InviwoApplication *</type>
      <name>getInviwoApplication</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a0d55ce422a8f0e6b2d423426246a9871</anchor>
      <arglist>(Property *)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API InviwoApplication *</type>
      <name>getInviwoApplication</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>af1a8f1d379addc2b0acf5b22775f20ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::string</type>
      <name>appendIfNotEmpty</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a91b84870bcc5a9146482efc443d4d58e</anchor>
      <arglist>(const std::string &amp;a, const std::string &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API ivec2</type>
      <name>getCenterPosition</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a3a48a6c93ec94278b9a578e3f7ed121e</anchor>
      <arglist>(const std::vector&lt; Processor * &gt; &amp;processors)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::pair&lt; ivec2, ivec2 &gt;</type>
      <name>getBoundingBox</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>ae1576d27b51250b88678f1c8d14e4cee</anchor>
      <arglist>(const std::vector&lt; Processor * &gt; &amp;processors)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API void</type>
      <name>offsetPosition</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>aa6f989cfbbdc73307b67d9e2a337f98c</anchor>
      <arglist>(const std::vector&lt; Processor * &gt; &amp;processors, const ivec2 &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API void</type>
      <name>setSelected</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>afa407e1befa71dead470ad651119faee</anchor>
      <arglist>(const std::vector&lt; Processor * &gt; &amp;processors, bool selected)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API void</type>
      <name>replaceSelectionWithCompositeProcessor</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>aa2be9fca7a318feb7d7a1d14b79eb976</anchor>
      <arglist>(ProcessorNetwork &amp;network)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API void</type>
      <name>expandCompositeProcessorIntoNetwork</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a731971fbc0202eccf36e24fc48970761</anchor>
      <arglist>(CompositeProcessor &amp;composite)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API void</type>
      <name>reverse</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a9cee67b6facc99fd2e7a3ab655d65641</anchor>
      <arglist>(BufferBase &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>BuildInfo IVW_CORE_API</type>
      <name>getBuildInfo</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a9a367e3e6c6c448efab8e00c52de4097</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::future&lt; void &gt; &gt;</type>
      <name>forEachParallelAsync</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>ab4e51751558c8e07c5b63cddf28b19f8</anchor>
      <arglist>(const Iterable &amp;iterable, Callback callback, size_t jobs=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachParallel</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a6582b2f1b71b3ac6d3e606bc361ab07e</anchor>
      <arglist>(const Iterable &amp;iterable, Callback callback, size_t jobs=0)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::vector&lt; std::string &gt;</type>
      <name>getLibrarySearchPaths</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a4a9d8109d75e9f8a6b234bfe6c426af4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr detail::is_callable&lt; F, A... &gt;</type>
      <name>is_callable_with</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a120524c5de0bd62f52483f096e0374d4</anchor>
      <arglist>(F &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_combine</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a940aef3565e6c2edd145d6d410087668</anchor>
      <arglist>(std::size_t &amp;seed, const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::wstring</type>
      <name>toWstring</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a828ef8f28093e76d6de14668216ca4ed</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API TimerThread &amp;</type>
      <name>getDefaultTimerThread</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a74142af3631865f4c234289d551ce883</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::string</type>
      <name>findUniqueIdentifier</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a947c6cae56d5239848a9e2fa42cc5d15</anchor>
      <arglist>(const std::string &amp;identifier, std::function&lt; bool(const std::string &amp;)&gt; isUnique, const std::string &amp;sep=&quot; &quot;)</arglist>
    </member>
    <member kind="function">
      <type>IVW_CORE_API std::string</type>
      <name>stripModuleFileNameDecoration</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a45dabd37be130a5a97526c8fbc77f65e</anchor>
      <arglist>(std::string filePath)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; vec3, vec3 &gt; IVW_CORE_API</type>
      <name>getVolumeMargins</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a8542415328e2816a23607c5cc98c9341</anchor>
      <arglist>(const std::shared_ptr&lt; const Volume &gt; &amp;volume)</arglist>
    </member>
    <member kind="function">
      <type>size3_t IVW_CORE_API</type>
      <name>getVolumeDimensions</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a95c836cccb8edab48454737dedf4ea04</anchor>
      <arglist>(const std::shared_ptr&lt; const Volume &gt; &amp;volume)</arglist>
    </member>
    <member kind="function">
      <type>double IVW_CORE_API</type>
      <name>voxelVolume</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>af0d36142d9279c614f2d9a0d4503ecb8</anchor>
      <arglist>(const Volume &amp;volume)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>zip</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a721d88957bec3510afb6161516801c46</anchor>
      <arglist>(T &amp;&amp;...args) -&gt; detailzip::zipper&lt; T... &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>make_sequence</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a0b4c1a60c4b345a81d28ca29ab9848d7</anchor>
      <arglist>(const T &amp;begin, const T &amp;end, const T &amp;inc) -&gt; sequence&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>enumerate</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>ad67ea99370513fd4b8ee44ff44c0f792</anchor>
      <arglist>(T &amp;&amp;cont, Ts &amp;&amp;...conts)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConvex</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>aa048b0cf2e27625499d9ac8e03af03d6</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;polygon)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a193aac2254d9cc5b5b1029995323d957</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;hull, const T &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getArea</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>aaba0bfadae887301565e97b98483268b</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;polygon)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>convexHull</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>ab6356ee05cfde312881b948335bf689b</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; dvec4, dvec4 &gt;</type>
      <name>dataMinMax</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>ad45333385bb88c2c829ca1c624e69f2e</anchor>
      <arglist>(const ValueType *data, size_t size, IgnoreSpecialValues ignore=IgnoreSpecialValues::No)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>layerRAMDistanceTransform</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a90dfea83005204a1c4beaa3714c38e74</anchor>
      <arglist>(const LayerRAMPrecision&lt; T &gt; *inLayer, LayerRAMPrecision&lt; U &gt; *outDistanceField, const Matrix&lt; 2, U &gt; basis, const size2_t upsample, Predicate predicate, ValueTransform valueTransform, ProgressCallback callback)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>haltonSequence</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a0bc9d791f018bc81c41c404dd173a3cb</anchor>
      <arglist>(size_t base, size_t numberOfPoints)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Image &gt;</type>
      <name>haltonSequence</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a18c7215de9974cbf63e74f28ae4941cc</anchor>
      <arglist>(size2_t dims, size_t numberOfPoints, size_t baseX=2, size_t baseY=3)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Volume &gt;</type>
      <name>haltonSequence</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>abad0d2b2ea3ccf4f8f61bde3bc4a3292</anchor>
      <arglist>(size3_t dims, size_t numberOfPoints, size_t baseX=2, size_t baseY=3, size_t baseZ=5)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomSequence</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a48b2f672f99a31ee8b19f6f40fa768cb</anchor>
      <arglist>(T *data, size_t numberOfElements, Rand &amp;randomNumberGenerator=Rand(), Dist &amp;distribution=Dist(0, 1))</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Image &gt;</type>
      <name>randomImage</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a8d29c3a03f733f46621cb8b3dc1f0619</anchor>
      <arglist>(size2_t dims, Rand &amp;randomNumberGenerator=Rand(), Dist &amp;distribution=Dist(0, 1))</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Volume &gt;</type>
      <name>randomVolume</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a995a3d89246ce375a3ecc478959a8cea</anchor>
      <arglist>(size3_t dims, Rand &amp;randomNumberGenerator=Rand(), Dist &amp;distribution=Dist(0, 1))</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Image &gt;</type>
      <name>perlinNoise</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a9e906349979b05c9d0bba6d0a870da72</anchor>
      <arglist>(size2_t dims, float persistence, size_t startLevel, size_t endLevel, Rand &amp;randomNumberGenerator=Rand())</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Image &gt;</type>
      <name>poissonDisk</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>acf192a88e50a7b6fd57363e4b7f2adfa</anchor>
      <arglist>(size2_t dims, size_t poissonDotsAlongX, size_t maxPoints, Rand &amp;randomNumberGenerator=Rand())</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Mesh &gt;</type>
      <name>marchingcubes</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a1fcfa6968810037bc39cac05239f3586</anchor>
      <arglist>(std::shared_ptr&lt; const Volume &gt; volume, double iso, const vec4 &amp;color, bool invert, bool enclose, std::function&lt; void(float)&gt; progressCallback, std::function&lt; bool(const size3_t &amp;)&gt; maskingCallback)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Mesh &gt;</type>
      <name>marchingCubesOpt</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a859f8da4f45bae2f0ef4a246c9f83d3c</anchor>
      <arglist>(std::shared_ptr&lt; const Volume &gt; volume, double iso, const vec4 &amp;color, bool invert, bool enclose, std::function&lt; void(float)&gt; progressCallback, std::function&lt; bool(const size3_t &amp;)&gt; maskingCallback)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Mesh &gt;</type>
      <name>marchingtetrahedron</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a8d16927242ef3ca2f6eb3763bca997c6</anchor>
      <arglist>(std::shared_ptr&lt; const Volume &gt; volume, double iso, const vec4 &amp;color, bool invert, bool enclose, std::function&lt; void(float)&gt; progressCallback, std::function&lt; bool(const size3_t &amp;)&gt; maskingCallback)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Volume &gt;</type>
      <name>generateVolume</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a10fced04a2ded91e940c80974c559a93</anchor>
      <arglist>(const size3_t &amp;dimensions, const mat3 &amp;basis, Functor &amp;&amp;function)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Volume &gt;</type>
      <name>makeSingleVoxelVolume</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>afd7f0331189f7bab9a30abcaa2232203</anchor>
      <arglist>(const size3_t &amp;size)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Volume &gt;</type>
      <name>makeSphericalVolume</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a3624bda720c599cf5ba2b1da294aba93</anchor>
      <arglist>(const size3_t &amp;size)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Volume &gt;</type>
      <name>makeRippleVolume</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>af7601a4221d0a73cbc4fbcf2a6397369</anchor>
      <arglist>(const size3_t &amp;size)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Volume &gt;</type>
      <name>makeMarchingCubeVolume</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a54ea5db009d3c6ea5afa9305a82d54f6</anchor>
      <arglist>(const size_t &amp;index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>volumeRAMDistanceTransform</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>aa893e468e6145d6106135461cd962371</anchor>
      <arglist>(const VolumeRAMPrecision&lt; T &gt; *inVolume, VolumeRAMPrecision&lt; U &gt; *outDistanceField, const Matrix&lt; 3, U &gt; basis, const size3_t upsample, Predicate predicate, ValueTransform valueTransform, ProgressCallback callback)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>writeIvfVolumeSequence</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a301f6b6c9149cf18fcbf79a4ee50671f</anchor>
      <arglist>(const VolumeSequence &amp;volumes, std::string name, std::string path, std::string reltivePathToElements=&quot;&quot;, bool overwrite=true)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Texture2D &gt;</type>
      <name>createTextTexture</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a3eeab661d508871092624df0e49f3f9b</anchor>
      <arglist>(TextRenderer &amp;textRenderer_, std::string text, int fontSize, vec4 fontColor, std::shared_ptr&lt; Texture2D &gt; tex=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt;</type>
      <name>getAvailableFonts</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>afa7f05f120bd356afe73fa0a26fc3458</anchor>
      <arglist>(const std::string &amp;fontPath=std::string())</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDefaultFontPath</name>
      <anchorfile>namespaceinviwo_1_1util.html</anchorfile>
      <anchor>a464128344b2b03d507ac2f33ec41351f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>inviwo::utilcl</name>
    <filename>namespaceinviwo_1_1utilcl.html</filename>
    <class kind="struct">inviwo::utilcl::LightParameters</class>
  </compound>
  <compound kind="namespace">
    <name>inviwo::utildoc</name>
    <filename>namespaceinviwo_1_1utildoc.html</filename>
    <class kind="class">inviwo::utildoc::TableBuilder</class>
  </compound>
  <compound kind="namespace">
    <name>inviwo::utilgl</name>
    <filename>namespaceinviwo_1_1utilgl.html</filename>
    <class kind="struct">inviwo::utilgl::BlendModeEquationState</class>
    <class kind="struct">inviwo::utilgl::BlendModeState</class>
    <class kind="struct">inviwo::utilgl::ClearColor</class>
    <class kind="struct">inviwo::utilgl::CullFaceState</class>
    <class kind="struct">inviwo::utilgl::dependent_false</class>
    <class kind="struct">inviwo::utilgl::Enable</class>
    <class kind="struct">inviwo::utilgl::GlBoolState</class>
    <class kind="struct">inviwo::utilgl::PolygonModeState</class>
    <class kind="struct">inviwo::utilgl::SimpleState</class>
    <class kind="struct">inviwo::utilgl::TexEnv</class>
    <class kind="struct">inviwo::utilgl::TexParameter</class>
    <class kind="struct">inviwo::utilgl::UniformSetter</class>
    <class kind="struct">inviwo::utilgl::UniformSetter&lt; bool &gt;</class>
    <class kind="struct">inviwo::utilgl::UniformSetter&lt; BoolProperty &gt;</class>
    <class kind="struct">inviwo::utilgl::UniformSetter&lt; bvec2 &gt;</class>
    <class kind="struct">inviwo::utilgl::UniformSetter&lt; bvec3 &gt;</class>
    <class kind="struct">inviwo::utilgl::UniformSetter&lt; bvec4 &gt;</class>
    <class kind="struct">inviwo::utilgl::UniformSetter&lt; GLfloat &gt;</class>
    <class kind="struct">inviwo::utilgl::UniformSetter&lt; GLint &gt;</class>
    <class kind="struct">inviwo::utilgl::UniformSetter&lt; GLuint &gt;</class>
    <class kind="struct">inviwo::utilgl::UniformSetter&lt; ivec2 &gt;</class>
    <class kind="struct">inviwo::utilgl::UniformSetter&lt; ivec3 &gt;</class>
    <class kind="struct">inviwo::utilgl::UniformSetter&lt; ivec4 &gt;</class>
    <class kind="struct">inviwo::utilgl::UniformSetter&lt; mat2 &gt;</class>
    <class kind="struct">inviwo::utilgl::UniformSetter&lt; mat3 &gt;</class>
    <class kind="struct">inviwo::utilgl::UniformSetter&lt; mat4 &gt;</class>
    <class kind="struct">inviwo::utilgl::UniformSetter&lt; OrdinalProperty&lt; T &gt; &gt;</class>
    <class kind="struct">inviwo::utilgl::UniformSetter&lt; std::array&lt; bool, N &gt; &gt;</class>
    <class kind="struct">inviwo::utilgl::UniformSetter&lt; std::array&lt; T, N &gt; &gt;</class>
    <class kind="struct">inviwo::utilgl::UniformSetter&lt; std::vector&lt; T &gt; &gt;</class>
    <class kind="struct">inviwo::utilgl::UniformSetter&lt; TextureUnit &gt;</class>
    <class kind="struct">inviwo::utilgl::UniformSetter&lt; uvec2 &gt;</class>
    <class kind="struct">inviwo::utilgl::UniformSetter&lt; uvec3 &gt;</class>
    <class kind="struct">inviwo::utilgl::UniformSetter&lt; uvec4 &gt;</class>
    <class kind="struct">inviwo::utilgl::UniformSetter&lt; vec2 &gt;</class>
    <class kind="struct">inviwo::utilgl::UniformSetter&lt; vec3 &gt;</class>
    <class kind="struct">inviwo::utilgl::UniformSetter&lt; vec4 &gt;</class>
    <class kind="struct">inviwo::utilgl::Viewport</class>
    <class kind="struct">inviwo::utilgl::ViewportState</class>
    <member kind="function">
      <type>std::unique_ptr&lt; Mesh &gt;</type>
      <name>planeRect</name>
      <anchorfile>namespaceinviwo_1_1utilgl.html</anchorfile>
      <anchor>a01ba6d71bea79602047826daf38988ae</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>inviwo::utilqt</name>
    <filename>namespaceinviwo_1_1utilqt.html</filename>
    <member kind="function">
      <type>IVW_QTEDITOR_API QImage</type>
      <name>generatePreview</name>
      <anchorfile>namespaceinviwo_1_1utilqt.html</anchorfile>
      <anchor>a736c435c76254f89b16a8bd258763781</anchor>
      <arglist>(const QString &amp;classIdentifier)</arglist>
    </member>
    <member kind="function">
      <type>IVW_QTEDITOR_API QImage</type>
      <name>generateProcessorPreview</name>
      <anchorfile>namespaceinviwo_1_1utilqt.html</anchorfile>
      <anchor>a88786eb9c20aee5790924d51f6399118</anchor>
      <arglist>(const QString &amp;classIdentifier, double opacity=1.0)</arglist>
    </member>
    <member kind="function">
      <type>MouseButtons</type>
      <name>getMouseButtons</name>
      <anchorfile>namespaceinviwo_1_1utilqt.html</anchorfile>
      <anchor>aa9fdc5daccf5dbffb15b28e87095d475</anchor>
      <arglist>(const QMouseEvent *e)</arglist>
    </member>
    <member kind="function">
      <type>MouseButton</type>
      <name>getMouseButtonCausingEvent</name>
      <anchorfile>namespaceinviwo_1_1utilqt.html</anchorfile>
      <anchor>a75fff05adc3230c287f783f1339e5d38</anchor>
      <arglist>(const QMouseEvent *e)</arglist>
    </member>
    <member kind="function">
      <type>std::locale</type>
      <name>getCurrentStdLocale</name>
      <anchorfile>namespaceinviwo_1_1utilqt.html</anchorfile>
      <anchor>abfa501ea4c3935ad8fbfdfcbcf2156ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ios_base &amp;</type>
      <name>localizeStream</name>
      <anchorfile>namespaceinviwo_1_1utilqt.html</anchorfile>
      <anchor>ad78edf7e96f3dc631de179d7527a83ff</anchor>
      <arglist>(std::ios_base &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>toLocalQString</name>
      <anchorfile>namespaceinviwo_1_1utilqt.html</anchorfile>
      <anchor>a193c37af827940e08e457bdba9be7214</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>fromLocalQString</name>
      <anchorfile>namespaceinviwo_1_1utilqt.html</anchorfile>
      <anchor>a7425e900ecbaefde924ecbe1aa381d53</anchor>
      <arglist>(const QString &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>QString</type>
      <name>toQString</name>
      <anchorfile>namespaceinviwo_1_1utilqt.html</anchorfile>
      <anchor>ae506d0eb8150c4d571673b38a5419e6b</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>fromQString</name>
      <anchorfile>namespaceinviwo_1_1utilqt.html</anchorfile>
      <anchor>a4e34a0ebf40a58f32190575efbe4da9a</anchor>
      <arglist>(const QString &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>QMainWindow *</type>
      <name>getApplicationMainWindow</name>
      <anchorfile>namespaceinviwo_1_1utilqt.html</anchorfile>
      <anchor>a583ab1296d218f71ed78d739424f5fab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>QPoint</type>
      <name>movePointOntoDesktop</name>
      <anchorfile>namespaceinviwo_1_1utilqt.html</anchorfile>
      <anchor>a00f85da19f86f2cde4b2b29bc9546d65</anchor>
      <arglist>(const QPoint &amp;point, const QSize &amp;size, bool decorationOffset=true)</arglist>
    </member>
    <member kind="function">
      <type>QPoint</type>
      <name>offsetWidget</name>
      <anchorfile>namespaceinviwo_1_1utilqt.html</anchorfile>
      <anchor>aefd4e18f9567dfe5d5d636bd33b15e47</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>dataio</name>
    <title>Data Reader &amp; Writers</title>
    <filename>group__dataio.html</filename>
    <class kind="class">inviwo::DataReader</class>
    <class kind="class">inviwo::DataReaderType</class>
    <class kind="class">inviwo::DataWriter</class>
    <class kind="class">inviwo::DataWriterType</class>
    <class kind="class">inviwo::RawVolumeReader</class>
    <class kind="class">inviwo::TextFileReader</class>
    <class kind="class">inviwo::DatVolumeSequenceReader</class>
    <class kind="class">inviwo::DatVolumeWriter</class>
    <class kind="class">inviwo::IvfSequenceVolumeReader</class>
    <class kind="class">inviwo::IvfSequenceVolumeWriter</class>
    <class kind="class">inviwo::IvfVolumeReader</class>
    <class kind="class">inviwo::IvfVolumeWriter</class>
    <class kind="class">inviwo::AssimpReader</class>
    <class kind="class">inviwo::CImgLayerReader</class>
    <class kind="class">inviwo::CImgLayerWriter</class>
    <class kind="class">inviwo::CImgVolumeReader</class>
    <class kind="class">inviwo::CSVReader</class>
  </compound>
  <compound kind="group">
    <name>ports</name>
    <title>Ports</title>
    <filename>group__ports.html</filename>
    <class kind="class">inviwo::DataInport</class>
    <class kind="class">inviwo::DataOutport</class>
    <class kind="class">inviwo::BaseImageInport</class>
    <class kind="class">inviwo::ImageOutport</class>
    <class kind="class">inviwo::Port</class>
  </compound>
  <compound kind="group">
    <name>processors</name>
    <title>Processors</title>
    <filename>group__processors.html</filename>
    <namespace>inviwo::plot</namespace>
    <class kind="class">inviwo::Processor</class>
    <class kind="class">inviwo::BrushingAndLinkingProcessor</class>
    <class kind="class">inviwo::NumPyMeshCreateTest</class>
    <class kind="class">inviwo::CameraFrustum</class>
    <class kind="class">inviwo::CubeProxyGeometry</class>
    <class kind="class">inviwo::DiffuseLightSourceProcessor</class>
    <class kind="class">inviwo::DirectionalLightSourceProcessor</class>
    <class kind="class">inviwo::DistanceTransformRAM</class>
    <class kind="class">inviwo::HeightFieldMapper</class>
    <class kind="class">inviwo::ImageContourProcessor</class>
    <class kind="class">inviwo::ImageExport</class>
    <class kind="class">inviwo::ImageSequenceElementSelectorProcessor</class>
    <class kind="class">inviwo::ImageSnapshot</class>
    <class kind="class">inviwo::ImageSource</class>
    <class kind="class">inviwo::ImageSourceSeries</class>
    <class kind="class">inviwo::ImageToSpatialSampler</class>
    <class kind="class">inviwo::LayerDistanceTransformRAM</class>
    <class kind="class">inviwo::MeshClipping</class>
    <class kind="class">inviwo::MeshCreator</class>
    <class kind="class">inviwo::MeshExport</class>
    <class kind="class">inviwo::MeshSequenceElementSelectorProcessor</class>
    <class kind="class">inviwo::MeshSource</class>
    <class kind="class">inviwo::OrdinalPropertyAnimator</class>
    <class kind="class">inviwo::OrientationIndicator</class>
    <class kind="class">inviwo::PixelToBufferProcessor</class>
    <class kind="class">inviwo::PointLightSourceProcessor</class>
    <class kind="class">inviwo::RandomSphereGenerator</class>
    <class kind="class">inviwo::SingleVoxel</class>
    <class kind="class">inviwo::SpotLightSourceProcessor</class>
    <class kind="class">inviwo::SurfaceExtraction</class>
    <class kind="class">inviwo::BasisTransform</class>
    <class kind="class">inviwo::VolumeBoundingBox</class>
    <class kind="class">inviwo::VolumeCreator</class>
    <class kind="class">inviwo::VolumeCurlCPUProcessor</class>
    <class kind="class">inviwo::VolumeExport</class>
    <class kind="class">inviwo::VolumeGradientCPUProcessor</class>
    <class kind="class">inviwo::VolumeLaplacianProcessor</class>
    <class kind="class">inviwo::VolumeSequenceElementSelectorProcessor</class>
    <class kind="class">inviwo::VolumeSequenceSingleTimestepSamplerProcessor</class>
    <class kind="class">inviwo::VolumeSequenceToSpatial4DSampler</class>
    <class kind="class">inviwo::VolumeSlice</class>
    <class kind="class">inviwo::VolumeSource</class>
    <class kind="class">inviwo::VolumeSubsample</class>
    <class kind="class">inviwo::VolumeSubset</class>
    <class kind="class">inviwo::VolumeToSpatialSampler</class>
    <class kind="class">inviwo::WorldTransform</class>
    <class kind="class">inviwo::Background</class>
    <class kind="class">inviwo::DrawLines</class>
    <class kind="class">inviwo::DrawPoints</class>
    <class kind="class">inviwo::EntryExitPoints</class>
    <class kind="class">inviwo::FirstIvwProcessor</class>
    <class kind="class">inviwo::HeightFieldProcessor</class>
    <class kind="class">inviwo::FindEdges</class>
    <class kind="class">inviwo::ImageCompositeProcessorGL</class>
    <class kind="class">inviwo::ImageLayoutGL</class>
    <class kind="class">inviwo::ImageNormalizationProcessor</class>
    <class kind="class">inviwo::ISORaycaster</class>
    <class kind="class">inviwo::LightingRaycaster</class>
    <class kind="class">inviwo::LightVolumeGL</class>
    <class kind="class">inviwo::MeshPicking</class>
    <class kind="class">inviwo::MeshRenderProcessorGL</class>
    <class kind="class">inviwo::MultichannelRaycaster</class>
    <class kind="class">inviwo::RedGreenProcessor</class>
    <class kind="class">inviwo::VolumeDiff</class>
    <class kind="class">inviwo::VolumeLowPass</class>
    <class kind="class">inviwo::VolumeMapping</class>
    <class kind="class">inviwo::VolumeRaycaster</class>
    <class kind="class">inviwo::Vector2DCurl</class>
    <class kind="class">inviwo::Vector2DDivergence</class>
    <class kind="class">inviwo::Vector2DMagnitude</class>
    <class kind="class">inviwo::Vector3DCurl</class>
    <class kind="class">inviwo::Vector3DDivergence</class>
    <class kind="class">inviwo::TMIP</class>
    <class kind="class">inviwo::VectorFieldGenerator2D</class>
    <class kind="class">inviwo::VectorFieldGenerator3D</class>
    <class kind="class">inviwo::VectorFieldGenerator4D</class>
    <class kind="class">inviwo::TextOverlayGL</class>
    <class kind="class">inviwo::plot::CSVSource</class>
    <class kind="class">inviwo::plot::DataFrameColumnToColorVector</class>
    <class kind="class">inviwo::plot::SyntheticDataFrame</class>
    <class kind="class">inviwo::plot::ScatterPlotMatrixProcessor</class>
    <class kind="class">inviwo::plot::ScatterPlotProcessor</class>
    <class kind="class">inviwo::hdf5::PathSelection</class>
    <class kind="class">inviwo::hdf5::Source</class>
    <class kind="class">inviwo::hdf5::HDF5ToVolume</class>
    <class kind="class">inviwo::PathLines</class>
    <class kind="class">inviwo::StreamLines</class>
    <class kind="class">inviwo::SeedPointGenerator</class>
    <class kind="class">inviwo::IntegralLineVectorToMesh</class>
    <class kind="class">inviwo::CropWidget</class>
    <class kind="class">inviwo::EntryExitPointsCLProcessor</class>
    <class kind="class">inviwo::GrayscaleCLProcessor</class>
    <class kind="class">inviwo::VolumeFirstHitCLProcessor</class>
    <class kind="class">inviwo::VolumeMaxCLProcessor</class>
    <class kind="class">inviwo::VolumeRaycasterCLProcessor</class>
    <class kind="class">inviwo::NumpyMandelbrot</class>
    <class kind="class">inviwo::NumPyVolume</class>
    <class kind="class">inviwo::CanvasProcessorGL</class>
    <class kind="class">inviwo::BufferToMeshProcessor</class>
    <class kind="class">inviwo::ConvexHull2DProcessor</class>
    <class kind="class">inviwo::InputSelector</class>
    <class kind="class">inviwo::MeshMapping</class>
    <class kind="class">inviwo::NoiseProcessor</class>
    <class kind="class">inviwo::StereoCameraSyncer</class>
    <class kind="class">inviwo::VolumeSequenceSource</class>
    <class kind="class">inviwo::CubeRenderer</class>
    <class kind="class">inviwo::ImageBinary</class>
    <class kind="class">inviwo::ImageGamma</class>
    <class kind="class">inviwo::ImageGradient</class>
    <class kind="class">inviwo::ImageGrayscale</class>
    <class kind="class">inviwo::ImageHighPass</class>
    <class kind="class">inviwo::ImageInvert</class>
    <class kind="class">inviwo::ImageLowPass</class>
    <class kind="class">inviwo::ImageMapping</class>
    <class kind="class">inviwo::ImageMixer</class>
    <class kind="class">inviwo::ImageOverlayGL</class>
    <class kind="class">inviwo::ImageResample</class>
    <class kind="class">inviwo::ImageScaling</class>
    <class kind="class">inviwo::Jacobian2D</class>
    <class kind="class">inviwo::LineRenderer</class>
    <class kind="class">inviwo::PointRenderer</class>
    <class kind="class">inviwo::SphereRenderer</class>
    <class kind="class">inviwo::VectorMagnitudeProcessor</class>
    <class kind="class">inviwo::VolumeBinary</class>
    <class kind="class">inviwo::VolumeCombiner</class>
    <class kind="class">inviwo::VolumeGradientMagnitude</class>
    <class kind="class">inviwo::VolumeGradientProcessor</class>
    <class kind="class">inviwo::VolumeMerger</class>
    <class kind="class">inviwo::VolumeSliceGL</class>
    <class kind="class">inviwo::plot::AxisRenderProcessor</class>
    <class kind="class">inviwo::plot::VolumeAxis</class>
    <class kind="class">inviwo::Fog</class>
    <class kind="class">inviwo::FXAA</class>
    <class kind="class">inviwo::HdrBloom</class>
    <class kind="class">inviwo::ImageBrightnessContrast</class>
    <class kind="class">inviwo::ImageEdgeDarken</class>
    <class kind="class">inviwo::ImageHueSaturationLuminance</class>
    <class kind="class">inviwo::ImageOpacity</class>
    <class kind="class">inviwo::ImageSharpen</class>
    <class kind="class">inviwo::SSAO</class>
    <class kind="class">inviwo::EigenMix</class>
    <class kind="class">inviwo::EigenNormalize</class>
    <class kind="class">inviwo::DiscardShortLines</class>
    <class kind="class">inviwo::CameraWidget</class>
    <class kind="class">inviwo::GLUITestProcessor</class>
    <class kind="class">inviwo::PresentationProcessor</class>
  </compound>
  <compound kind="group">
    <name>properties</name>
    <title>Properties</title>
    <filename>group__properties.html</filename>
    <class kind="class">inviwo::AdvancedMaterialProperty</class>
    <class kind="class">inviwo::BoolCompositeProperty</class>
    <class kind="class">inviwo::BoolProperty</class>
    <class kind="class">inviwo::ButtonProperty</class>
    <class kind="class">inviwo::CameraProperty</class>
    <class kind="class">inviwo::CompositeProperty</class>
    <class kind="class">inviwo::DirectoryProperty</class>
    <class kind="class">inviwo::EventProperty</class>
    <class kind="class">inviwo::FileProperty</class>
    <class kind="class">inviwo::ImageEditorProperty</class>
    <class kind="class">inviwo::MinMaxProperty</class>
    <class kind="class">inviwo::MultiFileProperty</class>
    <class kind="class">inviwo::OrdinalProperty</class>
    <class kind="class">inviwo::PlaneProperty</class>
    <class kind="class">inviwo::PositionProperty</class>
    <class kind="class">inviwo::Property</class>
    <class kind="class">inviwo::SimpleLightingProperty</class>
    <class kind="class">inviwo::SimpleRaycastingProperty</class>
    <class kind="class">inviwo::StringProperty</class>
    <class kind="class">inviwo::TemplateProperty</class>
    <class kind="class">inviwo::TransferFunctionProperty</class>
    <class kind="class">inviwo::VolumeIndicatorProperty</class>
    <class kind="class">inviwo::BasisProperty</class>
    <class kind="class">inviwo::GaussianProperty</class>
    <class kind="class">inviwo::SequenceTimerProperty</class>
    <class kind="class">inviwo::VolumeInformationProperty</class>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>Inviwo - Interactive Visualization Workshop</title>
    <filename>index</filename>
  </compound>
</tagfile>
